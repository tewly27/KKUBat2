int32_t* __fastcall sub_401000(int32_t* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4274c8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_10 = arg1;
    arg1[1] = 0;
    *arg1 = 0x42a6bc;
    __builtin_memset(&arg1[2], 0, 0x3c);
    void* edi_1 = "Times New Roman";
    int32_t i = 0xffffffff;
    arg1[2] = 0xfffffff4;
    arg1[3] = 0;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[6] = 0x190;
    arg1[7] = 0;
    *(arg1 + 0x1d) = 0;
    *(arg1 + 0x1e) = 0;
    *(arg1 + 0x1f) = 1;
    arg1[8] = 0;
    *(arg1 + 0x21) = 0;
    *(arg1 + 0x22) = 2;
    *(arg1 + 0x23) = 0x12;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi_1;
        edi_1 = (edi_1 + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx = (!i);
    int32_t var_4 = 0;
    __builtin_memcpy(&arg1[9], (edi_1 - ecx), ((ecx >> 2) << 2));
    int32_t esi_2;
    int32_t edi_4;
    __builtin_memcpy(edi_4, esi_2, (ecx & 3));
    CGdiObject::Attach(arg1, CreateFontIndirectA(&arg1[2]));
    int32_t ecx_5 = var_c;
    arg1[0x11] = 0;
    arg1[0x12] = 0;
    *fsbase = ecx_5;
    return arg1;
}

void* __thiscall sub_4010d0(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_4012f0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t* __fastcall sub_4010f0(int32_t* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4274f0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_10 = arg1;
    int32_t var_4 = 0;
    arg1[1] = 0;
    *arg1 = 0x42a6bc;
    __builtin_memset(&arg1[2], 0, 0x3c);
    int32_t edi_1 = arg_4;
    int32_t i = 0xffffffff;
    arg1[2] = 0xfffffff4;
    arg1[3] = 0;
    arg1[4] = 0;
    arg1[5] = 0;
    arg1[6] = 0x190;
    arg1[7] = 0;
    *(arg1 + 0x1d) = 0;
    *(arg1 + 0x1e) = 0;
    *(arg1 + 0x1f) = 1;
    arg1[8] = 0;
    *(arg1 + 0x21) = 0;
    *(arg1 + 0x22) = 2;
    *(arg1 + 0x23) = 0x12;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi_1;
        edi_1 = (edi_1 + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx = (!i);
    var_4 = 1;
    __builtin_memcpy(&arg1[9], (edi_1 - ecx), ((ecx >> 2) << 2));
    int32_t esi_2;
    int32_t edi_4;
    __builtin_memcpy(edi_4, esi_2, (ecx & 3));
    CGdiObject::Attach(arg1, CreateFontIndirectA(&arg1[2]));
    arg1[0x11] = 0;
    arg1[0x12] = 0;
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&arg_4);
    *fsbase = var_c;
    return arg1;
}

int32_t* __thiscall sub_4011d0(int32_t* arg1, int32_t arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427508;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_10 = arg1;
    int32_t* var_10_1 = arg1;
    arg1[1] = 0;
    *arg1 = 0x42a6bc;
    __builtin_memset(&arg1[2], 0, 0x3c);
    __builtin_memcpy(&arg1[2], arg2, 0x3c);
    int32_t var_4 = 0;
    CGdiObject::Attach(arg1, CreateFontIndirectA(&arg1[2]));
    int32_t ecx_1 = var_c;
    arg1[0x11] = 0;
    arg1[0x12] = 0;
    *fsbase = ecx_1;
    return arg1;
}

int32_t* __thiscall sub_401250(int32_t* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427538;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_10 = arg1;
    int32_t* var_10_1 = arg1;
    int32_t var_4 = 0;
    arg1[1] = 0;
    *arg1 = 0x42a6bc;
    __builtin_memset(&arg1[2], 0, 0x3c);
    int32_t eax_1 = (-&arg_4);
    var_4 = 1;
    CGdiObject::Attach(arg1, ((eax_1 - eax_1) & arg2));
    GetObjectA(arg1[1], 0x3c, &arg1[2]);
    arg1[0x11] = 0;
    arg1[0x12] = 0;
    arg_4 = 0x42a6d0;
    int32_t var_4_1 = 2;
    CGdiObject::DeleteObject(&arg_4);
    *fsbase = var_c;
    return arg1;
}

int32_t __fastcall sub_4012f0(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427558;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

int32_t __thiscall sub_401340(CGdiObject* arg1, int32_t arg2)
{
    int32_t ebx = *(arg1 + 8);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 8) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return ebx;
}

int32_t __thiscall sub_401370(CGdiObject* arg1, int32_t arg2)
{
    int32_t ebx = *(arg1 + 8);
    CGdiObject::DeleteObject(arg1);
    int32_t eax = arg2;
    if (eax > 0)
    {
        eax = (-eax);
    }
    *(arg1 + 8) = eax;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return ebx;
}

int32_t __thiscall sub_4013b0(CGdiObject* arg1, int32_t arg2)
{
    int32_t edi = *(arg1 + 0xc);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0xc) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return edi;
}

int32_t __thiscall sub_4013e0(CGdiObject* arg1, int32_t arg2)
{
    int32_t edi = *(arg1 + 0x10);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x10) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return edi;
}

int32_t __thiscall sub_401410(CGdiObject* arg1, int32_t arg2)
{
    int32_t edi = *(arg1 + 0x14);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x14) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return edi;
}

int32_t __thiscall sub_401440(CGdiObject* arg1, int32_t arg2)
{
    int32_t edi = *(arg1 + 0x18);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x18) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return edi;
}

int32_t __thiscall sub_401470(CGdiObject* arg1, char arg2)
{
    char ebx = *(arg1 + 0x1f);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x1f) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    int32_t eax_2;
    eax_2 = ebx;
    return eax_2;
}

int32_t __thiscall sub_4014a0(CGdiObject* arg1, char arg2)
{
    char ebx = *(arg1 + 0x20);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x20) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    int32_t eax_2;
    eax_2 = ebx;
    return eax_2;
}

int32_t __thiscall sub_4014d0(CGdiObject* arg1, char arg2)
{
    char ebx = *(arg1 + 0x21);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x21) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    int32_t eax_2;
    eax_2 = ebx;
    return eax_2;
}

int32_t __thiscall sub_401500(CGdiObject* arg1, char arg2)
{
    char ebx = *(arg1 + 0x22);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x22) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    int32_t eax_2;
    eax_2 = ebx;
    return eax_2;
}

int32_t __thiscall sub_401530(CGdiObject* arg1, char arg2)
{
    char ebx = *(arg1 + 0x23);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x23) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    int32_t eax_2;
    eax_2 = ebx;
    return eax_2;
}

CString* __thiscall sub_401560(CGdiObject* arg1, CString* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427597;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_10 = 0;
    int32_t var_4 = 1;
    void var_14;
    CString::CString(&var_14, (arg1 + 0x24));
    var_4 = 2;
    CGdiObject::DeleteObject(arg1);
    int32_t edi = arg_8;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx_2 = (!i);
    __builtin_memcpy((arg1 + 0x24), (edi - ecx_2), ((ecx_2 >> 2) << 2));
    int32_t esi_1;
    int32_t edi_3;
    __builtin_memcpy(edi_3, esi_1, (ecx_2 & 3));
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    CString::CString(arg2, &var_14);
    int32_t var_10_1 = 1;
    var_4 = 1;
    CString::~CString(&var_14);
    var_4 = 0;
    CString::~CString(&arg_8);
    *fsbase = var_c;
    return arg2;
}

void* __thiscall sub_401630(CGdiObject* arg1, int32_t arg2)
{
    CGdiObject::DeleteObject(arg1);
    int32_t edi = arg2;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx = (!i);
    __builtin_memcpy((arg1 + 0x24), (edi - ecx), ((ecx >> 2) << 2));
    int32_t esi_1;
    int32_t edi_3;
    __builtin_memcpy(edi_3, esi_1, (ecx & 3));
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return (arg1 + 0x24);
}

int32_t __stdcall sub_401680(int32_t arg1)
{
    CGdiObject* ecx;
    if (arg1 == 0)
    {
        int32_t ecx_2;
        ecx_2 = sub_401440(ecx, 0x190) >= 0x1f4;
        return ecx_2;
    }
    int32_t ecx_1;
    ecx_1 = sub_401440(ecx, 0x2bc) >= 0x1f4;
    return ecx_1;
}

int32_t __thiscall sub_4016c0(CGdiObject* arg1, char arg2)
{
    int32_t eax;
    eax = *(arg1 + 0x1c);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x1c) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return eax;
}

int32_t __thiscall sub_4016f0(CGdiObject* arg1, char arg2)
{
    int32_t eax;
    eax = *(arg1 + 0x1d);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x1d) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return eax;
}

int32_t __thiscall sub_401720(CGdiObject* arg1, char arg2)
{
    int32_t eax;
    eax = *(arg1 + 0x1e);
    CGdiObject::DeleteObject(arg1);
    *(arg1 + 0x1e) = arg2;
    CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
    return eax;
}

int32_t __thiscall sub_401750(CGdiObject* arg1, int32_t arg2)
{
    __builtin_memcpy((arg1 + 8), arg2, 0x3c);
    CGdiObject::DeleteObject(arg1);
    return CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
}

int32_t __fastcall sub_401790(void* arg1)
{
    return *(arg1 + 8);
}

int32_t __fastcall sub_4017a0(void* arg1)
{
    return *(arg1 + 0xc);
}

int32_t __fastcall sub_4017b0(void* arg1)
{
    return *(arg1 + 0x10);
}

int32_t __fastcall sub_4017c0(void* arg1)
{
    return *(arg1 + 0x10);
}

int32_t __fastcall sub_4017d0(void* arg1)
{
    return *(arg1 + 0x18);
}

int32_t __fastcall sub_4017e0(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x1f);
    return eax;
}

int32_t __fastcall sub_4017f0(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x20);
    return eax;
}

int32_t __fastcall sub_401800(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x21);
    return eax;
}

int32_t __fastcall sub_401810(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x22);
    return eax;
}

int32_t __fastcall sub_401820(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x23);
    return eax;
}

int32_t __fastcall sub_401830(int32_t arg1) __pure
{
    return (arg1 + 0x24);
}

int32_t __fastcall sub_401840(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x18) >= 0x1f4;
    return eax;
}

int32_t __fastcall sub_401850(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x1c);
    return eax;
}

int32_t __fastcall sub_401860(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x1d);
    return eax;
}

int32_t __fastcall sub_401870(void* arg1)
{
    int32_t eax;
    eax = *(arg1 + 0x1e);
    return eax;
}

CString* __thiscall sub_401880(void* arg1, CString* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4275d7;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_10 = 0;
    void var_18;
    CString::CString(&var_18);
    int32_t var_4 = 1;
    class CString var_14;
    CString::CString(&var_14);
    int32_t ecx_2;
    ecx_2 = *(arg1 + 0x23);
    int32_t edx;
    edx = *(arg1 + 0x22);
    void* var_20 = (arg1 + 0x24);
    int32_t var_24 = ecx_2;
    int32_t eax_2;
    eax_2 = *(arg1 + 0x21);
    int32_t var_28 = edx;
    int32_t ecx_3;
    ecx_3 = *(arg1 + 0x20);
    int32_t edx_1;
    edx_1 = *(arg1 + 0x1f);
    int32_t var_2c = eax_2;
    int32_t var_30 = ecx_3;
    int32_t var_34 = edx_1;
    int32_t eax_3;
    eax_3 = *(arg1 + 0x1e);
    int32_t ecx_4;
    ecx_4 = *(arg1 + 0x1d);
    int32_t edx_2;
    edx_2 = *(arg1 + 0x1c);
    int32_t var_38 = eax_3;
    int32_t var_3c = ecx_4;
    int32_t var_40 = edx_2;
    int32_t var_44 = *(arg1 + 0x18);
    int32_t var_48 = *(arg1 + 0x14);
    int32_t var_4c = *(arg1 + 0x10);
    int32_t var_50 = *(arg1 + 0xc);
    int32_t var_54 = *(arg1 + 8);
    var_4 = 2;
    CString::Format(&var_18, "%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i…");
    int32_t var_60 = *(arg1 + 0x44);
    CString::Format(&var_14, &data_431044);
    CString::operator+=(&var_18, &data_431040);
    CString::operator+=(&var_18, &var_14);
    CString::CString(arg2, &var_18);
    int32_t var_10_1 = 1;
    var_4 = 1;
    CString::~CString(&var_14);
    var_4 = 0;
    CString::~CString(&var_18);
    *fsbase = var_c;
    return arg2;
}

int32_t __stdcall sub_4019a0(int32_t* arg1)
{
    int32_t* ebp = arg1;
    void* var_14 = &data_431040;
    int32_t* var_18 = ebp;
    int32_t* var_1c = &arg1;
    CString* eax;
    void* ebx_1;
    eax = sub_401c10();
    *(ebx_1 + 8) = atol(*eax);
    CString::~CString(&arg1);
    void* var_14_1 = &data_431040;
    int32_t* var_18_1 = ebp;
    int32_t* var_1c_2 = &arg1;
    CString* eax_3;
    void* ebx_2;
    eax_3 = sub_401c10();
    *(ebx_2 + 0xc) = atol(*eax_3);
    CString::~CString(&arg1);
    void* var_14_2 = &data_431040;
    int32_t* var_18_2 = ebp;
    int32_t* var_1c_4 = &arg1;
    CString* eax_6;
    void* ebx_3;
    eax_6 = sub_401c10();
    *(ebx_3 + 0x10) = atol(*eax_6);
    CString::~CString(&arg1);
    void* var_14_3 = &data_431040;
    int32_t* var_18_3 = ebp;
    int32_t* var_1c_6 = &arg1;
    CString* eax_9;
    void* ebx_4;
    eax_9 = sub_401c10();
    *(ebx_4 + 0x14) = atol(*eax_9);
    CString::~CString(&arg1);
    void* var_14_4 = &data_431040;
    int32_t* var_18_4 = ebp;
    int32_t* var_1c_8 = &arg1;
    CString* eax_12;
    void* ebx_5;
    eax_12 = sub_401c10();
    *(ebx_5 + 0x18) = atol(*eax_12);
    CString::~CString(&arg1);
    void* var_14_5 = &data_431040;
    int32_t* var_18_5 = ebp;
    int32_t* var_1c_10 = &arg1;
    CString* eax_15;
    void* ebx_6;
    eax_15 = sub_401c10();
    *(ebx_6 + 0x1c) = atoi(*eax_15);
    CString::~CString(&arg1);
    void* var_14_6 = &data_431040;
    int32_t* var_18_6 = ebp;
    int32_t* var_1c_12 = &arg1;
    CString* eax_18;
    void* ebx_7;
    eax_18 = sub_401c10();
    *(ebx_7 + 0x1d) = atoi(*eax_18);
    CString::~CString(&arg1);
    void* var_14_7 = &data_431040;
    int32_t* var_18_7 = ebp;
    int32_t* var_1c_14 = &arg1;
    CString* eax_21;
    void* ebx_8;
    eax_21 = sub_401c10();
    *(ebx_8 + 0x1e) = atoi(*eax_21);
    CString::~CString(&arg1);
    void* var_14_8 = &data_431040;
    int32_t* var_18_8 = ebp;
    int32_t* var_1c_16 = &arg1;
    CString* eax_24;
    void* ebx_9;
    eax_24 = sub_401c10();
    *(ebx_9 + 0x1f) = atoi(*eax_24);
    CString::~CString(&arg1);
    void* var_14_9 = &data_431040;
    int32_t* var_18_9 = ebp;
    int32_t* var_1c_18 = &arg1;
    CString* eax_27;
    void* ebx_10;
    eax_27 = sub_401c10();
    *(ebx_10 + 0x20) = atoi(*eax_27);
    CString::~CString(&arg1);
    void* var_14_10 = &data_431040;
    int32_t* var_18_10 = ebp;
    int32_t* var_1c_20 = &arg1;
    CString* eax_30;
    void* ebx_11;
    eax_30 = sub_401c10();
    *(ebx_11 + 0x21) = atoi(*eax_30);
    CString::~CString(&arg1);
    void* var_14_11 = &data_431040;
    int32_t* var_18_11 = ebp;
    int32_t* var_1c_22 = &arg1;
    CString* eax_33;
    void* ebx_12;
    eax_33 = sub_401c10();
    *(ebx_12 + 0x22) = atoi(*eax_33);
    CString::~CString(&arg1);
    void* var_14_12 = &data_431040;
    int32_t* var_18_12 = ebp;
    int32_t* var_1c_24 = &arg1;
    CString* eax_36;
    void* ebx_13;
    eax_36 = sub_401c10();
    *(ebx_13 + 0x23) = atoi(*eax_36);
    CString::~CString(&arg1);
    void* var_14_13 = &data_431040;
    int32_t* var_18_13 = ebp;
    int32_t* var_1c_26 = &arg1;
    CString* eax_39;
    CGdiObject* ebx_14;
    eax_39 = sub_401c10();
    int32_t edi = *eax_39;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx_27 = (!i);
    __builtin_memcpy((ebx_14 + 0x24), (edi - ecx_27), ((ecx_27 >> 2) << 2));
    int32_t esi_1;
    int32_t edi_3;
    __builtin_memcpy(edi_3, esi_1, (ecx_27 & 3));
    int32_t __saved_ebx;
    CString::~CString(&__saved_ebx);
    CGdiObject::DeleteObject(ebx_14);
    CGdiObject::Attach(ebx_14, CreateFontIndirectA((ebx_14 + 8)));
    int32_t eax_43 = atol(*ebp);
    *(ebx_14 + 0x44) = eax_43;
    return eax_43;
}

CString* sub_401c10()
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_42761f;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_18 = 0;
    int32_t esi;
    int32_t var_1c = esi;
    int32_t edi;
    int32_t var_20 = edi;
    int32_t var_10 = 0;
    int32_t var_14;
    CString::CString(&var_14);
    CString* esi_1 = arg_8;
    CString* var_4 = 1;
    int32_t eax_2 = CString::Find(esi_1, arg_c);
    int32_t var_24_1 = eax_2;
    var_8 = 2;
    CString::operator=(&var_18, CString::Left(esi_1, &arg_c));
    var_8 = 1;
    CString::~CString(&arg_8);
    int32_t var_28_2 = (eax_2 + 1);
    class CString* eax_4 = CString::Mid(esi_1, &arg_8);
    var_c = 3;
    CString::operator=(esi_1, eax_4);
    var_c = 1;
    CString::~CString(&arg_4);
    CString::CString(var_4, &var_1c);
    var_18 = 1;
    var_c = 0;
    CString::~CString(&var_1c);
    *fsbase = var_14;
    return var_4;
}

int32_t __thiscall sub_401ce0(CGdiObject* arg1, void* arg2, class CDC* arg3, class CWnd* arg4)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_42763b;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void pv;
    if (arg2 != 0)
    {
        GetObjectA(*(arg2 + 4), 0x3c, &pv);
    }
    else
    {
        __builtin_memcpy(&pv, (arg1 + 8), 0x3c);
    }
    CFontDialog var_124;
    CFontDialog::CFontDialog(&var_124, &pv, 0x101, arg3, arg4);
    uint32_t eax_2 = *(arg1 + 0x44);
    int32_t var_4_1 = 0;
    if (CFontDialog::DoModal(&var_124) == 1)
    {
        CFontDialog::GetCurrentFont(&var_124, (arg1 + 8));
        CGdiObject::DeleteObject(arg1);
        CGdiObject::Attach(arg1, CreateFontIndirectA((arg1 + 8)));
        sub_401de0(arg1, eax_2);
    }
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_5 = CDialog::~CDialog(&var_124);
    *fsbase = var_c;
    return eax_5;
}

void __thiscall sub_401dd0(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

uint32_t __thiscall sub_401de0(void* arg1, uint32_t arg2)
{
    uint32_t color = arg2;
    *(arg1 + 0x44) = color;
    HDC hdc = *(arg1 + 0x48);
    if (hdc != 0)
    {
        color = SetTextColor(hdc, color);
    }
    return color;
}

int32_t __fastcall sub_401e00(void* arg1)
{
    return *(arg1 + 0x44);
}

int32_t __thiscall sub_401e10(void* arg1, int32_t arg2)
{
    *(arg1 + 0x48) = arg2;
    return arg2;
}

int32_t* __thiscall sub_401e20(int32_t* arg1, char arg2)
{
    *arg1 = 0x42a6e4;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_401e40(int32_t* arg1)
{
    *arg1 = 0x42a6e4;
}

int32_t sub_401e50() __pure
{
    return;
}

int32_t sub_401e60() __pure
{
    return;
}

int32_t sub_401e70() __pure
{
    return;
}

void* __thiscall sub_401e80(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_401ea0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t __fastcall sub_401ea0(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427658;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

int32_t __fastcall sub_401ef0(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427678;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

void*** __thiscall sub_401f40(CDialog* arg1, class CWnd* arg2)
{
    void*** esi = arg1;
    CDialog::CDialog(arg1, 0x83, arg2);
    *esi = &data_42a7d8;
    __builtin_memset(&esi[0x18], 0, 0x108);
    return esi;
}

CDialog* __thiscall sub_4020e0(CDialog* arg1, char arg2)
{
    sub_402100(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void __thiscall sub_402100(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

int32_t __thiscall sub_402110(void* arg1, class CDataExchange* arg2)
{
    DDX_Text(arg2, 0x467, (arg1 + 0x60));
    DDX_Text(arg2, 0x491, (arg1 + 0x64));
    DDX_Text(arg2, 0x492, (arg1 + 0x68));
    DDX_Text(arg2, 0x493, (arg1 + 0x6c));
    DDX_Text(arg2, 0x494, (arg1 + 0x70));
    DDX_Text(arg2, 0x495, (arg1 + 0x74));
    DDX_Text(arg2, 0x496, (arg1 + 0x78));
    DDX_Text(arg2, 0x497, (arg1 + 0x7c));
    DDX_Text(arg2, 0x498, (arg1 + 0x80));
    DDX_Text(arg2, 0x49a, (arg1 + 0x84));
    DDX_Text(arg2, 0x499, (arg1 + 0x88));
    DDX_Text(arg2, 0x489, (arg1 + 0x8c));
    DDX_Text(arg2, 0x49b, (arg1 + 0x90));
    DDX_Text(arg2, 0x49c, (arg1 + 0x94));
    DDX_Text(arg2, 0x49d, (arg1 + 0x98));
    DDX_Text(arg2, 0x49e, (arg1 + 0x9c));
    DDX_Text(arg2, 0x49f, (arg1 + 0xa0));
    DDX_Text(arg2, 0x4a0, (arg1 + 0xa4));
    DDX_Text(arg2, 0x4a1, (arg1 + 0xa8));
    DDX_Text(arg2, 0x4a2, (arg1 + 0xac));
    DDX_Text(arg2, 0x4a3, (arg1 + 0xb0));
    DDX_Text(arg2, 0x4a4, (arg1 + 0xb4));
    DDX_Text(arg2, 0x48a, (arg1 + 0xb8));
    DDX_Text(arg2, 0x4a5, (arg1 + 0xbc));
    DDX_Text(arg2, 0x4a6, (arg1 + 0xc0));
    DDX_Text(arg2, 0x4a7, (arg1 + 0xc4));
    DDX_Text(arg2, 0x48b, (arg1 + 0xc8));
    DDX_Text(arg2, 0x48c, (arg1 + 0xcc));
    DDX_Text(arg2, 0x48d, (arg1 + 0xd0));
    DDX_Text(arg2, 0x48e, (arg1 + 0xd4));
    DDX_Text(arg2, 0x48f, (arg1 + 0xd8));
    DDX_Text(arg2, 0x490, (arg1 + 0xdc));
    DDX_Text(arg2, 0x463, (arg1 + 0xe0));
    DDX_Text(arg2, 0x465, (arg1 + 0xe4));
    DDX_Text(arg2, 0x4b9, (arg1 + 0xe8));
    DDX_Text(arg2, 0x4c2, (arg1 + 0xec));
    DDX_Text(arg2, 0x4c3, (arg1 + 0xf0));
    DDX_Text(arg2, 0x4c4, (arg1 + 0xf4));
    DDX_Text(arg2, 0x4c5, (arg1 + 0xf8));
    DDX_Text(arg2, 0x4c6, (arg1 + 0xfc));
    DDX_Text(arg2, 0x4c7, (arg1 + 0x100));
    DDX_Text(arg2, 0x4c8, (arg1 + 0x104));
    DDX_Text(arg2, 0x4c9, (arg1 + 0x108));
    DDX_Text(arg2, 0x4ca, (arg1 + 0x10c));
    DDX_Text(arg2, 0x4cb, (arg1 + 0x110));
    DDX_Text(arg2, 0x4ba, (arg1 + 0x114));
    DDX_Text(arg2, 0x4cc, (arg1 + 0x118));
    DDX_Text(arg2, 0x4cd, (arg1 + 0x11c));
    DDX_Text(arg2, 0x4ce, (arg1 + 0x120));
    DDX_Text(arg2, 0x4cf, (arg1 + 0x124));
    DDX_Text(arg2, 0x4d0, (arg1 + 0x128));
    DDX_Text(arg2, 0x4d1, (arg1 + 0x12c));
    DDX_Text(arg2, 0x4d2, (arg1 + 0x130));
    DDX_Text(arg2, 0x4d3, (arg1 + 0x134));
    DDX_Text(arg2, 0x4d4, (arg1 + 0x138));
    DDX_Text(arg2, 0x4d5, (arg1 + 0x13c));
    DDX_Text(arg2, 0x4bb, (arg1 + 0x140));
    DDX_Text(arg2, 0x4d6, (arg1 + 0x144));
    DDX_Text(arg2, 0x4d7, (arg1 + 0x148));
    DDX_Text(arg2, 0x4d8, (arg1 + 0x14c));
    DDX_Text(arg2, 0x4bc, (arg1 + 0x150));
    DDX_Text(arg2, 0x4bd, (arg1 + 0x154));
    DDX_Text(arg2, 0x4be, (arg1 + 0x158));
    DDX_Text(arg2, 0x4bf, (arg1 + 0x15c));
    DDX_Text(arg2, 0x4c0, (arg1 + 0x160));
    return DDX_Text(arg2, 0x4c1, (arg1 + 0x164));
}

int32_t sub_4025b0() __pure
{
    return CDialog::messageMap;
}

int32_t sub_4025c0() __pure
{
    return 0x42a6f8;
}

int32_t __stdcall sub_4025d0(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __thiscall sub_402600(CWnd* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427698;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_34;
    CString::CString(&var_34);
    int32_t ebx;
    ebx = 0;
    int32_t var_4 = 0;
    int32_t var_2c;
    __builtin_memcpy(&var_2c, "\xa8\x04\x00\x00\xaa\x04\x00\x00\xac\x04\x00\x00\xae\x04\x00\x00\xb0\x04\x00\x00\xb2\x04\x00\x00\xb4\x04\x00\x00\xb6\x04\x00\x00", 0x20);
    char var_30 = 0;
    if (*(arg2 + 0x50) > 0)
    {
        do
        {
            uint32_t esi_2 = var_30;
            int32_t eax_2;
            eax_2 = *(arg2 + (esi_2 << 1));
            int32_t var_48_1 = eax_2;
            CString::Format(&var_34, "%dmV");
            CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, (esi_2 + 0x469)), var_34);
            ebx = (ebx + 1);
            var_30 = ebx;
        } while (ebx < *(arg2 + 0x50));
    }
    if ((*(arg2 + 0x50) <= 0 || (*(arg2 + 0x50) > 0 && ebx < 0x20)))
    {
        uint32_t eax_6 = var_30;
        int32_t i_3 = (0x20 - eax_6);
        ebx = (eax_6 + 0x469);
        int32_t i;
        do
        {
            CString::operator=(&var_34, &data_435ef0);
            CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, ebx), var_34);
            ebx = (ebx + 1);
            i = i_3;
            i_3 = (i_3 - 1);
        } while (i != 1);
    }
    ebx = 0;
    char var_30_1 = 0;
    if (*(arg2 + 0x51) > 0)
    {
        do
        {
            uint32_t esi_5 = var_30_1;
            int32_t ecx_6;
            ecx_6 = *((arg2 + (esi_5 << 1)) + 0x40);
            int32_t var_4c_1;
            var_4c_1 = ((ecx_6 - 2731f) * 0.100000001f);
            CString::Format(&var_34, "%0.1fC");
            CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, &var_2c[esi_5]), var_34);
            ebx = (ebx + 1);
            var_30_1 = ebx;
        } while (ebx < *(arg2 + 0x51));
    }
    if ((*(arg2 + 0x51) <= 0 || (*(arg2 + 0x51) > 0 && ebx < 8)))
    {
        uint32_t eax_13 = var_30_1;
        int32_t i_2 = (8 - eax_13);
        int32_t __saved_edi;
        void* esi_6 = &&__saved_edi[(eax_13 + 6)];
        int32_t i_1;
        do
        {
            CString::operator=(&var_34, &data_435ef0);
            CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, *esi_6), var_34);
            esi_6 = (esi_6 + 4);
            i_1 = i_2;
            i_2 = (i_2 - 1);
        } while (i_1 != 1);
    }
    int32_t edi_1 = *(arg2 + 0x58);
    int32_t eax_16 = ((edi_1 * 5) - 0x50000);
    if ((edi_1 & 0x8000) == 0)
    {
        eax_16 = (edi_1 * 5);
    }
    int32_t var_48_6 = (eax_16 << 1);
    CString::Format(&var_34, &data_431074);
    CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, 0x3fb), var_34);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_19 = CString::~CString(&var_34);
    *fsbase = var_c;
    return eax_19;
}

long __fastcall sub_402830(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_402870(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4276d0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_54 = 0;
    int32_t ebp;
    int32_t var_58 = ebp;
    int32_t esi;
    int32_t var_5c = esi;
    int32_t edi;
    int32_t var_60 = edi;
    void var_50;
    CString::CString(&var_50);
    int32_t var_4 = 0;
    void var_4c;
    CString::CString(&var_4c);
    int32_t var_64 = 1;
    var_4 = 1;
    int32_t var_48 = 0;
    int32_t var_44 = 0;
    int32_t var_2c;
    __builtin_memcpy(&var_2c, "\xa9\x04\x00\x00\xab\x04\x00\x00\xad\x04\x00\x00\xaf\x04\x00\x00\xb1\x04\x00\x00\xb3\x04\x00\x00\xb5\x04\x00\x00\xb7\x04\x00\x00", 0x20);
    CWnd::UpdateData(arg1, 1);
    int32_t* esp_1 = &var_60;
    int32_t* var_3c = &var_2c;
    void* var_40 = (arg1 + 0x168);
    int32_t var_38 = 8;
    int32_t i;
    do
    {
        int32_t* edx_1 = esp_1[9];
        *(esp_1 - 4) = &esp_1[5];
        int32_t edi_1 = *edx_1;
        esp_1[6] = 0;
        *(esp_1 - 8) = edi_1;
        esp_1[7] = 0;
        CWnd::GetWindowTextA(CWnd::GetDlgItem(arg1));
        *(esp_1 - 4) = 0x2e;
        int32_t eax_3 = CString::Find(&esp_1[5]);
        void* edx_3;
        void* esp_23;
        if (eax_3 == 0xffffffff)
        {
            *(esp_1 - 4) = &esp_1[4];
            *(esp_1 - 8) = edi_1;
            CWnd::GetWindowTextA(CWnd::GetDlgItem(arg1));
            esp_23 = esp_1;
            edx_3 = (esp_23 + 0x18);
        }
        else
        {
            *(esp_1 - 4) = eax_3;
            *(esp_1 - 8) = &esp_1[0xb];
            *(esp_1 - 8) = CString::Left(&esp_1[5]);
            esp_1[0x16] = 2;
            CString::operator=(&esp_1[3]);
            esp_1[0x16] = 1;
            CString::~CString(&esp_1[0xa]);
            int32_t eax_5 = esp_1[3];
            *(esp_1 - 8) = &esp_1[5];
            *(esp_1 - 0xc) = &data_431074;
            *(esp_1 - 0x10) = eax_5;
            sscanf();
            *(esp_1 - 4) = 1;
            *(esp_1 - 8) = (eax_3 + 1);
            *(esp_1 - 0xc) = &esp_1[0xc];
            *(esp_1 - 8) = CString::Mid(&esp_1[5]);
            esp_1[0x16] = 3;
            CString::operator=(&esp_1[3]);
            esp_23 = (esp_1 - 4);
            *(esp_23 + 0x5c) = 1;
            CString::~CString((esp_23 + 0x30));
            edx_3 = (esp_23 + 0x1c);
        }
        int32_t eax_8 = *(esp_23 + 0x10);
        *(esp_23 - 4) = edx_3;
        *(esp_23 - 8) = &data_431074;
        *(esp_23 - 0xc) = eax_8;
        sscanf();
        int32_t eax_9 = *(esp_23 + 0x1c);
        esp_1 = (esp_23 + 4);
        if (eax_9 >= 0)
        {
            *esp_1[8] = (esp_1[7] + (eax_9 * 0xa));
        }
        else
        {
            *esp_1[8] = ((eax_9 * 0xa) - esp_1[7]);
        }
        int32_t ecx_23 = (esp_1[8] + 4);
        i = esp_1[0xa];
        esp_1[9] = (esp_1[9] + 4);
        esp_1[8] = ecx_23;
        esp_1[0xa] = (i - 1);
    } while (i != 1);
    int32_t ecx_24 = *(arg1 + 0x20);
    *(esp_1 - 4) = 0;
    *(esp_1 - 8) = 0x14;
    *(esp_1 - 0xc) = 1;
    *(esp_1 - 0x10) = ecx_24;
    *(arg1 + 0x188) = 0;
    SetTimer();
    *(arg1 + 0x18c) = GetTickCount();
    esp_1[0x17] = 0;
    CString::~CString(&esp_1[5]);
    esp_1[0x17] = 0xffffffff;
    int32_t eax_15 = CString::~CString(&esp_1[4]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    esp_1[3];
    *fsbase = esp_1[0x15];
    return eax_15;
}

uint32_t __fastcall sub_402aa0(void* arg1)
{
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x188) = 0x29;
    SetTimer(hWnd, 1, 0x14, nullptr);
    uint32_t eax = GetTickCount();
    *(arg1 + 0x18c) = eax;
    return eax;
}

int32_t __fastcall sub_402ad0(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4276e8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* _Buffer;
    CString::CString(&_Buffer);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    if (*(arg1 + 0xe0) >= 0x64)
    {
        CWnd::GetWindowTextA(CWnd::GetDlgItem(arg1, 0x3fb), &_Buffer);
        int32_t var_10;
        sscanf(_Buffer, &data_431074, &var_10);
        if (var_10 >= 0)
        {
            HWND hWnd = *(arg1 + 0x20);
            *(arg1 + 0x188) = 0x2a;
            SetTimer(hWnd, 1, 0x14, nullptr);
            *(arg1 + 0x18c) = GetTickCount();
        }
        else
        {
            int32_t eax_3;
            eax_3 = data_435fd4;
            if (eax_3 == 0)
            {
                CWnd::MessageBoxA(arg1, &data_4310ec, &data_43116c, 0x10);
            }
            if (data_435fd4 == 1)
            {
                CWnd::MessageBoxA(arg1, &data_4310cc, &data_431150, 0x10);
            }
            if (data_435fd4 == 2)
            {
                CWnd::MessageBoxA(arg1, "The charging current cannot be c…", "ERROR", 0x10);
            }
        }
    }
    else
    {
        if (data_435fd4 == 0)
        {
            CWnd::MessageBoxA(arg1, &data_431158, &data_43116c, 0x10);
        }
        if (data_435fd4 == 1)
        {
            CWnd::MessageBoxA(arg1, &data_43113c, &data_431150, 0x10);
        }
        if (data_435fd4 == 2)
        {
            CWnd::MessageBoxA(arg1, "0 current calibration must not b…", "ERROR", 0x10);
        }
    }
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_5 = CString::~CString(&_Buffer);
    *fsbase = var_c;
    return eax_5;
}

int32_t __fastcall sub_402c40(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427708;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* _Buffer;
    CString::CString(&_Buffer);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    if (*(arg1 + 0xe4) != 0)
    {
        CWnd::GetWindowTextA(CWnd::GetDlgItem(arg1, 0x3fb), &_Buffer);
        int32_t var_10;
        sscanf(_Buffer, &data_431074, &var_10);
        if (var_10 <= 0x64)
        {
            HWND hWnd = *(arg1 + 0x20);
            *(arg1 + 0x188) = 0x2b;
            SetTimer(hWnd, 1, 0x14, nullptr);
            *(arg1 + 0x18c) = GetTickCount();
        }
        else
        {
            int32_t eax_3;
            eax_3 = data_435fd4;
            if (eax_3 == 0)
            {
                CWnd::MessageBoxA(arg1, &data_4311d0, &data_43116c, 0x10);
            }
            if (data_435fd4 == 1)
            {
                CWnd::MessageBoxA(arg1, &data_4311b0, &data_431150, 0x10);
            }
            if (data_435fd4 == 2)
            {
                CWnd::MessageBoxA(arg1, "The discharge current cannot be …", "ERROR", 0x10);
            }
        }
    }
    else
    {
        int32_t eax_1;
        eax_1 = data_435fd4;
        if (eax_1 == 0)
        {
            CWnd::MessageBoxA(arg1, &data_431158, &data_43116c, 0x10);
        }
        if (data_435fd4 == 1)
        {
            CWnd::MessageBoxA(arg1, &data_43113c, &data_431150, 0x10);
        }
        if (data_435fd4 == 2)
        {
            CWnd::MessageBoxA(arg1, "0 current calibration must not b…", "ERROR", 0x10);
        }
    }
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_5 = CString::~CString(&_Buffer);
    *fsbase = var_c;
    return eax_5;
}

int32_t __thiscall sub_402dc0(CWnd* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_42772b;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const ebx = nullptr;
    int32_t ebp = 0;
    void* const var_9c = nullptr;
    int32_t var_a0 = 0;
    char* var_98;
    CString::CString(&var_98);
    int32_t var_4 = 0;
    int32_t var_2c;
    __builtin_memcpy(&var_2c, "\xa9\x04\x00\x00\xab\x04\x00\x00\xad\x04\x00\x00\xaf\x04\x00\x00\xb1\x04\x00\x00\xb3\x04\x00\x00\xb5\x04\x00\x00\xb7\x04\x00\x00", 0x20);
    char* var_bc_2;
    void* var_b8_5;
    uint32_t var_b4_40;
    int32_t eax_2;
    if (arg2 == 1)
    {
        eax_2 = sub_404a90();
        if (eax_2 == 0)
        {
            if ((GetTickCount() - *(arg1 + 0x18c)) <= 0x1388)
            {
                goto label_40444a;
            }
            KillTimer(*(arg1 + 0x20), 1);
            if (data_435fd4 == 0)
            {
                CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
            }
            if (data_435fd4 == 1)
            {
            label_404055:
                CWnd::MessageBoxA(arg1, &data_4312a0, "Error", 0x10);
            }
        }
        else
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 1);
            HANDLE eax_4;
            int32_t edi_1;
            eax_4 = sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0);
            if (eax_4 != 0)
            {
                int32_t eax_5 = data_4360f8;
                char var_b4_1;
                if (eax_5 == 0)
                {
                    var_b4_1 = 0x4e;
                }
                if (eax_5 == 1)
                {
                    var_b4_1 = 0x4f;
                }
                if (eax_5 == 2)
                {
                    var_b4_1 = 0x45;
                }
                if (((eax_5 == 0 || eax_5 == 1) || eax_5 == 2))
                {
                    sub_416890(&data_4360b0, var_b4_1);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0, 0x5678) != 0)
                {
                    Sleep(0x32);
                    int32_t var_30;
                    if (sub_41ef70(&data_4360b0, 0x2e, &var_30) != 0)
                    {
                        int32_t eax_8 = *(arg1 + 0x188);
                        if (eax_8 <= 0x2b)
                        {
                            if (eax_8 == 0)
                            {
                                edi_1 = 1;
                            }
                            if ((eax_8 == 0 || eax_8 == 1))
                            {
                                int32_t eax_9 = *(arg1 + 0x60);
                                if (eax_9 != 0)
                                {
                                    if (sub_41edb0(arg1, &data_4360b0, 0xb0, eax_9) == 0)
                                    {
                                        ebx = 1;
                                        var_9c = 1;
                                    }
                                    ebp = 1;
                                    var_a0 = 1;
                                }
                            }
                            if ((eax_8 == 2 || ((eax_8 == 0 || eax_8 == 1) && edi_1 != 0)))
                            {
                                int32_t eax_11 = *(arg1 + 0x8c);
                                if (eax_11 != 0)
                                {
                                    if (sub_41edb0(arg1, &data_4360b0, 0xb1, eax_11) == 0)
                                    {
                                        ebx = 2;
                                        var_9c = 2;
                                    }
                                    ebp = (ebp + 1);
                                    var_a0 = ebp;
                                }
                            }
                            if ((eax_8 == 3 || ((eax_8 == 2 || ((eax_8 == 0 || eax_8 == 1) && edi_1 != 0)) && edi_1 != 0)))
                            {
                                int32_t eax_13 = *(arg1 + 0xb8);
                                if (eax_13 != 0)
                                {
                                    if (sub_41edb0(arg1, &data_4360b0, 0xb2, eax_13) == 0)
                                    {
                                        ebx = 3;
                                        var_9c = 3;
                                    }
                                    ebp = (ebp + 1);
                                    var_a0 = ebp;
                                }
                                if (edi_1 != 0)
                                {
                                    goto label_402fd8;
                                }
                            }
                            switch (eax_8)
                            {
                                case 4:
                                {
                                label_402fd8:
                                    int32_t eax_15 = *(arg1 + 0xc8);
                                    if (eax_15 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb3, eax_15) == 0)
                                        {
                                            ebx = 4;
                                            var_9c = 4;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403012;
                                    }
                                    break;
                                }
                                case 5:
                                {
                                label_403012:
                                    int32_t eax_17 = *(arg1 + 0xcc);
                                    if (eax_17 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb4, eax_17) == 0)
                                        {
                                            ebx = 5;
                                            var_9c = 5;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40304c;
                                    }
                                    break;
                                }
                                case 6:
                                {
                                label_40304c:
                                    int32_t eax_19 = *(arg1 + 0xd0);
                                    if (eax_19 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb5, eax_19) == 0)
                                        {
                                            ebx = 6;
                                            var_9c = 6;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403083;
                                    }
                                    break;
                                }
                                case 7:
                                {
                                label_403083:
                                    int32_t eax_21 = *(arg1 + 0xd4);
                                    if (eax_21 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb6, eax_21) == 0)
                                        {
                                            ebx = 7;
                                            var_9c = 7;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4030bd;
                                    }
                                    break;
                                }
                                case 8:
                                {
                                label_4030bd:
                                    int32_t eax_23 = *(arg1 + 0xd8);
                                    if (eax_23 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb7, eax_23) == 0)
                                        {
                                            ebx = 8;
                                            var_9c = 8;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4030f7;
                                    }
                                    break;
                                }
                                case 9:
                                {
                                label_4030f7:
                                    int32_t eax_25 = *(arg1 + 0xdc);
                                    if (eax_25 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb8, eax_25) == 0)
                                        {
                                            ebx = 9;
                                            var_9c = 9;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40312e;
                                    }
                                    break;
                                }
                                case 0xa:
                                {
                                label_40312e:
                                    int32_t eax_27 = *(arg1 + 0x64);
                                    if (eax_27 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xb9, eax_27) == 0)
                                        {
                                            ebx = 0xa;
                                            var_9c = 0xa;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403165;
                                    }
                                    break;
                                }
                                case 0xb:
                                {
                                label_403165:
                                    int32_t eax_29 = *(arg1 + 0x68);
                                    if (eax_29 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xba, eax_29) == 0)
                                        {
                                            ebx = 0xb;
                                            var_9c = 0xb;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40319c;
                                    }
                                    break;
                                }
                                case 0xc:
                                {
                                label_40319c:
                                    int32_t eax_31 = *(arg1 + 0x6c);
                                    if (eax_31 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xbb, eax_31) == 0)
                                        {
                                            ebx = 0xc;
                                            var_9c = 0xc;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4031d0;
                                    }
                                    break;
                                }
                                case 0xd:
                                {
                                label_4031d0:
                                    int32_t eax_33 = *(arg1 + 0x70);
                                    if (eax_33 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xbc, eax_33) == 0)
                                        {
                                            ebx = 0xd;
                                            var_9c = 0xd;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403207;
                                    }
                                    break;
                                }
                                case 0xe:
                                {
                                label_403207:
                                    int32_t eax_35 = *(arg1 + 0x74);
                                    if (eax_35 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xbd, eax_35) == 0)
                                        {
                                            ebx = 0xe;
                                            var_9c = 0xe;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40323e;
                                    }
                                    break;
                                }
                                case 0xf:
                                {
                                label_40323e:
                                    int32_t eax_37 = *(arg1 + 0x78);
                                    if (eax_37 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xbe, eax_37) == 0)
                                        {
                                            ebx = 0xf;
                                            var_9c = 0xf;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403272;
                                    }
                                    break;
                                }
                                case 0x10:
                                {
                                label_403272:
                                    int32_t eax_39 = *(arg1 + 0x7c);
                                    if (eax_39 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xbf, eax_39) == 0)
                                        {
                                            ebx = 0x10;
                                            var_9c = 0x10;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4032a9;
                                    }
                                    break;
                                }
                                case 0x11:
                                {
                                label_4032a9:
                                    int32_t eax_41 = *(arg1 + 0x80);
                                    if (eax_41 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc0, eax_41) == 0)
                                        {
                                            ebx = 0x11;
                                            var_9c = 0x11;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4032e3;
                                    }
                                    break;
                                }
                                case 0x12:
                                {
                                label_4032e3:
                                    int32_t eax_43 = *(arg1 + 0x88);
                                    if (eax_43 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc1, eax_43) == 0)
                                        {
                                            ebx = 0x12;
                                            var_9c = 0x12;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40331a;
                                    }
                                    break;
                                }
                                case 0x13:
                                {
                                label_40331a:
                                    int32_t eax_45 = *(arg1 + 0x84);
                                    if (eax_45 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc2, eax_45) == 0)
                                        {
                                            ebx = 0x13;
                                            var_9c = 0x13;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403354;
                                    }
                                    break;
                                }
                                case 0x14:
                                {
                                label_403354:
                                    int32_t eax_47 = *(arg1 + 0x90);
                                    if (eax_47 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc3, eax_47) == 0)
                                        {
                                            ebx = 0x14;
                                            var_9c = 0x14;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40338e;
                                    }
                                    break;
                                }
                                case 0x15:
                                {
                                label_40338e:
                                    int32_t eax_49 = *(arg1 + 0x94);
                                    if (eax_49 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc4, eax_49) == 0)
                                        {
                                            ebx = 0x15;
                                            var_9c = 0x15;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4033c5;
                                    }
                                    break;
                                }
                                case 0x16:
                                {
                                label_4033c5:
                                    int32_t eax_51 = *(arg1 + 0x98);
                                    if (eax_51 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc5, eax_51) == 0)
                                        {
                                            ebx = 0x16;
                                            var_9c = 0x16;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4033ff;
                                    }
                                    break;
                                }
                                case 0x17:
                                {
                                label_4033ff:
                                    int32_t eax_53 = *(arg1 + 0x9c);
                                    if (eax_53 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc6, eax_53) == 0)
                                        {
                                            ebx = 0x17;
                                            var_9c = 0x17;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403439;
                                    }
                                    break;
                                }
                                case 0x18:
                                {
                                label_403439:
                                    int32_t eax_55 = *(arg1 + 0xa0);
                                    if (eax_55 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc7, eax_55) == 0)
                                        {
                                            ebx = 0x18;
                                            var_9c = 0x18;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403470;
                                    }
                                    break;
                                }
                                case 0x19:
                                {
                                label_403470:
                                    int32_t eax_57 = *(arg1 + 0xa4);
                                    if (eax_57 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc8, eax_57) == 0)
                                        {
                                            ebx = 0x19;
                                            var_9c = 0x19;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4034aa;
                                    }
                                    break;
                                }
                                case 0x1a:
                                {
                                label_4034aa:
                                    int32_t eax_59 = *(arg1 + 0xa8);
                                    if (eax_59 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xc9, eax_59) == 0)
                                        {
                                            ebx = 0x1a;
                                            var_9c = 0x1a;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4034e4;
                                    }
                                    break;
                                }
                                case 0x1b:
                                {
                                label_4034e4:
                                    int32_t eax_61 = *(arg1 + 0xac);
                                    if (eax_61 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xca, eax_61) == 0)
                                        {
                                            ebx = 0x1b;
                                            var_9c = 0x1b;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40351b;
                                    }
                                    break;
                                }
                                case 0x1c:
                                {
                                label_40351b:
                                    int32_t eax_63 = *(arg1 + 0xb0);
                                    if (eax_63 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xcb, eax_63) == 0)
                                        {
                                            ebx = 0x1c;
                                            var_9c = 0x1c;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403555;
                                    }
                                    break;
                                }
                                case 0x1d:
                                {
                                label_403555:
                                    int32_t eax_65 = *(arg1 + 0xb4);
                                    if (eax_65 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xcc, eax_65) == 0)
                                        {
                                            ebx = 0x1d;
                                            var_9c = 0x1d;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_40358f;
                                    }
                                    break;
                                }
                                case 0x1e:
                                {
                                label_40358f:
                                    int32_t eax_67 = *(arg1 + 0xbc);
                                    if (eax_67 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xcd, eax_67) == 0)
                                        {
                                            ebx = 0x1e;
                                            var_9c = 0x1e;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_4035c6;
                                    }
                                    break;
                                }
                                case 0x1f:
                                {
                                label_4035c6:
                                    int32_t eax_69 = *(arg1 + 0xc0);
                                    if (eax_69 != 0)
                                    {
                                        if (sub_41edb0(arg1, &data_4360b0, 0xce, eax_69) == 0)
                                        {
                                            ebx = 0x1f;
                                            var_9c = 0x1f;
                                        }
                                        ebp = (ebp + 1);
                                        var_a0 = ebp;
                                    }
                                    if (edi_1 != 0)
                                    {
                                        goto label_403600;
                                    }
                                    break;
                                }
                                case 0x20:
                                {
                                label_403600:
                                    int32_t eax_71 = *(arg1 + 0xc4);
                                    if (eax_71 == 0)
                                    {
                                        goto label_40363a;
                                    }
                                    if (sub_41edb0(arg1, &data_4360b0, 0xcf, eax_71) == 0)
                                    {
                                        ebx = 0x20;
                                        var_9c = 0x20;
                                    }
                                    ebp = (ebp + 1);
                                    var_a0 = ebp;
                                    if (edi_1 != 0)
                                    {
                                        goto label_40363a;
                                    }
                                    break;
                                }
                                case 0x21:
                                case 0x22:
                                case 0x23:
                                case 0x24:
                                case 0x25:
                                case 0x26:
                                case 0x27:
                                case 0x28:
                                {
                                label_40363a:
                                    var_30 = 0xff;
                                    int32_t i = 0;
                                    int32_t* ebp_1 = &var_2c;
                                    void* edi_2 = (arg1 + 0x168);
                                    do
                                    {
                                        if ((var_30 & (1 << i)) != 0)
                                        {
                                            CWnd::GetWindowTextA(CWnd::GetDlgItem(arg1, *ebp_1), &var_98);
                                            if (*(var_98 - 8) != 0)
                                            {
                                                int32_t eax_76;
                                                eax_76 = i;
                                                eax_76 = (eax_76 - 0x30);
                                                if (sub_41edb0(arg1, &data_4360b0, eax_76, (*edi_2 + 0xaab)) == 0)
                                                {
                                                    var_9c = 0x28;
                                                }
                                                var_a0 = (var_a0 + 1);
                                            }
                                            ebp_1 = &ebp_1[1];
                                            edi_2 = (edi_2 + 4);
                                        }
                                        i = (i + 1);
                                    } while (i < 8);
                                    ebp = var_a0;
                                    ebx = var_9c;
                                    break;
                                }
                                case 0x29:
                                {
                                    if (sub_41edb0(arg1, &data_4360b0, 0xad, 0) == 0)
                                    {
                                        ebx = 0x29;
                                    }
                                    break;
                                }
                                case 0x2a:
                                {
                                    int32_t eax_79;
                                    int32_t edx_5;
                                    edx_5 = HIGHD((0xcccccccd * *(arg1 + 0xe0)));
                                    eax_79 = LOWD((0xcccccccd * *(arg1 + 0xe0)));
                                    if (sub_41edb0(arg1, &data_4360b0, 0xae, (edx_5 >> 3)) == 0)
                                    {
                                        ebx = 0x2a;
                                    }
                                    break;
                                }
                                case 0x2b:
                                {
                                    int32_t eax_81;
                                    int32_t edx_7;
                                    edx_7 = HIGHD((0xcccccccd * *(arg1 + 0xe4)));
                                    eax_81 = LOWD((0xcccccccd * *(arg1 + 0xe4)));
                                    if (sub_41edb0(arg1, &data_4360b0, 0xaf, (edx_7 >> 3)) == 0)
                                    {
                                        ebx = 0x2b;
                                    }
                                    break;
                                }
                            }
                            if (((eax_8 == 0x29 || eax_8 == 0x2a) || eax_8 == 0x2b))
                            {
                                ebp = 1;
                            }
                        }
                        if (sub_41edb0(arg1, &data_4360b0, 1, 0x2828) == 0)
                        {
                            ebx = 0xff;
                        }
                        Sleep(0x3e8);
                    }
                    sub_416a40(&data_4360b0);
                    sub_404a80();
                    void* var_b4_39;
                    if (ebx > 0x29)
                    {
                        if (ebx == 0x2a)
                        {
                            void* eax_86;
                            eax_86 = data_435fd4;
                            if (eax_86 == 0)
                            {
                                CString::operator=(&var_98, &data_431360);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_98, &data_43134c);
                            }
                            if (data_435fd4 == 2)
                            {
                                var_b4_39 = "Calibration charging current fai…";
                                goto label_403995;
                            }
                        }
                        else if (ebx == 0x2b)
                        {
                            void* eax_87;
                            eax_87 = data_435fd4;
                            if (eax_87 == 0)
                            {
                                CString::operator=(&var_98, &data_4313b0);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_98, &data_43139c);
                            }
                            if (data_435fd4 == 2)
                            {
                                var_b4_39 = "Calibration discharging current …";
                                goto label_403995;
                            }
                        }
                        else if (ebx == 0xff)
                        {
                            var_b4_39 = "Unkown error occured!";
                        label_403995:
                            CString::operator=(&var_98, var_b4_39);
                        }
                    }
                    else if (ebx == 0x29)
                    {
                        if (data_435fd4 == 0)
                        {
                            CString::operator=(&var_98, &data_431410);
                        }
                        if (data_435fd4 == 1)
                        {
                            CString::operator=(&var_98, &data_4313fc);
                        }
                        if (data_435fd4 == 2)
                        {
                            var_b4_39 = "Calibration idle current failed";
                            goto label_403995;
                        }
                    }
                    else if (ebx <= 0x28)
                    {
                        int32_t ecx_8;
                        ecx_8 = *(ebx + 0x40453c);
                        if (ecx_8 == 0)
                        {
                            char eax_84 = data_435fd4;
                            if (ebp == 0)
                            {
                                if (eax_84 == 0)
                                {
                                    CString::operator=(&var_98, &data_4314dc);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_98, &data_4314c0);
                                }
                                if (data_435fd4 == 2)
                                {
                                    var_b4_39 = "All values are 0, calibration is…";
                                    goto label_403995;
                                }
                            }
                            else
                            {
                                if (eax_84 == 0)
                                {
                                    CString::operator=(&var_98, &data_43151c);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_98, &data_431510);
                                }
                                if (data_435fd4 == 2)
                                {
                                    var_b4_39 = "Calibration successful!";
                                    goto label_403995;
                                }
                            }
                        }
                        if (ecx_8 == 1)
                        {
                            if (data_435fd4 == 0)
                            {
                                CString::operator=(&var_98, &data_431484);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_98, &data_431474);
                            }
                            if (data_435fd4 == 2)
                            {
                                var_b4_39 = "Calibration voltage failure!";
                                goto label_403995;
                            }
                        }
                        if (ecx_8 == 2)
                        {
                            if (data_435fd4 == 0)
                            {
                                CString::operator=(&var_98, &data_431484);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_98, &data_431444);
                            }
                            if (data_435fd4 == 2)
                            {
                                var_b4_39 = "Calibration temperature failed!";
                                goto label_403995;
                            }
                        }
                    }
                    var_b4_40 = 0x40;
                    var_b8_5 = "Prompt";
                    var_bc_2 = var_98;
                    goto label_404443;
                }
                goto label_40444a;
            }
            sub_404a80();
            eax_4 = data_435fd4;
            if (eax_4 == 0)
            {
            label_4039c7:
                CWnd::MessageBoxA(arg1, &data_431300, "Error", 0x10);
            }
        }
    }
    char var_94;
    int32_t eax_93;
    if (arg2 == 2)
    {
        eax_93 = sub_404a90();
        if (eax_93 != 0)
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 2);
            if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) != 0)
            {
                int32_t eax_97 = data_4360f8;
                char var_b4_41;
                if (eax_97 == 0)
                {
                    var_b4_41 = 0x4e;
                }
                if (eax_97 == 1)
                {
                    var_b4_41 = 0x4f;
                }
                if (eax_97 == 2)
                {
                    var_b4_41 = 0x45;
                }
                if (((eax_97 == 0 || eax_97 == 1) || eax_97 == 2))
                {
                    sub_416890(&data_4360b0, var_b4_41);
                }
                char* var_b4_43;
                if (sub_41f150(arg1, &data_4360b0, 0xf6, &var_94) == 0)
                {
                    var_b4_43 = &data_4312b8;
                }
                else
                {
                    char var_93;
                    char var_92;
                    uint32_t eax_102 = ((var_93 << 8) + var_92);
                    if (eax_102 > 0x7fff)
                    {
                        eax_102 = (eax_102 - 0x10000);
                    }
                    *(arg1 + 0xe8) = eax_102;
                    char var_91;
                    char var_90;
                    uint32_t eax_106 = ((var_91 << 8) + var_90);
                    if (eax_106 > 0x7fff)
                    {
                        eax_106 = (eax_106 - 0x10000);
                    }
                    *(arg1 + 0x114) = eax_106;
                    char var_8f;
                    char var_8e;
                    uint32_t eax_110 = ((var_8f << 8) + var_8e);
                    if (eax_110 > 0x7fff)
                    {
                        eax_110 = (eax_110 - 0x10000);
                    }
                    *(arg1 + 0x140) = eax_110;
                    char var_8d;
                    char var_8c;
                    uint32_t eax_114 = ((var_8d << 8) + var_8c);
                    if (eax_114 > 0x7fff)
                    {
                        eax_114 = (eax_114 - 0x10000);
                    }
                    *(arg1 + 0x150) = eax_114;
                    char var_8b;
                    char var_8a;
                    uint32_t eax_118 = ((var_8b << 8) + var_8a);
                    if (eax_118 > 0x7fff)
                    {
                        eax_118 = (eax_118 - 0x10000);
                    }
                    *(arg1 + 0x154) = eax_118;
                    char var_89;
                    char var_88;
                    uint32_t eax_122 = ((var_89 << 8) + var_88);
                    if (eax_122 > 0x7fff)
                    {
                        eax_122 = (eax_122 - 0x10000);
                    }
                    *(arg1 + 0x158) = eax_122;
                    char var_87;
                    char var_86;
                    uint32_t eax_126 = ((var_87 << 8) + var_86);
                    if (eax_126 > 0x7fff)
                    {
                        eax_126 = (eax_126 - 0x10000);
                    }
                    *(arg1 + 0x15c) = eax_126;
                    char var_85;
                    char var_84;
                    uint32_t eax_130 = ((var_85 << 8) + var_84);
                    if (eax_130 > 0x7fff)
                    {
                        eax_130 = (eax_130 - 0x10000);
                    }
                    *(arg1 + 0x160) = eax_130;
                    char var_83;
                    char var_82;
                    uint32_t eax_134 = ((var_83 << 8) + var_82);
                    if (eax_134 > 0x7fff)
                    {
                        eax_134 = (eax_134 - 0x10000);
                    }
                    *(arg1 + 0x164) = eax_134;
                    char var_81;
                    char var_80;
                    uint32_t eax_138 = ((var_81 << 8) + var_80);
                    if (eax_138 > 0x7fff)
                    {
                        eax_138 = (eax_138 - 0x10000);
                    }
                    *(arg1 + 0xec) = eax_138;
                    char var_7f;
                    char var_7e;
                    uint32_t eax_142 = ((var_7f << 8) + var_7e);
                    if (eax_142 > 0x7fff)
                    {
                        eax_142 = (eax_142 - 0x10000);
                    }
                    *(arg1 + 0xf0) = eax_142;
                    char var_7d;
                    char var_7c;
                    uint32_t eax_146 = ((var_7d << 8) + var_7c);
                    if (eax_146 > 0x7fff)
                    {
                        eax_146 = (eax_146 - 0x10000);
                    }
                    *(arg1 + 0xf4) = eax_146;
                    char var_7b;
                    char var_7a;
                    uint32_t eax_150 = ((var_7b << 8) + var_7a);
                    if (eax_150 > 0x7fff)
                    {
                        eax_150 = (eax_150 - 0x10000);
                    }
                    *(arg1 + 0xf8) = eax_150;
                    char var_79;
                    char var_78;
                    uint32_t eax_154 = ((var_79 << 8) + var_78);
                    if (eax_154 > 0x7fff)
                    {
                        eax_154 = (eax_154 - 0x10000);
                    }
                    *(arg1 + 0xfc) = eax_154;
                    char var_77;
                    char var_76;
                    uint32_t eax_158 = ((var_77 << 8) + var_76);
                    if (eax_158 > 0x7fff)
                    {
                        eax_158 = (eax_158 - 0x10000);
                    }
                    *(arg1 + 0x100) = eax_158;
                    char var_75;
                    char var_74;
                    uint32_t eax_162 = ((var_75 << 8) + var_74);
                    if (eax_162 > 0x7fff)
                    {
                        eax_162 = (eax_162 - 0x10000);
                    }
                    *(arg1 + 0x104) = eax_162;
                    char var_73;
                    char var_72;
                    uint32_t eax_166 = ((var_73 << 8) + var_72);
                    if (eax_166 > 0x7fff)
                    {
                        eax_166 = (eax_166 - 0x10000);
                    }
                    *(arg1 + 0x108) = eax_166;
                    char var_71;
                    char var_70;
                    uint32_t eax_170 = ((var_71 << 8) + var_70);
                    if (eax_170 > 0x7fff)
                    {
                        eax_170 = (eax_170 - 0x10000);
                    }
                    *(arg1 + 0x10c) = eax_170;
                    char var_6f;
                    char var_6e;
                    uint32_t eax_174 = ((var_6f << 8) + var_6e);
                    if (eax_174 > 0x7fff)
                    {
                        eax_174 = (eax_174 - 0x10000);
                    }
                    *(arg1 + 0x110) = eax_174;
                    char var_6d;
                    char var_6c;
                    uint32_t eax_178 = ((var_6d << 8) + var_6c);
                    if (eax_178 > 0x7fff)
                    {
                        eax_178 = (eax_178 - 0x10000);
                    }
                    *(arg1 + 0x118) = eax_178;
                    char var_6b;
                    char var_6a;
                    uint32_t eax_182 = ((var_6b << 8) + var_6a);
                    if (eax_182 > 0x7fff)
                    {
                        eax_182 = (eax_182 - 0x10000);
                    }
                    *(arg1 + 0x11c) = eax_182;
                    char var_69;
                    char var_68;
                    uint32_t eax_186 = ((var_69 << 8) + var_68);
                    if (eax_186 > 0x7fff)
                    {
                        eax_186 = (eax_186 - 0x10000);
                    }
                    *(arg1 + 0x120) = eax_186;
                    char var_67;
                    char var_66;
                    uint32_t eax_190 = ((var_67 << 8) + var_66);
                    if (eax_190 > 0x7fff)
                    {
                        eax_190 = (eax_190 - 0x10000);
                    }
                    *(arg1 + 0x124) = eax_190;
                    char var_65;
                    char var_64;
                    uint32_t eax_194 = ((var_65 << 8) + var_64);
                    if (eax_194 > 0x7fff)
                    {
                        eax_194 = (eax_194 - 0x10000);
                    }
                    *(arg1 + 0x128) = eax_194;
                    char var_63;
                    char var_62;
                    uint32_t eax_198 = ((var_63 << 8) + var_62);
                    if (eax_198 > 0x7fff)
                    {
                        eax_198 = (eax_198 - 0x10000);
                    }
                    *(arg1 + 0x12c) = eax_198;
                    char var_61;
                    char var_60;
                    uint32_t eax_202 = ((var_61 << 8) + var_60);
                    if (eax_202 > 0x7fff)
                    {
                        eax_202 = (eax_202 - 0x10000);
                    }
                    *(arg1 + 0x130) = eax_202;
                    char var_5f;
                    char var_5e;
                    uint32_t eax_206 = ((var_5f << 8) + var_5e);
                    if (eax_206 > 0x7fff)
                    {
                        eax_206 = (eax_206 - 0x10000);
                    }
                    *(arg1 + 0x134) = eax_206;
                    char var_5d;
                    char var_5c;
                    uint32_t eax_210 = ((var_5d << 8) + var_5c);
                    if (eax_210 > 0x7fff)
                    {
                        eax_210 = (eax_210 - 0x10000);
                    }
                    *(arg1 + 0x138) = eax_210;
                    char var_5b;
                    char var_5a;
                    uint32_t eax_214 = ((var_5b << 8) + var_5a);
                    if (eax_214 > 0x7fff)
                    {
                        eax_214 = (eax_214 - 0x10000);
                    }
                    *(arg1 + 0x13c) = eax_214;
                    char var_59;
                    char var_58;
                    uint32_t eax_218 = ((var_59 << 8) + var_58);
                    if (eax_218 > 0x7fff)
                    {
                        eax_218 = (eax_218 - 0x10000);
                    }
                    *(arg1 + 0x144) = eax_218;
                    CWnd::UpdateData(arg1, 0);
                    var_b4_43 = &data_4312d4;
                }
                CString::operator=(&var_98, var_b4_43);
                sub_416a40(&data_4360b0);
                sub_404a80();
                var_b4_40 = 0x40;
                var_b8_5 = "Prompt";
                var_bc_2 = var_98;
                goto label_404443;
            }
            sub_404a80();
            HANDLE eax_96;
            eax_96 = data_435fd4;
            if (eax_96 == 0)
            {
                goto label_4039c7;
            }
        }
    }
    if ((((arg2 == 2 && eax_93 != 0) || (arg2 == 1 && eax_2 != 0)) && data_435fd4 == 1))
    {
    label_4043b5:
        CWnd::MessageBoxA(arg1, &data_431258, "Error", 0x10);
    }
    if ((arg2 == 2 && eax_93 == 0))
    {
        if ((GetTickCount() - *(arg1 + 0x18c)) <= 0x1388)
        {
            goto label_40444a;
        }
        KillTimer(*(arg1 + 0x20), 2);
        if (data_435fd4 == 0)
        {
            CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
        }
        if (data_435fd4 == 1)
        {
            goto label_404055;
        }
    }
    if (((arg2 == 1 && eax_2 == 0) || (arg2 == 2 && eax_93 == 0)))
    {
        if (data_435fd4 == 2)
        {
        label_404435:
            var_b4_40 = 0x10;
            var_b8_5 = "Error";
            var_bc_2 = "The serial port is already occup…";
            goto label_404443;
        }
        goto label_40444a;
    }
    if ((arg2 != 1 && arg2 != 2))
    {
        if (arg2 != 3)
        {
        label_40444a:
            CWnd::Default(arg1);
            int32_t var_4_1 = 0xffffffff;
            int32_t eax_233 = CString::~CString(&var_98);
            *fsbase = var_c;
            return eax_233;
        }
        if (sub_404a90() == 0)
        {
            if ((GetTickCount() - *(arg1 + 0x18c)) > 0x1388)
            {
                KillTimer(*(arg1 + 0x20), 3);
                if (data_435fd4 == 0)
                {
                    CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
                }
                if (data_435fd4 == 1)
                {
                    CWnd::MessageBoxA(arg1, &data_4312a0, "Error", 0x10);
                }
                if (data_435fd4 == 2)
                {
                    goto label_404435;
                }
            }
            goto label_40444a;
        }
        sub_404a70();
        KillTimer(*(arg1 + 0x20), 3);
        if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) != 0)
        {
            int32_t eax_227 = data_4360f8;
            char var_b4_44;
            if (eax_227 == 0)
            {
                var_b4_44 = 0x4e;
            }
            if (eax_227 == 1)
            {
                var_b4_44 = 0x4f;
            }
            if (eax_227 == 2)
            {
                var_b4_44 = 0x45;
            }
            if (((eax_227 == 0 || eax_227 == 1) || eax_227 == 2))
            {
                sub_416890(&data_4360b0, var_b4_44);
            }
            var_94 = 0x3c;
            CWnd::UpdateData(arg1, 1);
            int16_t eax_228 = *(arg1 + 0xe8);
            char ecx_63 = *eax_228[1];
            char var_92_1 = eax_228;
            eax_228 = *(arg1 + 0x114);
            char var_93_1 = ecx_63;
            char edx_43 = *eax_228[1];
            char var_90_1 = eax_228;
            eax_228 = *(arg1 + 0x140);
            char var_91_1 = edx_43;
            char ecx_64 = *eax_228[1];
            char var_8e_1 = eax_228;
            eax_228 = *(arg1 + 0x150);
            char var_8f_1 = ecx_64;
            char edx_44 = *eax_228[1];
            char var_8c_1 = eax_228;
            eax_228 = *(arg1 + 0x154);
            char var_8d_1 = edx_44;
            char ecx_65 = *eax_228[1];
            char var_8a_1 = eax_228;
            eax_228 = *(arg1 + 0x158);
            char var_8b_1 = ecx_65;
            char edx_45 = *eax_228[1];
            char var_88_1 = eax_228;
            eax_228 = *(arg1 + 0x15c);
            char var_89_1 = edx_45;
            char ecx_66 = *eax_228[1];
            char var_86_1 = eax_228;
            eax_228 = *(arg1 + 0x160);
            char var_87_1 = ecx_66;
            char edx_46 = *eax_228[1];
            char var_84_1 = eax_228;
            eax_228 = *(arg1 + 0x164);
            char var_85_1 = edx_46;
            char ecx_67 = *eax_228[1];
            char var_82_1 = eax_228;
            eax_228 = *(arg1 + 0xec);
            char var_83_1 = ecx_67;
            char edx_47 = *eax_228[1];
            char var_80_1 = eax_228;
            eax_228 = *(arg1 + 0xf0);
            char var_81_1 = edx_47;
            char ecx_68 = *eax_228[1];
            char var_7e_1 = eax_228;
            eax_228 = *(arg1 + 0xf4);
            char var_7f_1 = ecx_68;
            char edx_48 = *eax_228[1];
            char var_7c_1 = eax_228;
            eax_228 = *(arg1 + 0xf8);
            char var_7d_1 = edx_48;
            char ecx_69 = *eax_228[1];
            char var_7a_1 = eax_228;
            eax_228 = *(arg1 + 0xfc);
            char var_7b_1 = ecx_69;
            char edx_49 = *eax_228[1];
            char var_78_1 = eax_228;
            eax_228 = *(arg1 + 0x100);
            char var_79_1 = edx_49;
            char ecx_70 = *eax_228[1];
            char var_76_1 = eax_228;
            eax_228 = *(arg1 + 0x104);
            char var_77_1 = ecx_70;
            char edx_50 = *eax_228[1];
            char var_74_1 = eax_228;
            eax_228 = *(arg1 + 0x108);
            char var_75_1 = edx_50;
            char ecx_71 = *eax_228[1];
            char var_72_1 = eax_228;
            eax_228 = *(arg1 + 0x10c);
            char var_73_1 = ecx_71;
            char edx_51 = *eax_228[1];
            char var_70_1 = eax_228;
            eax_228 = *(arg1 + 0x110);
            char var_71_1 = edx_51;
            char ecx_72 = *eax_228[1];
            char var_6e_1 = eax_228;
            eax_228 = *(arg1 + 0x118);
            char var_6f_1 = ecx_72;
            char edx_52 = *eax_228[1];
            char var_6c_1 = eax_228;
            eax_228 = *(arg1 + 0x11c);
            char var_6d_1 = edx_52;
            char ecx_73 = *eax_228[1];
            char var_6a_1 = eax_228;
            eax_228 = *(arg1 + 0x120);
            char var_6b_1 = ecx_73;
            char edx_53 = *eax_228[1];
            char var_68_1 = eax_228;
            eax_228 = *(arg1 + 0x124);
            char var_69_1 = edx_53;
            char ecx_74 = *eax_228[1];
            char var_66_1 = eax_228;
            eax_228 = *(arg1 + 0x128);
            char var_67_1 = ecx_74;
            char edx_54 = *eax_228[1];
            char var_64_1 = eax_228;
            eax_228 = *(arg1 + 0x12c);
            char var_65_1 = edx_54;
            char ecx_75 = *eax_228[1];
            char var_62_1 = eax_228;
            eax_228 = *(arg1 + 0x130);
            char var_63_1 = ecx_75;
            char edx_55 = *eax_228[1];
            char var_60_1 = eax_228;
            eax_228 = *(arg1 + 0x134);
            char var_61_1 = edx_55;
            char ecx_76 = *eax_228[1];
            char var_5e_1 = eax_228;
            eax_228 = *(arg1 + 0x138);
            char var_5f_1 = ecx_76;
            char edx_56 = *eax_228[1];
            char var_5c_1 = eax_228;
            eax_228 = *(arg1 + 0x13c);
            char var_5d_1 = edx_56;
            char ecx_77 = *eax_228[1];
            char var_5a_1 = eax_228;
            eax_228 = *(arg1 + 0x144);
            char var_5b_1 = ecx_77;
            char var_59_1 = *eax_228[1];
            char var_58_1 = eax_228;
            CWnd::UpdateData(arg1, 0);
            char* var_b4_46;
            if (sub_41f3b0(&data_4360b0, 0xf6, &var_94) == 0)
            {
                var_b4_46 = &data_431270;
            }
            else
            {
                var_b4_46 = &data_43128c;
            }
            CString::operator=(&var_98, var_b4_46);
            sub_416a40(&data_4360b0);
            sub_404a80();
            var_b4_40 = 0x40;
            var_b8_5 = "Prompt";
            var_bc_2 = var_98;
            goto label_404443;
        }
        sub_404a80();
        HANDLE eax_226;
        eax_226 = data_435fd4;
        if (eax_226 == 0)
        {
            CWnd::MessageBoxA(arg1, &data_431300, "Error", 0x10);
        }
        if (data_435fd4 == 1)
        {
            goto label_4043b5;
        }
    }
    if ((((((arg2 == 2 && eax_93 != 0) || (arg2 == 1 && eax_2 != 0)) && data_435fd4 == 1) || (((arg2 == 2 && eax_93 != 0) || (arg2 == 1 && eax_2 != 0)) && data_435fd4 != 1)) || (arg2 != 1 && arg2 != 2)))
    {
        if (data_435fd4 != 2)
        {
            goto label_40444a;
        }
        var_b4_40 = 0x10;
        var_b8_5 = "Error";
        var_bc_2 = "Failed to open serial port. Plea…";
    label_404443:
        CWnd::MessageBoxA(arg1, var_bc_2, var_b8_5, var_b4_40);
        goto label_40444a;
    }
}

int32_t __fastcall sub_404570(CWnd* arg1)
{
    int32_t eax;
    eax = data_435fd4;
    if (eax == 0)
    {
        CWnd::SetDlgItemTextA(arg1, 0x51c, &data_4316d4);
        CWnd::SetDlgItemTextA(arg1, 0x51d, &data_4316c8);
        CWnd::SetDlgItemTextA(arg1, 0x51e, &data_4316bc);
        CWnd::SetDlgItemTextA(arg1, 0x466, &data_4316b4);
        CWnd::SetDlgItemTextA(arg1, 0x460, &data_4316a4);
        CWnd::SetDlgItemTextA(arg1, 0x461, &data_431694);
        CWnd::SetDlgItemTextA(arg1, 0x464, &data_431684);
        CWnd::SetDlgItemTextA(arg1, 0x461, &data_431694);
        CWnd::SetDlgItemTextA(arg1, 0x464, &data_431684);
        CWnd::SetDlgItemTextA(arg1, 0x4b8, &data_431674);
        CWnd::SetDlgItemTextA(arg1, 0x468, &data_431664);
        CWnd::SetDlgItemTextA(arg1, 0x572, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x575, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x576, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x577, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x573, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x578, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x579, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x57a, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x574, &data_431644);
        CWnd::SetDlgItemTextA(arg1, 0x57b, &data_431644);
        CWnd::SetDlgItemTextA(arg1, 0x57c, &data_431644);
        eax = CWnd::SetDlgItemTextA(arg1, 0x57d, &data_431644);
    }
    if (data_435fd4 == 1)
    {
        CWnd::SetDlgItemTextA(arg1, 0x51c, &data_431634);
        CWnd::SetDlgItemTextA(arg1, 0x51d, &data_431628);
        CWnd::SetDlgItemTextA(arg1, 0x51e, &data_43161c);
        CWnd::SetDlgItemTextA(arg1, 0x466, &data_431614);
        CWnd::SetDlgItemTextA(arg1, 0x460, &data_431604);
        CWnd::SetDlgItemTextA(arg1, 0x461, &data_4315f4);
        CWnd::SetDlgItemTextA(arg1, 0x464, &data_4315e4);
        CWnd::SetDlgItemTextA(arg1, 0x4b8, &data_431674);
        CWnd::SetDlgItemTextA(arg1, 0x468, &data_431664);
        CWnd::SetDlgItemTextA(arg1, 0x572, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x575, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x576, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x577, &data_431658);
        CWnd::SetDlgItemTextA(arg1, 0x573, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x578, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x579, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x57a, &data_431650);
        CWnd::SetDlgItemTextA(arg1, 0x574, &data_431644);
        CWnd::SetDlgItemTextA(arg1, 0x57b, &data_431644);
        CWnd::SetDlgItemTextA(arg1, 0x57c, &data_431644);
        eax = CWnd::SetDlgItemTextA(arg1, 0x57d, &data_431644);
    }
    if (data_435fd4 == 2)
    {
        CWnd::SetDlgItemTextA(arg1, 0x51c, "Voltage temperature calibration");
        CWnd::SetDlgItemTextA(arg1, 0x51d, "Current calibration");
        CWnd::SetDlgItemTextA(arg1, 0x51e, "Actual current");
        CWnd::SetDlgItemTextA(arg1, 0x466, "Calibration");
        CWnd::SetDlgItemTextA(arg1, 0x460, "IDLE current");
        CWnd::SetDlgItemTextA(arg1, 0x461, "CHG current");
        CWnd::SetDlgItemTextA(arg1, 0x464, "DSG current");
        CWnd::SetDlgItemTextA(arg1, 0x4b8, "Read Cell Res");
        CWnd::SetDlgItemTextA(arg1, 0x468, "Write Cell Res");
        CWnd::SetDlgItemTextA(arg1, 0x572, "Value mV");
        CWnd::SetDlgItemTextA(arg1, 0x575, "Value mV");
        CWnd::SetDlgItemTextA(arg1, 0x576, "Value mV");
        CWnd::SetDlgItemTextA(arg1, 0x577, "Value mV");
        CWnd::SetDlgItemTextA(arg1, 0x573, "Cib  mV");
        CWnd::SetDlgItemTextA(arg1, 0x578, "Cib  mV");
        CWnd::SetDlgItemTextA(arg1, 0x579, "Cib  mV");
        CWnd::SetDlgItemTextA(arg1, 0x57a, "Cib  mV");
        CWnd::SetDlgItemTextA(arg1, 0x574, "Cell Res 0.1mR");
        CWnd::SetDlgItemTextA(arg1, 0x57b, "Cell Res 0.1mR");
        CWnd::SetDlgItemTextA(arg1, 0x57c, "Cell Res 0.1mR");
        eax = CWnd::SetDlgItemTextA(arg1, 0x57d, "Cell Res 0.1mR");
    }
    return eax;
}

uint32_t __fastcall sub_4049f0(void* arg1)
{
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x188) = 0x29;
    SetTimer(hWnd, 2, 0x14, nullptr);
    uint32_t eax = GetTickCount();
    *(arg1 + 0x18c) = eax;
    return eax;
}

uint32_t __fastcall sub_404a20(void* arg1)
{
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x188) = 0x29;
    SetTimer(hWnd, 3, 0x14, nullptr);
    uint32_t eax = GetTickCount();
    *(arg1 + 0x18c) = eax;
    return eax;
}

BOOL __fastcall sub_404a50(void* arg1)
{
    return EnableWindow(*(arg1 + 0x20), 0);
}

BOOL __fastcall sub_404a60(void* arg1)
{
    return EnableWindow(*(arg1 + 0x20), 1);
}

int32_t sub_404a70()
{
    data_435ef4 = 1;
}

int32_t sub_404a80()
{
    data_435ef4 = 0;
}

int32_t sub_404a90()
{
    int32_t eax;
    eax = data_435ef4 == 0;
    return eax;
}

int32_t sub_404aa0(int32_t arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427748;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_10;
    CString::CString(&var_10);
    int32_t var_4 = 0;
    int32_t* var_14;
    FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, nullptr, GetLastError(), 0x400, &var_14, 0, nullptr);
    int32_t var_18 = arg1;
    int32_t* var_1c = var_14;
    CString::Format(&var_10, "%s :%d\n");
    LocalFree(var_14);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_2 = CString::~CString(&var_10);
    *fsbase = var_c;
    return eax_2;
}

HANDLE sub_404b40(int32_t arg1, int32_t arg2, char arg3)
{
    int32_t var_4_5 = 0xffffffff;
    int32_t (* var_8)() = sub_427768;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    PSTR lpFileName;
    CString::CString(&lpFileName);
    int32_t var_4 = 0;
    if ((arg1 >= 0 && arg1 < 0xa))
    {
        int32_t var_54_1 = (arg1 + 1);
        CString::Format(&lpFileName, "COM%d");
    }
    if (((arg1 < 0 && arg1 < 0xa) || (((arg1 < 0 && arg1 >= 0xa) || (arg1 >= 0 && arg1 >= 0xa)) && arg1 >= 0x100)))
    {
        CString::operator=(&lpFileName, "COM1");
    }
    if ((((arg1 < 0 && arg1 >= 0xa) || (arg1 >= 0 && arg1 >= 0xa)) && arg1 < 0x100))
    {
        int32_t var_54_2 = (arg1 + 1);
        CString::Format(&lpFileName, "\\.\COM%d");
    }
    HANDLE eax_4 = CreateFileA(lpFileName, 0xc0000000, FILE_SHARE_NONE, nullptr, OPEN_EXISTING, SECURITY_ANONYMOUS, nullptr);
    if (eax_4 != 0xffffffff)
    {
        SetupComm(eax_4, 0x800, 0x800);
        int32_t var_38 = 0;
        int32_t var_34 = 0x1f4;
        int32_t var_30 = 0;
        int32_t var_2c = 0x12c;
        void lpCommTimeouts;
        SetCommTimeouts(eax_4, &lpCommTimeouts);
        void lpDCB;
        if (GetCommState(eax_4, &lpDCB) == 0)
        {
            CloseHandle(eax_4);
            int32_t var_4_2 = 0xffffffff;
            CString::~CString(&lpFileName);
            *fsbase = var_c;
            return 0xffffffdf;
        }
        int32_t edi;
        if ((((arg2 > 0x7080 && arg2 != 0x9600) && arg2 != 0xe100) && arg2 != 0x1c200))
        {
            edi = 0x9600;
        }
        if ((((arg2 <= 0x7080 && arg2 != 0x7080) && arg2 > 0x3840) && arg2 != 0x4b00))
        {
            edi = 0x9600;
        }
        if ((((((((arg2 == 0x9600 || arg2 == 0x7080) || arg2 == 0xe100) || arg2 == 0x1c200) || arg2 == 0x4b00) || arg2 == 0x3840) || arg2 == 0x4b0) || arg2 == 0x2580))
        {
            edi = arg2;
        }
        if ((((((arg2 <= 0x7080 && arg2 != 0x7080) && arg2 <= 0x3840) && arg2 != 0x3840) && arg2 != 0x4b0) && arg2 != 0x2580))
        {
            edi = 0x9600;
        }
        if (GetCommState(eax_4, &lpDCB) != 0)
        {
            BOOL eax_11;
            eax_11 = arg3;
            int32_t var_20;
            int32_t ecx_8;
            *ecx_8[1] = (*(var_20 & 0xffffdfb3)[1] | 0x10);
            int32_t var_24_1 = edi;
            char var_16_1 = 8;
            char var_15_1 = 0;
            char var_14_1 = eax_11;
            int32_t var_20_1 = ecx_8;
            if ((SetCommState(eax_4, &lpDCB) != 0 && SetCommMask(eax_4, EV_TXEMPTY) != 0))
            {
                SetCommMask(eax_4, EV_CTS | EV_RXCHAR | EV_TXEMPTY);
                PurgeComm(eax_4, PURGE_RXCLEAR | PURGE_TXCLEAR);
                int32_t var_4_4 = 0xffffffff;
                CString::~CString(&lpFileName);
                *fsbase = var_c;
                return eax_4;
            }
        }
        CloseHandle(eax_4);
        int32_t var_4_3 = 0xffffffff;
        CString::~CString(&lpFileName);
        *fsbase = var_c;
        return 0xffffffde;
    }
    int32_t var_4_1 = 0xffffffff;
    int32_t* ecx_2 = &lpFileName;
    if (GetLastError() != ERROR_ACCESS_DENIED)
    {
        CString::~CString(ecx_2);
        *fsbase = var_c;
        return 0xffffffe0;
    }
    CString::~CString(ecx_2);
    *fsbase = var_c;
    return 0xffffffdc;
}

int32_t sub_404db0(HANDLE arg1)
{
    HANDLE hFile = arg1;
    char var_c = 0xa;
    char var_b = 0x5a;
    char var_a = 0xa5;
    char var_9 = 0xf0;
    GetCommModemStatus(hFile, &arg1);
    if ((arg1 & 0x10) != 0)
    {
        sub_405320(0x258);
        uint32_t nNumberOfBytesToRead = sub_404f00(hFile, &var_c, 4);
        int32_t lpNumberOfBytesRead;
        void lpBuffer;
        if ((nNumberOfBytesToRead == 4 && (ReadFile(hFile, &lpBuffer, nNumberOfBytesToRead, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == 4)))
        {
            int32_t eax_2 = 0;
            while (*(&lpBuffer + eax_2) == &var_c[eax_2])
            {
                eax_2 = (eax_2 + 1);
                if (eax_2 >= 4)
                {
                    return 1;
                }
            }
        }
    }
    return 0;
}

struct OVERLAPPED* sub_404e50(HANDLE arg1, struct OVERLAPPED* arg2, uint32_t arg3, int32_t* arg4)
{
    void* lpBuffer = arg2;
    *arg4 = 0;
    if (lpBuffer == 0)
    {
        return 0;
    }
    uint32_t eax_2 = GetTickCount();
    if (ReadFile(arg1, lpBuffer, arg3, &arg2, nullptr) != 0)
    {
        while (true)
        {
            struct OVERLAPPED* lpOverlapped = arg2;
            if (lpOverlapped == 0)
            {
                if ((GetTickCount() - eax_2) > 0x1e)
                {
                    *arg4 = arg2;
                    return 0;
                }
                lpOverlapped = arg2;
                if (lpOverlapped == 0)
                {
                    if (ReadFile(arg1, lpBuffer, arg3, &arg2, lpOverlapped) == 0)
                    {
                        break;
                    }
                    continue;
                }
            }
            *arg4 = lpOverlapped;
            return lpOverlapped;
        }
    }
    *arg4 = arg2;
    return 0;
}

int32_t sub_404f00(HANDLE arg1, void* arg2, uint32_t arg3)
{
    int32_t lpNumberOfBytesWritten = 0;
    int32_t var_4 = 1;
    int32_t lpNumberOfBytesWritten_1;
    bool cond:0_1;
    do
    {
        bool cond:1_1 = WriteFile(arg1, arg2, arg3, &lpNumberOfBytesWritten, nullptr) == 0;
        lpNumberOfBytesWritten_1 = lpNumberOfBytesWritten;
        if (((!cond:1_1) && lpNumberOfBytesWritten_1 == arg3))
        {
            break;
        }
        cond:0_1 = (var_4 + 1) <= 3;
        var_4 = (var_4 + 1);
    } while (cond:0_1);
    return lpNumberOfBytesWritten_1;
}

int32_t sub_404f60(HANDLE arg1, char arg2, int32_t arg3)
{
    int32_t lpBuffer = 0;
    int32_t var_c = 0;
    int32_t var_8 = 0;
    int32_t var_4 = 0;
    char var_17 = 0;
    char var_15 = arg3;
    int32_t lpNumberOfBytesRead = 0;
    char var_18 = 4;
    char var_16 = arg2;
    char var_14 = (arg3 >> 8);
    if ((sub_404f00(arg1, &var_18, 5) == 5 && (ReadFile(arg1, &lpBuffer, 1, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == 1)))
    {
        uint32_t nNumberOfBytesToRead = lpBuffer;
        if (ReadFile(arg1, &*lpBuffer[1], nNumberOfBytesToRead, &lpNumberOfBytesRead, nullptr) != 0)
        {
            int32_t lpNumberOfBytesRead_1 = lpNumberOfBytesRead;
            if (lpNumberOfBytesRead_1 == nNumberOfBytesToRead)
            {
                int32_t eax_5 = 0;
                if (lpNumberOfBytesRead_1 <= 0)
                {
                    return 1;
                }
                while (true)
                {
                    if (*(&lpBuffer + eax_5) != &var_18[eax_5])
                    {
                        return 0;
                    }
                    eax_5 = (eax_5 + 1);
                    if (eax_5 >= lpNumberOfBytesRead_1)
                    {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

int32_t sub_405030(HANDLE arg1, char arg2, int32_t arg3)
{
    int32_t lpBuffer = 0;
    int32_t var_c = 0;
    char var_14 = arg3;
    int32_t var_8 = 0;
    char ebx_1 = (arg3 >> 8);
    int32_t lpNumberOfBytesRead = 0;
    int32_t var_4 = 0;
    char var_18 = 5;
    char var_17 = 0;
    char var_16 = 0xa8;
    char var_15 = arg2;
    char var_13 = ebx_1;
    if ((sub_404f00(arg1, &var_18, 6) == 6 && (ReadFile(arg1, &lpBuffer, 1, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == 1)))
    {
        uint32_t nNumberOfBytesToRead = lpBuffer;
        if (ReadFile(arg1, &*lpBuffer[1], nNumberOfBytesToRead, &lpNumberOfBytesRead, nullptr) != 0)
        {
            int32_t lpNumberOfBytesRead_1 = lpNumberOfBytesRead;
            if (lpNumberOfBytesRead_1 == nNumberOfBytesToRead)
            {
                BOOL eax_2;
                eax_2 = arg3;
                char var_15_1 = eax_2;
                int32_t eax_3 = 0;
                var_18 = 4;
                char var_17_1 = 0;
                char var_16_1 = arg2;
                char var_14_1 = ebx_1;
                if (lpNumberOfBytesRead_1 <= 0)
                {
                    return 1;
                }
                while (true)
                {
                    if (*(&lpBuffer + eax_3) != &var_18[eax_3])
                    {
                        return 0;
                    }
                    eax_3 = (eax_3 + 1);
                    if (eax_3 >= lpNumberOfBytesRead_1)
                    {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

uint32_t sub_405130(HANDLE arg1, char arg2)
{
    int32_t lpBuffer = 0;
    char var_c = 0;
    int32_t var_8 = 0;
    int32_t lpNumberOfBytesRead = 0;
    int32_t var_4 = 0;
    char var_18 = 3;
    char var_17 = 0;
    char var_16 = 0xa8;
    char var_15 = arg2;
    if ((sub_404f00(arg1, &var_18, 4) == 4 && (ReadFile(arg1, &lpBuffer, 1, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == 1)))
    {
        uint32_t nNumberOfBytesToRead = lpBuffer;
        if ((ReadFile(arg1, &*lpBuffer[1], nNumberOfBytesToRead, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == nNumberOfBytesToRead))
        {
            return ((var_c << 8) + lpBuffer);
        }
    }
    return 0;
}

int32_t sub_4051f0() __pure
{
    return 1;
}

int32_t sub_405200(HANDLE arg1, char arg2, char* arg3)
{
    int32_t var_20;
    __builtin_memset(&var_20, 0, 0x20);
    char* ecx = arg3;
    int32_t lpNumberOfBytesRead = 0;
    char var_3f = 0;
    char eax = *ecx;
    arg3 = eax;
    char var_40 = (eax + 2);
    char var_3e = arg2;
    if (eax >= 1)
    {
        void* ecx_1 = &ecx[1];
        void var_3d;
        void* esi_1 = &var_3d;
        uint32_t i_1 = arg3;
        uint32_t i;
        do
        {
            char edx = *ecx_1;
            ecx_1 = (ecx_1 + 1);
            *esi_1 = edx;
            esi_1 = (esi_1 + 1);
            i = i_1;
            i_1 = (i_1 - 1);
        } while (i != 1);
    }
    if ((sub_404f00(arg1, &var_40, (var_40 + 1)) == (var_40 + 1) && (ReadFile(arg1, &var_20, 1, &lpNumberOfBytesRead, nullptr) != 0 && lpNumberOfBytesRead == 1)))
    {
        uint32_t nNumberOfBytesToRead = var_20;
        if (ReadFile(arg1, &*var_20[1], nNumberOfBytesToRead, &lpNumberOfBytesRead, nullptr) != 0)
        {
            int32_t lpNumberOfBytesRead_1 = lpNumberOfBytesRead;
            if (lpNumberOfBytesRead_1 == nNumberOfBytesToRead)
            {
                char edx_4 = 0;
                if (lpNumberOfBytesRead_1 <= 0)
                {
                    return 1;
                }
                uint32_t eax_10 = 0;
                while (true)
                {
                    if (*(&var_20 + eax_10) != &var_40[eax_10])
                    {
                        return 0;
                    }
                    edx_4 = (edx_4 + 1);
                    eax_10 = edx_4;
                    if (eax_10 >= lpNumberOfBytesRead_1)
                    {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

BOOL sub_405310(BOOL arg1)
{
    BOOL hObject = arg1;
    if (hObject != 0)
    {
        hObject = CloseHandle(hObject);
    }
    return hObject;
}

uint32_t sub_405320(int32_t arg1)
{
    uint32_t eax = GetTickCount();
    uint32_t eax_2 = (GetTickCount() - eax);
    if (eax_2 <= arg1)
    {
        do
        {
            eax_2 = (GetTickCount() - eax);
        } while (eax_2 <= arg1);
    }
    return eax_2;
}

void* sub_405350(char arg1)
{
    void* eax;
    if ((arg1 - 0x30) <= 0x36)
    {
        int32_t ecx_1;
        ecx_1 = *(arg1 + 0x4053b4);
        switch (ecx_1)
        {
            case 0:
            {
                eax = 0;
                return eax;
                break;
            }
            case 1:
            {
                eax = 1;
                return eax;
                break;
            }
            case 2:
            {
                eax = 2;
                return eax;
                break;
            }
            case 3:
            {
                eax = 3;
                return eax;
                break;
            }
            case 4:
            {
                eax = 4;
                return eax;
                break;
            }
            case 5:
            {
                eax = 5;
                return eax;
                break;
            }
            case 6:
            {
                eax = 6;
                return eax;
                break;
            }
            case 7:
            {
                eax = 7;
                return eax;
                break;
            }
            case 8:
            {
                eax = 8;
                return eax;
                break;
            }
            case 9:
            {
                eax = 9;
                return eax;
                break;
            }
            case 0xa:
            {
                eax = 0xa;
                return eax;
                break;
            }
            case 0xb:
            {
                eax = 0xb;
                return eax;
                break;
            }
            case 0xc:
            {
                eax = 0xc;
                return eax;
                break;
            }
            case 0xd:
            {
                eax = 0xd;
                return eax;
                break;
            }
            case 0xe:
            {
                eax = 0xe;
                return eax;
                break;
            }
            case 0xf:
            {
                eax = 0xf;
                return eax;
                break;
            }
        }
    }
    eax = 0xff;
    return eax;
}

uint32_t sub_405420(char arg1)
{
    uint32_t eax = arg1;
    if (eax > 0xf)
    {
        eax = 0xff;
        return eax;
    }
    switch (eax)
    {
        case 0:
        {
            eax = 0x30;
            return eax;
            break;
        }
        case 1:
        {
            eax = 0x31;
            return eax;
            break;
        }
        case 2:
        {
            eax = 0x32;
            return eax;
            break;
        }
        case 3:
        {
            eax = 0x33;
            return eax;
            break;
        }
        case 4:
        {
            eax = 0x34;
            return eax;
            break;
        }
        case 5:
        {
            eax = 0x35;
            return eax;
            break;
        }
        case 6:
        {
            eax = 0x36;
            return eax;
            break;
        }
        case 7:
        {
            eax = 0x37;
            return eax;
            break;
        }
        case 8:
        {
            eax = 0x38;
            return eax;
            break;
        }
        case 9:
        {
            eax = 0x39;
            return eax;
            break;
        }
        case 0xa:
        {
            eax = 0x41;
            return eax;
            break;
        }
        case 0xb:
        {
            eax = 0x42;
            return eax;
            break;
        }
        case 0xc:
        {
            eax = 0x43;
            return eax;
            break;
        }
        case 0xd:
        {
            eax = 0x44;
            return eax;
            break;
        }
        case 0xe:
        {
            eax = 0x45;
            return eax;
            break;
        }
        case 0xf:
        {
            eax = 0x46;
            return eax;
            break;
        }
    }
}

uint32_t sub_4054b0(char arg1, char arg2)
{
    char var_100 = 0;
    char var_ff = 7;
    char var_fe = 0xe;
    char var_fd = 9;
    char var_fc = 0x1c;
    char var_fb = 0x1b;
    char var_fa = 0x12;
    char var_f9 = 0x15;
    var_f8_46;
    __builtin_strncpy(&var_f8_46, "8?61$#*-pw~ylkbeHOFATSZ]", 0x18);
    char var_e0 = 0xe0;
    char var_df = 0xe7;
    char var_de = 0xee;
    char var_dd = 0xe9;
    char var_dc = 0xfc;
    char var_db = 0xfb;
    char var_da = 0xf2;
    char var_d9 = 0xf5;
    char var_d8 = 0xd8;
    char var_d7 = 0xdf;
    char var_d6 = 0xd6;
    char var_d5 = 0xd1;
    char var_d4 = 0xc4;
    char var_d3 = 0xc3;
    char var_d2 = 0xca;
    char var_d1 = 0xcd;
    char var_d0 = 0x90;
    char var_cf = 0x97;
    char var_ce = 0x9e;
    char var_cd = 0x99;
    char var_cc = 0x8c;
    char var_cb = 0x8b;
    char var_ca = 0x82;
    char var_c9 = 0x85;
    char var_c8 = 0xa8;
    char var_c7 = 0xaf;
    char var_c6 = 0xa6;
    char var_c5 = 0xa1;
    char var_c4 = 0xb4;
    char var_c3 = 0xb3;
    char var_c2 = 0xba;
    char var_c1 = 0xbd;
    char var_c0 = 0xc7;
    char var_bf = 0xc0;
    char var_be = 0xc9;
    char var_bd = 0xce;
    char var_bc = 0xdb;
    char var_bb = 0xdc;
    char var_ba = 0xd5;
    char var_b9 = 0xd2;
    char var_b8 = 0xff;
    char var_b7 = 0xf8;
    char var_b6 = 0xf1;
    char var_b5 = 0xf6;
    char var_b4 = 0xe3;
    char var_b3 = 0xe4;
    char var_b2 = 0xed;
    char var_b1 = 0xea;
    char var_b0 = 0xb7;
    char var_af = 0xb0;
    char var_ae = 0xb9;
    char var_ad = 0xbe;
    char var_ac = 0xab;
    char var_ab = 0xac;
    char var_aa = 0xa5;
    char var_a9 = 0xa2;
    char var_a8 = 0x8f;
    char var_a7 = 0x88;
    char var_a6 = 0x81;
    char var_a5 = 0x86;
    char var_a4 = 0x93;
    char var_a3 = 0x94;
    char var_a2 = 0x9d;
    char var_a1 = 0x9a;
    var_a0_486;
    __builtin_strncpy(&var_a0_486, "\' ).;<52", 8);
    char var_98 = 0x1f;
    char var_97 = 0x18;
    char var_96 = 0x11;
    char var_95 = 0x16;
    char var_94 = 3;
    char var_93 = 4;
    var_92_556;
    __builtin_strncpy(&var_92_556, "\r\nWPY^KLEBohafst}z", 0x12);
    char var_80 = 0x89;
    char var_7f = 0x8e;
    char var_7e = 0x87;
    char var_7d = 0x80;
    char var_7c = 0x95;
    char var_7b = 0x92;
    char var_7a = 0x9b;
    char var_79 = 0x9c;
    char var_78 = 0xb1;
    char var_77 = 0xb6;
    char var_76 = 0xbf;
    char var_75 = 0xb8;
    char var_74 = 0xad;
    char var_73 = 0xaa;
    char var_72 = 0xa3;
    char var_71 = 0xa4;
    char var_70 = 0xf9;
    char var_6f = 0xfe;
    char var_6e = 0xf7;
    char var_6d = 0xf0;
    char var_6c = 0xe5;
    char var_6b = 0xe2;
    char var_6a = 0xeb;
    char var_69 = 0xec;
    char var_68 = 0xc1;
    char var_67 = 0xc6;
    char var_66 = 0xcf;
    char var_65 = 0xc8;
    char var_64 = 0xdd;
    char var_63 = 0xda;
    char var_62 = 0xd3;
    char var_61 = 0xd4;
    var_60_902;
    __builtin_strncpy(&var_60_902, "ing`ur{|QV_XMJCD", 0x10);
    char var_50 = 0x19;
    char var_4f = 0x1e;
    char var_4e = 0x17;
    char var_4d = 0x10;
    char var_4c = 5;
    char var_4b = 2;
    char var_4a = 0xb;
    char var_49 = 0xc;
    var_48_1094;
    __builtin_strncpy(&var_48_1094, "!&/(=:34NI@GRU\\[vqx\x7fjmdc>907\"%,+", 0x20);
    char var_28 = 6;
    char var_27 = 1;
    char var_26 = 8;
    char var_25 = 0xf;
    char var_24 = 0x1a;
    char var_23 = 0x1d;
    char var_22 = 0x14;
    char var_21 = 0x13;
    char var_20 = 0xae;
    char var_1f = 0xa9;
    char var_1e = 0xa0;
    char var_1d = 0xa7;
    char var_1c = 0xb2;
    char var_1b = 0xb5;
    char var_1a = 0xbc;
    char var_19 = 0xbb;
    char var_18 = 0x96;
    char var_17 = 0x91;
    char var_16 = 0x98;
    char var_15 = 0x9f;
    char var_14 = 0x8a;
    char var_13 = 0x8d;
    char var_12 = 0x84;
    char var_11 = 0x83;
    char var_10 = 0xde;
    char var_f = 0xd9;
    char var_e = 0xd0;
    char var_d = 0xd7;
    char var_c = 0xc2;
    char var_b = 0xc5;
    char var_a = 0xcc;
    char var_9 = 0xcb;
    char var_8 = 0xe6;
    char var_7 = 0xe1;
    char var_6 = 0xe8;
    char var_5 = 0xef;
    char var_4 = 0xfa;
    char var_3 = 0xfd;
    char var_2 = 0xf4;
    char var_1 = 0xf3;
    uint32_t eax_2;
    eax_2 = &var_100[(arg1 ^ arg2)];
    return eax_2;
}

void*** __thiscall sub_405b60(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4277e7;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x8f, arg2);
    int32_t var_4 = 0;
    sub_411810(&esi[0x18]);
    var_4 = 1;
    sub_416590(&esi[0x8c22]);
    var_4 = 2;
    CWnd::CWnd(&esi[0x8c36]);
    esi[0x8c36] = 0x42ab00;
    var_4 = 3;
    CWnd::CWnd(&esi[0x8c46]);
    esi[0x8c46] = 0x42ab00;
    var_4 = 4;
    CWnd::CWnd(&esi[0x8c56]);
    esi[0x8c56] = 0x42aa40;
    var_4 = 5;
    sub_426090(&esi[0x8c66]);
    var_4 = 6;
    CString::CString(&esi[0x8c81]);
    var_4 = 7;
    *esi = &data_42a968;
    CString::operator=(&esi[0x8c81], &data_435ef0);
    *fsbase = var_c;
    return esi;
}

CDialog* __thiscall sub_405c50(CDialog* arg1, char arg2)
{
    sub_405c80(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_405c70(void* arg1)
{
    /* tailcall */
    return sub_416a80((arg1 + 0x18));
}

int32_t __fastcall sub_405c80(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427859;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 6;
    CString::~CString((arg1 + 0x23204));
    var_4 = 5;
    sub_426160((arg1 + 0x23198));
    var_4 = 4;
    CStatic::~CStatic((arg1 + 0x23158));
    var_4 = 3;
    CComboBox::~CComboBox((arg1 + 0x23118));
    var_4 = 2;
    CComboBox::~CComboBox((arg1 + 0x230d8));
    var_4 = 1;
    sub_416a80((arg1 + 0x23088));
    var_4 = 0;
    sub_411840((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_405d30(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x4bb, (arg1 + 0x230d8));
    DDX_Control(arg2, 0x4ba, (arg1 + 0x23118));
    DDX_Control(arg2, 0x485, (arg1 + 0x23158));
    DDX_Control(arg2, 0x483, (arg1 + 0x23198));
    return DDX_Text(arg2, 0x487, (arg1 + 0x23204));
}

int32_t sub_405da0() __pure
{
    return CDialog::messageMap;
}

int32_t sub_405db0() __pure
{
    return 0x42a8b8;
}

long __fastcall sub_405dc0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_405e00(int32_t arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4278b2;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t ebp;
    int32_t var_28c = ebp;
    int32_t esi;
    int32_t var_290 = esi;
    int32_t edi;
    int32_t var_294 = edi;
    void var_278;
    __builtin_memcpy(&var_278, "Hex Files (*.hex)|*.hex|Bin File…", 0x6c);
    class CWnd* var_298 = nullptr;
    void* var_29c = &var_278;
    unsigned long var_2a0 = 0x801000;
    void* var_2a4 = "*.hex";
    char* var_2a8 = &data_43170c;
    int32_t var_2ac = 1;
    int16_t* esi_1;
    int16_t* edi_1;
    *edi_1 = *esi_1;
    CFileDialog var_208;
    CFileDialog::CFileDialog(&var_208, var_2ac, var_2a8, var_2a4, var_2a0, var_29c, var_298);
    int32_t* esp_1 = &var_294;
    int32_t var_4 = 0;
    uint32_t eax_1 = GetVersion();
    int32_t var_1a8 = (((eax_1 - eax_1) & 0xc) + 0x4c);
    if (CFileDialog::DoModal(&var_208) == 1)
    {
        var_298 = &data_435ef0;
        int32_t var_288;
        CString::CString(&var_288, var_298);
        int32_t var_18c;
        int32_t var_284 = var_18c;
        var_298 = &var_284;
        void var_280;
        var_29c = &var_280;
        var_4 = 1;
        var_29c = CFileDialog::GetNextPathName(&var_208, var_29c);
        var_8 = 2;
        CString::operator+=(&var_28c, var_29c);
        void* esp_2 = &var_298;
        var_8 = 1;
        CString::~CString(&var_284);
        if (var_288 != 0)
        {
            var_29c = 0;
            void** esp_3 = &var_29c;
            do
            {
                *(esp_3 - 4) = &esp_3[5];
                *(esp_3 - 8) = &esp_3[7];
                *(esp_3 - 8) = CFileDialog::GetNextPathName(&esp_3[0x24]);
                *(esp_3 - 0xc) = &data_431708;
                *(esp_3 - 0x10) = &esp_3[5];
                esp_3[0xa4] = 3;
                *(esp_3 - 0xc) = operator+();
                esp_3[0xa3] = 4;
                CString::operator+=(&esp_3[2]);
                esp_3 = (esp_3 - 8);
                esp_3[0xa5] = 3;
                CString::~CString(&esp_3[6]);
                esp_3[0xa5] = 1;
                CString::~CString(&esp_3[7]);
            } while (esp_3[5] != 0);
            *esp_3;
            esp_2 = &esp_3[1];
        }
        *(esp_2 - 4) = (esp_2 + 0xc);
        CString::operator=((arg1 + 0x23204));
        *(esp_2 - 4) = (esp_2 + 0xc);
        CString::operator=(0x435fe8);
        *(esp_2 - 4) = 0;
        CWnd::UpdateData(arg1);
        esp_1 = esp_2;
        esp_1[0xa4] = 0;
        CString::~CString(&esp_1[3]);
    }
    esp_1[0xa4] = 5;
    CString::~CString(&esp_1[0x4f]);
    esp_1[0xa4] = 0xffffffff;
    int32_t eax_12 = CDialog::~CDialog(&esp_1[0x23]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    *fsbase = esp_1[0xa2];
    return eax_12;
}

int32_t __fastcall sub_405fe0(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4278c8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 0;
    CString::~CString((arg1 + 0xb0));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __stdcall sub_406030(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __fastcall sub_406060(CWnd* arg1, PSTR arg2 @ esi)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax;
    if (*(*(arg1 + 0x23204) - 8) != 0)
    {
        data_433b18 = SendMessageA(*(arg1 + 0x23138), 0x147, nullptr, nullptr);
        eax = SendMessageA(*(arg1 + 0x230f8), 0x147, nullptr, nullptr);
        data_433b1c = eax;
        if (eax == 0)
        {
            data_435fdc = 0xf0;
            data_435fd8 = 0x7800;
            eax = sub_411930(*(arg1 + 0x23204));
        }
        if (eax == 1)
        {
            data_435fdc = 0x1f0;
            data_435fd8 = 0xf800;
            eax = sub_411930(*(arg1 + 0x23204));
        }
        if (eax == 2)
        {
            data_435fdc = 0x1f0;
            data_435fd8 = 0xf800;
            eax = sub_411930(*(arg1 + 0x23204));
        }
        if ((eax == 4 || eax == 7))
        {
            data_435fdc = 0x1e0;
            data_435fd8 = 0xf000;
        }
        if ((eax == 3 || eax == 5))
        {
            data_435fdc = 0x1f0;
            data_435fd8 = 0xf800;
        }
        if ((eax == 6 || eax == 8))
        {
            data_435fdc = 0x1f0;
            data_435fd8 = 0xf800;
        }
        if (((eax == 3 || eax == 5) || ((((eax == 4 || eax == 7) || eax == 6) || eax == 8) && eax == 5)))
        {
            eax = sub_4120d0(*(arg1 + 0x23204), arg2);
        }
        if ((((eax == 4 || eax == 7) || eax == 6) || eax == 8))
        {
            eax = sub_411930(*(arg1 + 0x23204));
        }
        if (eax == 9)
        {
            data_435fdc = 0x3b0;
            data_435fd8 = 0x1d800;
            eax = sub_411930(*(arg1 + 0x23204));
        }
        if (((((((((((eax == 0 || eax == 1) || eax == 2) || eax == 3) || eax == 5) || ((((eax == 4 || eax == 7) || eax == 6) || eax == 8) && eax == 5)) || eax == 4) || eax == 7) || eax == 6) || eax == 8) || eax == 9))
        {
            if (*(arg1 + 0x23064) > data_435fdc)
            {
                eax = data_435fd4;
                if (eax == 0)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_4318f4, &data_43116c, 0x10);
                }
                if (data_435fd4 == 1)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_4318c8, &data_431150, 0x10);
                }
                if (data_435fd4 == 2)
                {
                    return CWnd::MessageBoxA(arg1, "The file does not match the chip…", "ERROR", 0x10);
                }
            }
            else if (eax == 1)
            {
                eax = data_435fd4;
                if (eax == 0)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_43186c, &data_43116c, 0x10);
                }
                if (data_435fd4 == 1)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_43185c, &data_431150, 0x10);
                }
                if (data_435fd4 == 2)
                {
                    return CWnd::MessageBoxA(arg1, "Error opening file!", "ERROR", 0x10);
                }
            }
            else if (eax == 2)
            {
                eax = data_435fd4;
                if (eax == 0)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_431838, &data_43116c, 0x10);
                }
                if (data_435fd4 == 1)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_431828, &data_431150, 0x10);
                }
                if (data_435fd4 == 2)
                {
                    return CWnd::MessageBoxA(arg1, "Error read file!", "ERROR", 0x10);
                }
            }
            else if (eax == 4)
            {
                eax = data_435fd4;
                if (eax == 0)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_4317fc, &data_43116c, 0x10);
                }
                if (data_435fd4 == 1)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_4317e4, &data_431150, 0x10);
                }
                if (data_435fd4 == 2)
                {
                    return CWnd::MessageBoxA(arg1, "The file does not correspond to …", "ERROR", 0x10);
                }
            }
            else if (eax == 0)
            {
                SetTimer(*(arg1 + 0x20), 1, 0x14, nullptr);
                *(arg1 + 0x230d0) = GetTickCount();
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x4ba), 0);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x4bb), 0);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x486), 0);
                eax = CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x482), 0);
            }
            else
            {
                eax = data_435fd4;
                if (eax == 0)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_4317a4, &data_43116c, 0x10);
                }
                if (data_435fd4 == 1)
                {
                    eax = CWnd::MessageBoxA(arg1, &data_431798, &data_431150, 0x10);
                }
                if (data_435fd4 == 2)
                {
                    return CWnd::MessageBoxA(arg1, "Other errors!", "ERROR", 0x10);
                }
            }
        }
        if ((((((((((eax != 0 && eax != 1) && eax != 2) && eax != 3) && eax != 4) && eax != 7) && eax != 5) && eax != 6) && eax != 8) && eax != 9))
        {
            eax = data_435fd4;
            if (eax == 0)
            {
                eax = CWnd::MessageBoxA(arg1, &data_431964, "Error", 0x10);
            }
            if (data_435fd4 == 1)
            {
                eax = CWnd::MessageBoxA(arg1, &data_431950, "Error", 0x10);
            }
            if (data_435fd4 == 2)
            {
                return CWnd::MessageBoxA(arg1, "This IC is not supported for the…", "Error", 0x10);
            }
        }
    }
    else
    {
        eax = data_435fd4;
        if (eax == 0)
        {
            eax = CWnd::MessageBoxA(arg1, &data_4319cc, "Error", 0x10);
        }
        if (data_435fd4 == 1)
        {
            eax = CWnd::MessageBoxA(arg1, &data_4319ac, "Error", 0x10);
        }
        if (data_435fd4 == 2)
        {
            return CWnd::MessageBoxA(arg1, "The file path is empty. Please s…", "Error", 0x10);
        }
    }
    return eax;
}

int32_t __thiscall sub_406510(char* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4278e8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_10 = arg1;
    CWnd* ebx = arg1;
    CString::CString(&var_10);
    int32_t var_4 = 0;
    if (arg2 == 1)
    {
        if (sub_404a90() == 0)
        {
            if ((GetTickCount() - *(ebx + 0x230d0)) > 0x1388)
            {
                KillTimer(*(ebx + 0x20), 1);
                if (data_435fd4 == 0)
                {
                    CWnd::MessageBoxA(ebx, &data_431a44, &data_43116c, 0x20);
                }
                if (data_435fd4 == 1)
                {
                    CWnd::MessageBoxA(ebx, &data_431a28, &data_431150, 0x20);
                }
                if (data_435fd4 == 2)
                {
                    CWnd::MessageBoxA(ebx, "The communication port is occupi…", "ERROR", 0x20);
                }
                CWnd::EnableWindow(CWnd::GetDlgItem(ebx, 0x486), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(ebx, 0x482), 1);
            }
        }
        else
        {
            sub_404a70();
            KillTimer(*(ebx + 0x20), 1);
            int32_t __saved_esi_1 = 0;
            *(ebx + 0x230d4) = 1;
            CString::Format(&var_10, "%4d S");
            CWnd::SetWindowTextA((ebx + 0x23158), var_10);
            SetTimer(*(ebx + 0x20), 2, 0x3e8, nullptr);
            int32_t eax_5;
            if (ebx != 0)
            {
                eax_5 = *(ebx + 0x20);
            }
            else
            {
                eax_5 = 0;
            }
            *(ebx + 0x23078) = eax_5;
            *(ebx + 0x2307c) = (ebx + 0x60);
            *(ebx + 0x23070) = (ebx + 0x23198);
            *(ebx + 0x23084) = (ebx + 0x230cc);
            *(ebx + 0x2308c) = data_4360b4;
            *(ebx + 0x23090) = data_4360b8;
            __builtin_memcpy((ebx + 0x23094), 0x4360bc, 0x14);
            __builtin_memcpy((ebx + 0x230a8), 0x4360d0, 0x14);
            *(ebx + 0x230bc) = data_4360e4;
            *(ebx + 0x230c0) = data_4360e8;
            *(ebx + 0x230c4) = data_433b18;
            *(ebx + 0x230c8) = data_433b1c;
            int32_t eax_10 = data_433b1c;
            if (eax_10 < 2)
            {
                data_4360ec = AfxBeginThread(sub_4217b0, (ebx + 0x23070), 0, 0, 0, nullptr);
            }
            else
            {
                if ((((((eax_10 == 2 || eax_10 == 4) || eax_10 == 6) || eax_10 == 7) || eax_10 == 8) || eax_10 == 9))
                {
                    data_4360ec = AfxBeginThread(sub_421d20, (ebx + 0x23070), 0, 0, 0, nullptr);
                }
                if ((((((eax_10 != 2 && eax_10 != 4) && eax_10 != 6) && eax_10 != 7) && eax_10 != 8) && eax_10 != 9))
                {
                    if (eax_10 == 3)
                    {
                        data_4360ec = AfxBeginThread(sub_422510, (ebx + 0x23070), 0, 0, 0, nullptr);
                    }
                    else if (eax_10 == 5)
                    {
                        data_4360ec = AfxBeginThread(sub_422ec0, (ebx + 0x23070), 0, 0, 0, nullptr);
                    }
                }
            }
        }
    }
    else if (arg2 == 2)
    {
        int32_t __saved_esi_5 = *(ebx + 0x230d4);
        int32_t __saved_esi_3 = __saved_esi_5;
        *(ebx + 0x230d4) = (__saved_esi_5 + 1);
        CString::Format(&var_10, "%4d S");
        CWnd::SetWindowTextA((ebx + 0x23158), var_10);
    }
    CWnd::Default(ebx);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_21 = CString::~CString(&var_10);
    *fsbase = var_c;
    return eax_21;
}

int32_t __fastcall sub_406800(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427908;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    CString::CString(&var_10);
    int32_t var_4 = 0;
    KillTimer(*(arg1 + 0x20), 2);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x486), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x482), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x4bb), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x4ba), 1);
    int32_t eax_6 = *(arg1 + 0x230cc);
    void* var_1c_1;
    if (eax_6 == 3)
    {
        eax_6 = data_435fd4;
        if (eax_6 == 0)
        {
            CString::operator=(&var_10, &data_431b78);
        }
        if (data_435fd4 == 1)
        {
            CString::operator=(&var_10, &data_431b5c);
        }
        if (data_435fd4 == 2)
        {
            var_1c_1 = "The IC type is not supported at …";
        label_4069a8:
            CString::operator=(&var_10, var_1c_1);
        }
    }
    else if (eax_6 == 2)
    {
        eax_6 = data_435fd4;
        if (eax_6 == 0)
        {
            CString::operator=(&var_10, &data_431b0c);
        }
        if (data_435fd4 == 1)
        {
            CString::operator=(&var_10, &data_431af8);
        }
        if (data_435fd4 == 2)
        {
            var_1c_1 = "The upgrade failed. Please try a…";
            goto label_4069a8;
        }
    }
    else if (eax_6 == 1)
    {
        eax_6 = data_435fd4;
        if (eax_6 == 0)
        {
            CString::operator=(&var_10, &data_431ac0);
        }
        if (data_435fd4 == 1)
        {
            CString::operator=(&var_10, &data_431ab0);
        }
        if (data_435fd4 == 2)
        {
            var_1c_1 = "Failed to open device!";
            goto label_4069a8;
        }
    }
    else if (eax_6 == 0)
    {
        eax_6 = data_435fd4;
        if (eax_6 == 0)
        {
            CString::operator=(&var_10, &data_431a8c);
        }
        if (data_435fd4 == 1)
        {
            CString::operator=(&var_10, &data_431a80);
        }
        if (data_435fd4 == 2)
        {
            var_1c_1 = "Upgrade success!";
            goto label_4069a8;
        }
    }
    char* var_24;
    char* var_20_1;
    uint32_t var_1c_2;
    if (*(arg1 + 0x230cc) == 0)
    {
        var_1c_2 = 0x40;
        var_20_1 = &data_431a68;
        var_24 = var_10;
    }
    else
    {
        var_1c_2 = 0x10;
        var_20_1 = "Error";
        var_24 = var_10;
    }
    CWnd::MessageBoxA(arg1, var_24, var_20_1, var_1c_2);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&var_10);
    *fsbase = var_c;
    return 0;
}

int32_t __fastcall sub_406a00(CDialog* arg1)
{
    CDialog::OnInitDialog(arg1);
    sub_4266f0((arg1 + 0x23198), 0x1aff1a);
    CString::operator=((arg1 + 0x23204), &data_435fe8);
    SendMessageA(*(arg1 + 0x23138), 0x14e, data_433b18, nullptr);
    SendMessageA(*(arg1 + 0x230f8), 0x14e, data_433b1c, nullptr);
    CWnd::UpdateData(arg1, 0);
    if (data_435fd4 == 0)
    {
        CWnd::SetDlgItemTextA(arg1, 0x4bc, &data_431c18);
        CWnd::SetDlgItemTextA(arg1, 0x4bd, &data_431c0c);
        CWnd::SetDlgItemTextA(arg1, 0x4be, &data_431c04);
        CWnd::SetDlgItemTextA(arg1, 0x4bf, &data_431bf8);
        CWnd::SetDlgItemTextA(arg1, 0x482, &data_431bf0);
    }
    if (data_435fd4 == 1)
    {
        CWnd::SetDlgItemTextA(arg1, 0x4bc, &data_431c18);
        CWnd::SetDlgItemTextA(arg1, 0x4bd, &data_431be4);
        CWnd::SetDlgItemTextA(arg1, 0x4be, &data_431bdc);
        CWnd::SetDlgItemTextA(arg1, 0x4bf, &data_431bd0);
        CWnd::SetDlgItemTextA(arg1, 0x482, &data_431bc8);
    }
    if (data_435fd4 == 2)
    {
        CWnd::SetDlgItemTextA(arg1, 0x4bc, "baud rate");
        CWnd::SetDlgItemTextA(arg1, 0x4bd, "chip type");
        CWnd::SetDlgItemTextA(arg1, 0x4be, "Path");
        CWnd::SetDlgItemTextA(arg1, 0x4bf, "Time");
        CWnd::SetDlgItemTextA(arg1, 0x482, "DownLoad");
    }
    return 1;
}

int32_t __fastcall sub_406b90(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    data_435fdc = 0x1f0;
    data_435fd8 = 0xf800;
    data_433b1c = 0xff;
    return sub_411930(*(arg1 + 0x23204));
}

int32_t sub_406bd0() __pure
{
    return;
}

CStatic* __thiscall sub_406be0(CStatic* arg1, char arg2)
{
    CStatic::~CStatic(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

CComboBox* __thiscall sub_406c00(CComboBox* arg1, char arg2)
{
    CComboBox::~CComboBox(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void __thiscall sub_406c20(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

void*** __thiscall sub_406c30(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427a16;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x82, arg2);
    int32_t var_4 = 0;
    sub_416590(&esi[0x8f]);
    var_4 = 1;
    CWnd::CWnd(&esi[0xa6]);
    esi[0xa6] = 0x42ab00;
    var_4 = 2;
    CWnd::CWnd(&esi[0xb6]);
    esi[0xb6] = 0x42ab00;
    var_4 = 3;
    CWnd::CWnd(&esi[0xc6]);
    esi[0xc6] = &data_42adb8;
    var_4 = 4;
    CWnd::CWnd(&esi[0xd6]);
    esi[0xd6] = 0x42ab00;
    var_4 = 5;
    CWnd::CWnd(&esi[0xe6]);
    esi[0xe6] = 0x42ab00;
    var_4 = 6;
    CWnd::CWnd(&esi[0xf6]);
    esi[0xf6] = 0x42ab00;
    var_4 = 7;
    CWnd::CWnd(&esi[0x106]);
    esi[0x106] = 0x42ab00;
    var_4 = 8;
    CWnd::CWnd(&esi[0x116]);
    esi[0x116] = 0x42ab00;
    var_4 = 9;
    CWnd::CWnd(&esi[0x126]);
    esi[0x126] = 0x42ab00;
    var_4 = 0xa;
    CWnd::CWnd(&esi[0x136]);
    esi[0x136] = 0x42ab00;
    var_4 = 0xb;
    CWnd::CWnd(&esi[0x146]);
    esi[0x146] = 0x42ab00;
    var_4 = 0xc;
    CString::CString(&esi[0x15f]);
    var_4 = 0xd;
    CString::CString(&esi[0x174]);
    var_4 = 0xe;
    CString::CString(&esi[0x175]);
    var_4 = 0xf;
    CString::CString(&esi[0x184]);
    var_4 = 0x10;
    CString::CString(&esi[0x18c]);
    *esi = &data_42ace0;
    __builtin_memset(&esi[0x156], 0, 0x20);
    var_4 = 0x11;
    esi[0x15e] = 0x32;
    CString::operator=(&esi[0x15f], &data_435ef0);
    __builtin_memcpy(&esi[0x160], "\xb8\x0b\x00\x00\x36\x10\x00\x00\x9a\x10\x00\x00\x36\x10\x00\x00\x05\x00\x00\x00\xc4\x09\x00\x00\x05\x00\x00\x00\xf0\x0a\x00\x00\x88\x13\x00\x00\x05\x00\x00\x00\x0f\x00\x00\x00\x41\x00\x00\x00\x05\x00\x00\x00\x37\x00\x00\x00", 0x38);
    esi[0x16e] = 0xffffffff;
    esi[0x16f] = 5;
    esi[0x170] = 5;
    esi[0x171] = 0;
    esi[0x172] = 0x1f40;
    esi[0x173] = 0;
    CString::operator=(&esi[0x174], &data_435ef0);
    CString::operator=(&esi[0x175], &data_431c2c);
    __builtin_memcpy(&esi[0x176], "\x10\x27\x00\x00\x05\x00\x00\x00\x20\x00\x00\x00\x46\x00\x00\x00\x04\x00\x00\x00\x3c\x00\x00\x00\xf6\xff\xff\xff", 0x1c);
    esi[0x17d] = 0;
    __builtin_memcpy(&esi[0x17e], "\x05\x00\x00\x00\x10\x27\x00\x00\x1e\x00\x00\x00\xcc\x10\x00\x00\xc4\x09\x00\x00", 0x14);
    esi[0x183] = 0xa;
    CString::operator=(&esi[0x184], "ABCDEF");
    esi[0x185] = 0;
    __builtin_memcpy(&esi[0x186], "\x90\xe2\x00\x00\x05\x00\x00\x00\xd8\xd6\x00\x00\xf8\xa7\x00\x00\x05\x00\x00\x00\xc8\xaf\x00\x00", 0x18);
    CString::operator=(&esi[0x18c], &data_431c20);
    int32_t ecx_22 = var_c;
    esi[0x18d] = 0;
    esi[0x18f] = 0;
    esi[0x194] = 0;
    esi[0x195] = 0;
    esi[0x198] = 0;
    esi[0x199] = 0;
    esi[0x19a] = 0;
    esi[0x1a1] = 0;
    esi[0x1a2] = 0;
    esi[0x1a3] = 0;
    esi[0x1a4] = 0;
    esi[0x18e] = 0xe10;
    esi[0x190] = 0xf6e;
    esi[0x191] = 0xea6;
    esi[0x192] = 0xdfc;
    esi[0x193] = 0xd48;
    esi[0x196] = 0x8fc;
    esi[0x197] = 0xa;
    __builtin_memcpy(&esi[0x19b], "\xd2\x0f\x00\x00\x0a\x0f\x00\x00\x60\x0e\x00\x00\xac\x0d\x00\x00\xe4\x0c\x00\x00\x04\x10\x00\x00", 0x18);
    *fsbase = ecx_22;
    return esi;
}

CDialog* __thiscall sub_4070a0(CDialog* arg1, char arg2)
{
    sub_4070d0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_4070c0(void* arg1)
{
    /* tailcall */
    return sub_416a80((arg1 + 0x1c));
}

int32_t __fastcall sub_4070d0(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427b08;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 0x10;
    CString::~CString((arg1 + 0x630));
    var_4 = 0xf;
    CString::~CString((arg1 + 0x610));
    var_4 = 0xe;
    CString::~CString((arg1 + 0x5d4));
    var_4 = 0xd;
    CString::~CString((arg1 + 0x5d0));
    var_4 = 0xc;
    CString::~CString((arg1 + 0x57c));
    var_4 = 0xb;
    CComboBox::~CComboBox((arg1 + 0x518));
    var_4 = 0xa;
    CComboBox::~CComboBox((arg1 + 0x4d8));
    var_4 = 9;
    CComboBox::~CComboBox((arg1 + 0x498));
    var_4 = 8;
    CComboBox::~CComboBox((arg1 + 0x458));
    var_4 = 7;
    CComboBox::~CComboBox((arg1 + 0x418));
    var_4 = 6;
    CComboBox::~CComboBox((arg1 + 0x3d8));
    var_4 = 5;
    CComboBox::~CComboBox((arg1 + 0x398));
    var_4 = 4;
    CComboBox::~CComboBox((arg1 + 0x358));
    var_4 = 3;
    CProgressCtrl::~CProgressCtrl((arg1 + 0x318));
    var_4 = 2;
    CComboBox::~CComboBox((arg1 + 0x2d8));
    var_4 = 1;
    CComboBox::~CComboBox((arg1 + 0x298));
    var_4 = 0;
    sub_416a80((arg1 + 0x23c));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_407220(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x473, (arg1 + 0x318));
    DDX_Control(arg2, 0x441, (arg1 + 0x358));
    DDX_Control(arg2, 0x43e, (arg1 + 0x398));
    DDX_Control(arg2, 0x43d, (arg1 + 0x3d8));
    DDX_Control(arg2, 0x443, (arg1 + 0x418));
    DDX_Control(arg2, 0x442, (arg1 + 0x458));
    DDX_Control(arg2, 0x43c, (arg1 + 0x498));
    DDX_Control(arg2, 0x43b, (arg1 + 0x4d8));
    DDX_Control(arg2, 0x456, (arg1 + 0x518));
    DDX_Check(arg2, 0x44f, (arg1 + 0x558));
    DDX_Check(arg2, 0x44c, (arg1 + 0x55c));
    DDX_Check(arg2, 0x452, (arg1 + 0x560));
    DDX_Check(arg2, 0x450, (arg1 + 0x564));
    DDX_Check(arg2, 0x451, (arg1 + 0x568));
    DDX_Check(arg2, 0x43a, (arg1 + 0x56c));
    DDX_Check(arg2, 0x44e, (arg1 + 0x570));
    DDX_Check(arg2, 0x44d, (arg1 + 0x574));
    DDX_Text(arg2, 0x454, (arg1 + 0x578));
    DDX_Text(arg2, 0x45c, (arg1 + 0x57c));
    DDX_Text(arg2, 0x462, (arg1 + 0x580));
    DDX_Text(arg2, 0x461, (arg1 + 0x584));
    DDX_Text(arg2, 0x41c, (arg1 + 0x588));
    DDX_Text(arg2, 0x41d, (arg1 + 0x58c));
    DDX_Text(arg2, 0x41e, (arg1 + 0x590));
    DDX_Text(arg2, 0x41f, (arg1 + 0x594));
    DDX_Text(arg2, 0x421, (arg1 + 0x598));
    DDX_Text(arg2, 0x420, (arg1 + 0x59c));
    DDX_Text(arg2, 0x434, (arg1 + 0x5a0));
    DDX_Text(arg2, 0x436, (arg1 + 0x5a4));
    DDX_Text(arg2, 0x435, (arg1 + 0x5a8));
    DDX_Text(arg2, 0x428, (arg1 + 0x5ac));
    DDX_Text(arg2, 0x42a, (arg1 + 0x5b0));
    DDX_Text(arg2, 0x429, (arg1 + 0x5b4));
    DDX_Text(arg2, 0x42b, (arg1 + 0x5b8));
    DDX_Text(arg2, 0x42d, (arg1 + 0x5bc));
    DDX_Text(arg2, 0x42c, (arg1 + 0x5c0));
    DDX_Text(arg2, 0x406, (arg1 + 0x5c4));
    DDX_Text(arg2, 0x460, (arg1 + 0x5c8));
    DDX_Text(arg2, 0x404, (arg1 + 0x5cc));
    DDV_MinMaxUInt(arg2, *(arg1 + 0x5cc), 1, 0x1f);
    DDX_Text(arg2, 0x45a, (arg1 + 0x5d0));
    DDX_Text(arg2, 0x463, (arg1 + 0x5d4));
    DDX_Text(arg2, 0x437, (arg1 + 0x5d8));
    DDX_Text(arg2, 0x439, (arg1 + 0x5dc));
    DDX_Text(arg2, 0x438, (arg1 + 0x5e0));
    DDX_Text(arg2, 0x42e, (arg1 + 0x5e4));
    DDX_Text(arg2, 0x430, (arg1 + 0x5e8));
    DDX_Text(arg2, 0x42f, (arg1 + 0x5ec));
    DDX_Text(arg2, 0x431, (arg1 + 0x5f0));
    DDX_Text(arg2, 0x432, (arg1 + 0x5f4));
    DDX_Text(arg2, 0x433, (arg1 + 0x5f8));
    DDX_Text(arg2, 0x3ff, (arg1 + 0x5fc));
    DDX_Text(arg2, 0x468, (arg1 + 0x600));
    DDX_Text(arg2, 0x440, (arg1 + 0x604));
    DDX_Text(arg2, 0x43f, (arg1 + 0x608));
    DDX_Text(arg2, 0x469, (arg1 + 0x60c));
    DDX_Text(arg2, 0x459, (arg1 + 0x610));
    DDX_Text(arg2, 0x403, (arg1 + 0x614));
    DDV_MinMaxUInt(arg2, *(arg1 + 0x614), 1, 0xc);
    DDX_Text(arg2, 0x422, (arg1 + 0x618));
    DDX_Text(arg2, 0x424, (arg1 + 0x61c));
    DDX_Text(arg2, 0x423, (arg1 + 0x620));
    DDX_Text(arg2, 0x425, (arg1 + 0x624));
    DDX_Text(arg2, 0x427, (arg1 + 0x628));
    DDX_Text(arg2, 0x426, (arg1 + 0x62c));
    DDX_Text(arg2, 0x455, (arg1 + 0x630));
    DDX_Text(arg2, 0x458, (arg1 + 0x634));
    DDX_Text(arg2, 0x453, (arg1 + 0x638));
    DDX_Text(arg2, 0x402, (arg1 + 0x63c));
    DDX_Text(arg2, 0x464, (arg1 + 0x640));
    DDX_Text(arg2, 0x465, (arg1 + 0x644));
    DDX_Text(arg2, 0x466, (arg1 + 0x648));
    DDX_Text(arg2, 0x467, (arg1 + 0x64c));
    DDX_Check(arg2, 0x45d, (arg1 + 0x650));
    DDX_Check(arg2, 0x45e, (arg1 + 0x654));
    DDX_Text(arg2, 0x45f, (arg1 + 0x658));
    DDX_Text(arg2, 0x476, (arg1 + 0x65c));
    DDX_Check(arg2, 0x542, (arg1 + 0x660));
    DDX_Check(arg2, 0x543, (arg1 + 0x664));
    DDX_Check(arg2, 0x477, (arg1 + 0x668));
    DDX_Text(arg2, 0x478, (arg1 + 0x66c));
    DDX_Text(arg2, 0x479, (arg1 + 0x670));
    DDX_Text(arg2, 0x47a, (arg1 + 0x674));
    DDX_Text(arg2, 0x47b, (arg1 + 0x678));
    DDX_Text(arg2, 0x47c, (arg1 + 0x67c));
    DDX_Text(arg2, 0x47f, (arg1 + 0x680));
    DDX_Check(arg2, 0x457, (arg1 + 0x684));
    DDX_Check(arg2, 0x45b, (arg1 + 0x688));
    DDX_Text(arg2, 0x47e, (arg1 + 0x68c));
    return DDX_Check(arg2, 0x570, (arg1 + 0x690));
}

int32_t sub_407880() __pure
{
    return CDialog::messageMap;
}

int32_t sub_407890() __pure
{
    return 0x42abd0;
}

int32_t __fastcall sub_4078a0(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427b28;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* esi = arg1;
    CDialog::OnInitDialog(arg1);
    void lpRect;
    GetClientRect(*(esi + 0x20), &lpRect);
    *(esi + 0x28c) = 0x32;
    *(esi + 0x290) = 5;
    LPARAM lParam;
    CString::CString(&lParam);
    int32_t ebx = 0;
    int32_t var_4 = 0;
    int32_t lpSystemTime;
    GetLocalTime(&lpSystemTime);
    uint32_t eax_2 = lpSystemTime;
    int16_t var_2a;
    *(esi + 0x614) = var_2a;
    *(esi + 0x63c) = eax_2;
    int16_t var_26;
    *(esi + 0x5cc) = var_26;
    CWnd::UpdateData(esi, 0);
    SendMessageA(*(esi + 0x538), 0x14e, 0xc, nullptr);
    CWnd::ShowWindow(CWnd::GetDlgItem(esi, 0x419), 5);
    CWnd::SetWindowTextA(CWnd::GetDlgItem(esi, 0x4b2), &data_431c34);
    CWnd::SetWindowTextA(CWnd::GetDlgItem(esi, 0x4b3), &data_431c30);
    sub_40e8d0(esi);
    SendMessageA(*(esi + 0x3f8), 0x14e, 5, nullptr);
    SendMessageA(*(esi + 0x3b8), 0x14e, 3, nullptr);
    int32_t i_1 = 0xc8;
    int32_t i;
    do
    {
        int32_t var_44_2 = ebx;
        CString::Format(&lParam, &data_431074);
        SendMessageA(*(esi + 0x378), 0x143, nullptr, lParam);
        ebx = (ebx + 1);
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    SendMessageA(*(esi + 0x378), 0x14e, 5, nullptr);
    SendMessageA(*(esi + 0x438), 0x14e, 2, nullptr);
    SendMessageA(*(esi + 0x478), 0x14e, 3, nullptr);
    SendMessageA(*(esi + 0x4f8), 0x14e, 8, nullptr);
    SendMessageA(*(esi + 0x4b8), 0x14e, 6, nullptr);
    *(esi + 0x574) = 1;
    CWnd::ShowWindow(CWnd::GetDlgItem(esi, 0x477), 5);
    CWnd::UpdateData(esi, 0);
    SetTimer(*(esi + 0x20), 2, 0x1f4, nullptr);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&lParam);
    *fsbase = var_c;
    return 1;
}

uint32_t* __fastcall j_sub_407ac0(CWnd* arg1)
{
    /* tailcall */
    return sub_407ac0(arg1);
}

uint32_t* __fastcall sub_407ac0(CWnd* arg1)
{
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x418), 0);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x419), 0);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41a), 0);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41b), 0);
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 1, 0x14, nullptr);
}

int32_t __thiscall sub_407b30(CWnd* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427b48;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    class CString var_30;
    CString::CString(&var_30);
    int32_t var_4 = 0;
    if (arg2 == 1)
    {
        if (sub_404a90() == 0)
        {
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                KillTimer(*(arg1 + 0x20), 1);
                if (data_435fd4 == 0)
                {
                    CWnd::MessageBoxA(arg1, &data_431c9c, "Prompt", 0x20);
                }
                if (data_435fd4 == 1)
                {
                    CWnd::MessageBoxA(arg1, &data_431c80, "Prompt", 0x20);
                }
                if (data_435fd4 == 2)
                {
                    CWnd::MessageBoxA(arg1, "The communication port is tempor…", "Prompt", 0x20);
                }
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x418), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x419), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41a), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41b), 1);
            }
        }
        else
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 1);
            int32_t eax_4;
            if (arg1 != 0)
            {
                eax_4 = *(arg1 + 0x20);
            }
            else
            {
                eax_4 = 0;
            }
            *(arg1 + 0x230) = eax_4;
            *(arg1 + 0x238) = (arg1 + 0x64);
            *(arg1 + 0x220) = (arg1 + 0x318);
            *(arg1 + 0x228) = (arg1 + 0x21c);
            *(arg1 + 0x234) = (arg1 + 0x294);
            *(arg1 + 0x240) = data_4360b4;
            *(arg1 + 0x244) = data_4360b8;
            __builtin_memcpy((arg1 + 0x248), 0x4360bc, 0x14);
            __builtin_memcpy((arg1 + 0x25c), 0x4360d0, 0x14);
            *(arg1 + 0x270) = data_4360e4;
            *(arg1 + 0x274) = data_4360e8;
            data_4360ec = AfxBeginThread(sub_41f5a0, (arg1 + 0x220), 0, 0, 0, nullptr);
        }
    }
    else if ((arg2 == 2 && data_436114 != 0))
    {
        data_436114 = 0;
        CWnd::UpdateData(arg1, 1);
        int32_t __saved_edi;
        void var_2b;
        if (*(arg1 + 0x684) != 0)
        {
            CWnd::UpdateData(arg1, 1);
            void* ecx_18 = *(arg1 + 0x57c);
            char eax_15 = *(ecx_18 - 8);
            arg2 = eax_15;
            if (eax_15 > 0x1f)
            {
                arg2 = 0x1f;
            }
            if ((eax_15 > 0x1f || (eax_15 <= 0x1f && eax_15 > 3)))
            {
                uint32_t i_10 = arg2;
                char i_12 = *((i_10 + ecx_18) - 1);
                if ((i_12 >= 0x30 && i_12 <= 0x39))
                {
                    i_12 = *((i_10 + ecx_18) - 2);
                    if ((i_12 >= 0x30 && i_12 <= 0x39))
                    {
                        i_12 = *((i_10 + ecx_18) - 3);
                        if ((i_12 >= 0x30 && i_12 <= 0x39))
                        {
                            i_12 = arg2;
                            char i_8 = i_12;
                            if (i_12 >= 1)
                            {
                                void* esi_1 = &var_2b;
                                uint32_t i_4 = i_10;
                                uint32_t i;
                                do
                                {
                                    i_12 = *ecx_18;
                                    ecx_18 = (ecx_18 + 1);
                                    *esi_1 = i_12;
                                    esi_1 = (esi_1 + 1);
                                    i = i_4;
                                    i_4 = (i_4 - 1);
                                } while (i != 1);
                            }
                            char* ecx_19 = ((&__saved_edi + i_10) + 0x14);
                            i_10 = ecx_19[0xfffffffe];
                            uint32_t edx_5 = (i_10 * 5);
                            i_10 = ecx_19[0xffffffff];
                            int32_t eax_17;
                            eax_17 = *ecx_19;
                            uint32_t esi_3 = ((eax_17 + ((i_10 + (edx_5 << 1)) * 0xa)) - 0x14cf);
                            int32_t eax_22;
                            int32_t edx_10;
                            edx_10 = HIGHD((esi_3 / 0x64));
                            eax_22 = LOWD((esi_3 / 0x64));
                            ecx_19[0xfffffffe] = ((COMBINE(edx_10, eax_22) % 0xa) + 0x30);
                            int32_t eax_27;
                            int32_t edx_15;
                            edx_15 = HIGHD((esi_3 / 0xa));
                            eax_27 = LOWD((esi_3 / 0xa));
                            ecx_19[0xffffffff] = ((COMBINE(edx_15, eax_27) % 0xa) + 0x30);
                            int32_t eax_29;
                            int32_t edx_17;
                            edx_17 = HIGHD(esi_3);
                            eax_29 = LOWD(esi_3);
                            *ecx_19 = ((COMBINE(edx_17, eax_29) % 0xa) + 0x30);
                            CString::operator=((arg1 + 0x57c), &data_435ef0);
                            if (i_8 > 0)
                            {
                                void* esi_4 = &var_2b;
                                uint32_t i_5 = i_8;
                                uint32_t i_1;
                                do
                                {
                                    int32_t eax_32;
                                    eax_32 = *esi_4;
                                    int32_t var_44_1 = eax_32;
                                    CString::Format(&var_30, &data_431c3c);
                                    CString::operator+=((arg1 + 0x57c), &var_30);
                                    esi_4 = (esi_4 + 1);
                                    i_1 = i_5;
                                    i_5 = (i_5 - 1);
                                } while (i_1 != 1);
                            }
                        }
                    }
                }
            }
            CWnd::UpdateData(arg1, 0);
        }
        if (*(arg1 + 0x688) != 0)
        {
            CWnd::UpdateData(arg1, 1);
            void* ecx_24 = *(arg1 + 0x5d0);
            char eax_34 = *(ecx_24 - 8);
            arg2 = eax_34;
            if (eax_34 > 0x1f)
            {
                arg2 = 0x1f;
            }
            if ((eax_34 > 0x1f || (eax_34 <= 0x1f && eax_34 > 3)))
            {
                uint32_t i_11 = arg2;
                int32_t edx_19;
                edx_19 = *((ecx_24 + i_11) - 1);
                if ((edx_19 >= 0x30 && edx_19 <= 0x39))
                {
                    edx_19 = *((ecx_24 + i_11) - 2);
                    if ((edx_19 >= 0x30 && edx_19 <= 0x39))
                    {
                        edx_19 = *((ecx_24 + i_11) - 3);
                        if ((edx_19 >= 0x30 && edx_19 <= 0x39))
                        {
                            edx_19 = arg2;
                            char i_9 = edx_19;
                            if (edx_19 >= 1)
                            {
                                void* esi_5 = &var_2b;
                                uint32_t i_6 = i_11;
                                uint32_t i_2;
                                do
                                {
                                    edx_19 = *ecx_24;
                                    ecx_24 = (ecx_24 + 1);
                                    *esi_5 = edx_19;
                                    esi_5 = (esi_5 + 1);
                                    i_2 = i_6;
                                    i_6 = (i_6 - 1);
                                } while (i_2 != 1);
                            }
                            void var_2d;
                            edx_19 = *(&var_2d + i_11);
                            char* ecx_25 = ((&__saved_edi + i_11) + 0x14);
                            i_11 = ecx_25[0xfffffffe];
                            int32_t eax_37 = (edx_19 + (i_11 * 0xa));
                            edx_19 = *ecx_25;
                            uint32_t esi_7 = ((edx_19 + (eax_37 * 0xa)) - 0x14cf);
                            int32_t eax_43;
                            int32_t edx_23;
                            edx_23 = HIGHD((esi_7 / 0x64));
                            eax_43 = LOWD((esi_7 / 0x64));
                            ecx_25[0xfffffffe] = ((COMBINE(edx_23, eax_43) % 0xa) + 0x30);
                            int32_t eax_48;
                            int32_t edx_28;
                            edx_28 = HIGHD((esi_7 / 0xa));
                            eax_48 = LOWD((esi_7 / 0xa));
                            ecx_25[0xffffffff] = ((COMBINE(edx_28, eax_48) % 0xa) + 0x30);
                            int32_t eax_50;
                            int32_t edx_30;
                            edx_30 = HIGHD(esi_7);
                            eax_50 = LOWD(esi_7);
                            *ecx_25 = ((COMBINE(edx_30, eax_50) % 0xa) + 0x30);
                            CString::operator=((arg1 + 0x5d0), &data_435ef0);
                            if (i_9 > 0)
                            {
                                void* esi_8 = &var_2b;
                                uint32_t i_7 = i_9;
                                uint32_t i_3;
                                do
                                {
                                    int32_t eax_53;
                                    eax_53 = *esi_8;
                                    int32_t var_44_3 = eax_53;
                                    CString::Format(&var_30, &data_431c3c);
                                    CString::operator+=((arg1 + 0x5d0), &var_30);
                                    esi_8 = (esi_8 + 1);
                                    i_3 = i_7;
                                    i_7 = (i_7 - 1);
                                } while (i_3 != 1);
                            }
                        }
                    }
                }
            }
            CWnd::UpdateData(arg1, 0);
        }
    }
    CWnd::Default(arg1);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_54 = CString::~CString(&var_30);
    *fsbase = var_c;
    return eax_54;
}

int32_t __fastcall sub_408020(CWnd* arg1)
{
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x418), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x419), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41a), 1);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x41b), 1);
    if (*(arg1 + 0x21c) == 1)
    {
        sub_408110(arg1, (arg1 + 0x64));
        return 0;
    }
    if (*(arg1 + 0x294) != 0)
    {
        CWnd::MessageBoxA(arg1, &data_431d14, "Prompt", 0x20);
        return 0;
    }
    int32_t eax_6;
    eax_6 = data_435fd4;
    if (eax_6 == 0)
    {
        CWnd::MessageBoxA(arg1, &data_431cfc, "Prompt", 0x20);
    }
    if (data_435fd4 == 1)
    {
        CWnd::MessageBoxA(arg1, &data_431ce4, "Prompt", 0x20);
    }
    if (data_435fd4 == 2)
    {
        CWnd::MessageBoxA(arg1, "Error reading parameter! Please …", "Prompt", 0x20);
    }
    return 0;
}

int32_t __thiscall sub_408110(CWnd* arg1, int32_t* arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427b68;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_58;
    CString::CString(&var_58);
    int32_t* edi = arg2;
    int32_t var_4 = 0;
    *(arg1 + 0x578) = edi[0x1b];
    int32_t eax_1;
    eax_1 = edi[0x59];
    char i;
    if (eax_1 == 0)
    {
        CString::operator=((arg1 + 0x57c), &data_435ef0);
    }
    else
    {
        CString::operator=((arg1 + 0x57c), &data_435ef0);
        i = 0;
        arg2 = 0;
        if (edi[0x59] > 0)
        {
            do
            {
                int32_t edx_1;
                edx_1 = *((arg2 + edi) + 0x165);
                int32_t var_6c_1 = edx_1;
                CString::Format(&var_58, &data_431c3c);
                CString::operator+=((arg1 + 0x57c), &var_58);
                i = (i + 1);
                arg2 = i;
            } while (i < edi[0x59]);
        }
    }
    *(arg1 + 0x580) = edi[3];
    *(arg1 + 0x584) = edi[2];
    *(arg1 + 0x588) = edi[0x14];
    *(arg1 + 0x58c) = edi[0x15];
    int32_t eax_5;
    eax_5 = *(edi + 0x8e);
    *(arg1 + 0x590) = eax_5;
    *(arg1 + 0x594) = edi[0x16];
    int32_t edx_4;
    edx_4 = edi[0x23];
    *(arg1 + 0x598) = edx_4;
    *(arg1 + 0x59c) = edi[0x17];
    *(arg1 + 0x5a0) = (edi[0x18] * 0xa);
    int32_t edx_5;
    edx_5 = edi[0x24];
    *(arg1 + 0x5a4) = edx_5;
    int32_t eax_8;
    eax_8 = *(edi + 0x92);
    *(arg1 + 0x5a8) = eax_8;
    int32_t eax_9;
    int32_t edx_6;
    edx_6 = HIGHD((0xcccccccd * (edi[8] - 0xaab)));
    eax_9 = LOWD((0xcccccccd * (edi[8] - 0xaab)));
    *(arg1 + 0x5ac) = (edx_6 >> 3);
    int32_t edx_8;
    edx_8 = *(edi + 0x82);
    *(arg1 + 0x5b0) = edx_8;
    int32_t eax_10;
    int32_t edx_9;
    edx_9 = HIGHD((0xcccccccd * (edi[9] - 0xaab)));
    eax_10 = LOWD((0xcccccccd * (edi[9] - 0xaab)));
    *(arg1 + 0x5b4) = (edx_9 >> 3);
    int32_t eax_11;
    int32_t edx_11;
    edx_11 = HIGHD((0x66666667 * (edi[0xa] - 0xaab)));
    eax_11 = LOWD((0x66666667 * (edi[0xa] - 0xaab)));
    int32_t edx_12 = (edx_11 >> 2);
    *(arg1 + 0x5b8) = (edx_12 + (edx_12 >> 0x1f));
    int32_t ecx_16;
    ecx_16 = edi[0x20];
    *(arg1 + 0x5bc) = ecx_16;
    int32_t eax_14;
    int32_t edx_14;
    edx_14 = HIGHD((0x66666667 * (edi[0xb] - 0xaab)));
    eax_14 = LOWD((0x66666667 * (edi[0xb] - 0xaab)));
    int32_t edx_15 = (edx_14 >> 2);
    *(arg1 + 0x5c0) = (edx_15 + (edx_15 >> 0x1f));
    *(arg1 + 0x5c4) = edi[7];
    *(arg1 + 0x5c8) = (edi[1] * 0xa);
    *(arg1 + 0x68c) = edi[0x36];
    CString::operator=((arg1 + 0x5d0), &data_435ef0);
    int16_t eax_19 = edi[0x49];
    if (eax_19 != 0)
    {
        i = 0;
        if ((eax_19 + 1) > 0)
        {
            uint32_t i_1 = 0;
            int32_t ecx_23;
            do
            {
                int32_t ecx_21;
                ecx_21 = *((edi + (i_1 << 1)) + 0x126);
                int32_t var_6c_3 = ecx_21;
                CString::Format(&var_58, &data_431c3c);
                CString::operator+=((arg1 + 0x5d0), &var_58);
                i = (i + 1);
                ecx_23 = edi[0x49];
                arg2 = i;
                i_1 = arg2;
            } while (i_1 < (ecx_23 + 1));
        }
    }
    int32_t var_50 = 0;
    int32_t var_54 = edi[4];
    CString::Format((arg1 + 0x5d4), "%0.1f");
    *(arg1 + 0x5d8) = (0xa0000 - (edi[0x19] * 0xa));
    int32_t eax_25;
    eax_25 = edi[0x25];
    *(arg1 + 0x5dc) = eax_25;
    int32_t ecx_27;
    ecx_27 = *(edi + 0x96);
    *(arg1 + 0x5e0) = ecx_27;
    int32_t eax_26;
    int32_t edx_23;
    edx_23 = HIGHD((0xcccccccd * (edi[0xc] - 0xaab)));
    eax_26 = LOWD((0xcccccccd * (edi[0xc] - 0xaab)));
    *(arg1 + 0x5e4) = (edx_23 >> 3);
    int32_t eax_27;
    eax_27 = *(edi + 0x86);
    *(arg1 + 0x5e8) = eax_27;
    int32_t eax_28;
    int32_t edx_25;
    edx_25 = HIGHD((0xcccccccd * (edi[0xd] - 0xaab)));
    eax_28 = LOWD((0xcccccccd * (edi[0xd] - 0xaab)));
    *(arg1 + 0x5ec) = (edx_25 >> 3);
    int32_t eax_29;
    int32_t edx_27;
    edx_27 = HIGHD((0x66666667 * (edi[0xe] - 0xaab)));
    eax_29 = LOWD((0x66666667 * (edi[0xe] - 0xaab)));
    int32_t edx_28 = (edx_27 >> 2);
    *(arg1 + 0x5f0) = (edx_28 + (edx_28 >> 0x1f));
    int32_t eax_32;
    int32_t edx_30;
    edx_30 = HIGHD((0x66666667 * (edi[0xf] - 0xaab)));
    eax_32 = LOWD((0x66666667 * (edi[0xf] - 0xaab)));
    int32_t edx_31 = (edx_30 >> 2);
    *(arg1 + 0x5f4) = (edx_31 + (edx_31 >> 0x1f));
    int32_t edx_33;
    edx_33 = edi[0x21];
    *(arg1 + 0x5f8) = edx_33;
    *(arg1 + 0x5fc) = (*edi * 0xa);
    *(arg1 + 0x600) = edi[0x2a];
    *(arg1 + 0x60c) = edi[0x2b];
    CString::operator=((arg1 + 0x610), &data_435ef0);
    int16_t eax_36 = edi[0x39];
    if (eax_36 != 0)
    {
        i = 0;
        if ((eax_36 + 1) > 0)
        {
            uint32_t i_2 = 0;
            int32_t ecx_40;
            do
            {
                int32_t ecx_38;
                ecx_38 = *((edi + (i_2 << 1)) + 0xe6);
                int32_t var_6c_5 = ecx_38;
                CString::Format(&var_58, &data_431c3c);
                CString::operator+=((arg1 + 0x610), &var_58);
                i = (i + 1);
                ecx_40 = edi[0x39];
                arg2 = i;
                i_2 = arg2;
            } while (i_2 < (ecx_40 + 1));
        }
    }
    int32_t ebx = 0;
    *(arg1 + 0x614) = ((edi[5] >> 5) & 0xf);
    int32_t var_50_1 = 0;
    *(arg1 + 0x618) = (edi[0x10] * 0xa);
    int32_t ecx_42;
    ecx_42 = *(edi + 0x8a);
    *(arg1 + 0x61c) = ecx_42;
    *(arg1 + 0x620) = (edi[0x11] * 0xa);
    *(arg1 + 0x624) = (edi[0x12] * 0xa);
    int32_t ecx_43;
    ecx_43 = edi[0x22];
    *(arg1 + 0x628) = ecx_43;
    *(arg1 + 0x62c) = (edi[0x13] * 0xa);
    int32_t var_54_1 = edi[0x26];
    CString::Format((arg1 + 0x630), "%0.1f");
    *(arg1 + 0x634) = edi[6];
    *(arg1 + 0x638) = edi[0x1a];
    void lpSystemTime;
    GetLocalTime(&lpSystemTime);
    int32_t edx_45 = ((edi[5] >> 9) & 0x7f);
    *(arg1 + 0x63c) = edx_45;
    *(arg1 + 0x5cc) = (edi[5] & 0x1f);
    *(arg1 + 0x614) = ((edi[5] >> 5) & 0xf);
    *(arg1 + 0x63c) = (edx_45 + 0x7d0);
    *(arg1 + 0x640) = edi[0x2c];
    *(arg1 + 0x644) = edi[0x2d];
    *(arg1 + 0x648) = edi[0x2e];
    *(arg1 + 0x64c) = edi[0x2f];
    *(arg1 + 0x680) = edi[0x30];
    *(arg1 + 0x66c) = edi[0x31];
    *(arg1 + 0x670) = edi[0x32];
    *(arg1 + 0x674) = edi[0x33];
    *(arg1 + 0x678) = edi[0x34];
    *(arg1 + 0x67c) = edi[0x35];
    *(arg1 + 0x658) = edi[0x37];
    *(arg1 + 0x65c) = edi[0x38];
    SendMessageA(*(arg1 + 0x538), 0x14e, (edi[0x29] - 3), nullptr);
    *(arg1 + 0x604) = edi[0x1c];
    *(arg1 + 0x608) = edi[0x1d];
    WPARAM wParam_2;
    wParam_2 = *(edi + 0x7e);
    SendMessageA(*(arg1 + 0x378), 0x14e, wParam_2, nullptr);
    CWnd::UpdateData(arg1, 0);
    sub_40e8d0(arg1);
    LRESULT eax_61;
    eax_61 = data_43610a;
    if (eax_61 == 0)
    {
        eax_61 = edi[0x1f];
        eax_61 = (eax_61 >> 4);
        SendMessageA(*(arg1 + 0x478), 0x14e, (eax_61 & 3), nullptr);
        int32_t edx_52;
        edx_52 = edi[0x1f];
        edx_52 = (edx_52 >> 6);
        SendMessageA(*(arg1 + 0x438), 0x14e, (edx_52 & 3), nullptr);
        int32_t ecx_56;
        ecx_56 = edi[0x1e];
        ecx_56 = (ecx_56 >> 3);
        SendMessageA(*(arg1 + 0x3b8), 0x14e, (ecx_56 & 3), nullptr);
        if ((edi[0x1e] & 0x80) == 0)
        {
            *(arg1 + 0x56c) = 0;
        }
        else
        {
            *(arg1 + 0x56c) = 1;
        }
        LRESULT eax_64;
        eax_64 = edi[0x1e];
        SendMessageA(*(arg1 + 0x3f8), 0x14e, (eax_64 & 7), nullptr);
        int32_t edx_55;
        edx_55 = *(edi + 0x7a);
        edx_55 = (edx_55 >> 4);
        SendMessageA(*(arg1 + 0x4b8), 0x14e, (edx_55 & 7), nullptr);
        int32_t ecx_59;
        ecx_59 = *(edi + 0x7a);
        SendMessageA(*(arg1 + 0x4f8), 0x14e, (ecx_59 & 0xf), nullptr);
        eax_61 = data_43610a;
    }
    if ((((((eax_61 == 1 || eax_61 == 2) || eax_61 == 3) || eax_61 == 4) || eax_61 == 5) || eax_61 == 6))
    {
        eax_61 = edi[0x1f];
        SendMessageA(*(arg1 + 0x438), 0x14e, (eax_61 & 0xf), nullptr);
        int32_t edx_58;
        edx_58 = edi[0x1f];
        edx_58 = (edx_58 >> 4);
        SendMessageA(*(arg1 + 0x478), 0x14e, (edx_58 & 0xf), nullptr);
        int32_t ecx_62;
        ecx_62 = edi[0x1e];
        ecx_62 = (ecx_62 >> 4);
        SendMessageA(*(arg1 + 0x4f8), 0x14e, (ecx_62 & 0xf), nullptr);
        LRESULT eax_69;
        eax_69 = edi[0x1e];
        int32_t ecx_65;
        int32_t edx_61;
        ecx_65 = SendMessageA(*(arg1 + 0x4b8), 0x14e, (eax_69 & 0xf), nullptr);
        HWND hWnd;
        WPARAM wParam;
        if (data_43610a != 6)
        {
            ecx_65 = *(edi + 0x7a);
            ecx_65 = (ecx_65 >> 4);
            wParam = (ecx_65 & 0xf);
            int32_t var_74_5 = 0x14e;
            hWnd = *(arg1 + 0x3f8);
        }
        else
        {
            edx_61 = edi[0x1e];
            edx_61 = (edx_61 >> 4);
            wParam = (edx_61 & 0xf);
            int32_t var_74_4 = 0x14e;
            hWnd = *(arg1 + 0x3f8);
        }
        SendMessageA(hWnd, 0x14e, wParam, nullptr);
        LRESULT eax_73;
        eax_73 = *(edi + 0x7a);
        SendMessageA(*(arg1 + 0x3b8), 0x14e, (eax_73 & 0xf), nullptr);
    }
    arg2 = 8;
    bool cond:2_1;
    do
    {
        class CWnd* eax_75 = CWnd::GetDlgItem(arg1, (ebx + 0x444));
        HWND hWnd_1;
        WPARAM wParam_1;
        if ((edi[0x28] & (1 << ebx)) == 0)
        {
            wParam_1 = nullptr;
            int32_t var_74_7 = 0xf1;
            hWnd_1 = *(eax_75 + 0x20);
        }
        else
        {
            wParam_1 = 1;
            int32_t var_74_6 = 0xf1;
            hWnd_1 = *(eax_75 + 0x20);
        }
        SendMessageA(hWnd_1, 0xf1, wParam_1, nullptr);
        ebx = (ebx + 1);
        cond:2_1 = arg2 != 1;
        arg2 = (arg2 - 1);
    } while (cond:2_1);
    if ((edi[0x27] & 1) == 0)
    {
        *(arg1 + 0x55c) = 0;
    }
    else
    {
        *(arg1 + 0x55c) = 1;
    }
    if ((edi[0x27] & 2) == 0)
    {
        *(arg1 + 0x574) = 0;
    }
    else
    {
        *(arg1 + 0x574) = 1;
    }
    if ((edi[0x27] & 4) == 0)
    {
        *(arg1 + 0x560) = 0;
    }
    else
    {
        *(arg1 + 0x560) = 1;
    }
    if ((edi[0x27] & 8) == 0)
    {
        *(arg1 + 0x558) = 0;
    }
    else
    {
        *(arg1 + 0x558) = 1;
    }
    if ((edi[0x27] & 0x10) == 0)
    {
        *(arg1 + 0x564) = 0;
    }
    else
    {
        *(arg1 + 0x564) = 1;
    }
    if ((edi[0x27] & 0x20) == 0)
    {
        *(arg1 + 0x568) = 0;
    }
    else
    {
        *(arg1 + 0x568) = 1;
    }
    if ((edi[0x27] & 0x40) == 0)
    {
        *(arg1 + 0x570) = 0;
    }
    else
    {
        *(arg1 + 0x570) = 1;
    }
    if ((edi[0x27] & 0x80) == 0)
    {
        *(arg1 + 0x650) = 0;
    }
    else
    {
        *(arg1 + 0x650) = 1;
    }
    if ((*edi[0x27][1] & 1) == 0)
    {
        *(arg1 + 0x654) = 0;
    }
    else
    {
        *(arg1 + 0x654) = 1;
    }
    if ((*edi[0x27][1] & 2) == 0)
    {
        *(arg1 + 0x660) = 0;
    }
    else
    {
        *(arg1 + 0x660) = 1;
    }
    if ((*edi[0x27][1] & 4) == 0)
    {
        *(arg1 + 0x664) = 0;
    }
    else
    {
        *(arg1 + 0x664) = 1;
    }
    if ((*edi[0x27][1] & 8) == 0)
    {
        *(arg1 + 0x690) = 0;
    }
    else
    {
        *(arg1 + 0x690) = 1;
    }
    int32_t var_3c;
    __builtin_memcpy(&var_3c, "\x6a\x04\x00\x00\x6b\x04\x00\x00\x6c\x04\x00\x00\x6d\x04\x00\x00\x6e\x04\x00\x00\x6f\x04\x00\x00\x70\x04\x00\x00\x71\x04\x00\x00\x72\x04\x00\x00\x74\x04\x00\x00\x75\x04\x00\x00\x7d\x04\x00\x00", 0x30);
    int32_t* ebp_4 = &var_3c;
    void* edi_1 = &edi[0x61];
    int32_t i_4 = 0xc;
    int32_t i_3;
    do
    {
        int32_t var_6c_9 = *edi_1;
        CString::Format(&var_58, &data_431074);
        CWnd::SetWindowTextA(CWnd::GetDlgItem(arg1, *ebp_4), var_58);
        edi_1 = (edi_1 + 4);
        ebp_4 = &ebp_4[1];
        i_3 = i_4;
        i_4 = (i_4 - 1);
    } while (i_3 != 1);
    CWnd::UpdateData(arg1, 0);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_80 = CString::~CString(&var_58);
    *fsbase = var_c;
    return eax_80;
}

int32_t __thiscall sub_408ab0(CWnd* arg1, int32_t* arg2)
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_427ba0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_1c;
    CString::CString(&var_1c);
    int32_t var_4 = 0;
    char* var_18;
    CString::CString(&var_18);
    var_4 = 1;
    CWnd::UpdateData(arg1, 1);
    if (*(*(arg1 + 0x5d0) - 8) != 0)
    {
        int32_t ecx_11 = *(*(arg1 + 0x57c) - 8);
        if (ecx_11 > 0x1f)
        {
            ecx_11 = 0x1f;
        }
        int32_t* esi = arg2;
        char ebx = 1;
        esi[0x59] = ecx_11;
        if (ecx_11 >= 1)
        {
            uint32_t eax_4 = 1;
            do
            {
                ebx = (ebx + 1);
                arg2 = ebx;
                int32_t edx_2;
                edx_2 = *((eax_4 + *(arg1 + 0x57c)) - 1);
                *((eax_4 + esi) + 0x164) = edx_2;
                eax_4 = arg2;
            } while (eax_4 <= ecx_11);
        }
        esi[0x1b] = *(arg1 + 0x578);
        esi[0x6d] = *(arg1 + 0x668);
        esi[3] = *(arg1 + 0x580);
        esi[2] = *(arg1 + 0x584);
        esi[0x14] = *(arg1 + 0x588);
        esi[0x15] = *(arg1 + 0x58c);
        int32_t eax_7;
        eax_7 = *(arg1 + 0x590);
        *(esi + 0x8e) = eax_7;
        esi[0x16] = *(arg1 + 0x594);
        int32_t edx_4;
        edx_4 = *(arg1 + 0x598);
        esi[0x23] = edx_4;
        esi[0x17] = *(arg1 + 0x59c);
        int32_t eax_9;
        int32_t edx_5;
        edx_5 = HIGHD((0xcccccccd * *(arg1 + 0x5a0)));
        eax_9 = LOWD((0xcccccccd * *(arg1 + 0x5a0)));
        esi[0x18] = (edx_5 >> 3);
        int32_t ecx_14;
        ecx_14 = *(arg1 + 0x5a4);
        esi[0x24] = ecx_14;
        uint32_t edx_6;
        edx_6 = *(arg1 + 0x5a8);
        *(esi + 0x92) = edx_6;
        esi[8] = ((*(arg1 + 0x5ac) * 0xa) + 0xaab);
        edx_6 = *(arg1 + 0x5b0);
        *(esi + 0x82) = edx_6;
        esi[9] = ((*(arg1 + 0x5b4) * 0xa) + 0xaab);
        esi[0xa] = ((*(arg1 + 0x5b8) * 0xa) + 0xaab);
        int32_t ecx_16;
        ecx_16 = *(arg1 + 0x5bc);
        esi[0x20] = ecx_16;
        esi[0xb] = ((*(arg1 + 0x5c0) * 0xa) + 0xaab);
        esi[7] = *(arg1 + 0x5c4);
        int32_t eax_18;
        int32_t edx_9;
        edx_9 = HIGHD((0xcccccccd * *(arg1 + 0x5c8)));
        eax_18 = LOWD((0xcccccccd * *(arg1 + 0x5c8)));
        esi[1] = (edx_9 >> 3);
        esi[5] = 0;
        esi[5] = (*(arg1 + 0x5cc) & 0x1f);
        int32_t ecx_18 = *(*(arg1 + 0x5d0) - 8);
        if (ecx_18 > 0x1f)
        {
            ecx_18 = 0x1f;
        }
        esi[0x49] = ecx_18;
        int32_t edx_12;
        edx_12 = 1;
        if (ecx_18 >= 1)
        {
            uint32_t eax_20 = 1;
            do
            {
                edx_12 = (edx_12 + 1);
                arg2 = edx_12;
                int32_t ebx_1;
                ebx_1 = *((eax_20 + *(arg1 + 0x5d0)) - 1);
                *((esi + (eax_20 << 1)) + 0x124) = ebx_1;
                eax_20 = arg2;
            } while (eax_20 <= ecx_18);
        }
        int32_t eax_22 = CString::Find((arg1 + 0x5d4), 0x2e);
        char* _Buffer;
        void var_14;
        void var_10;
        int32_t eax_26;
        if (eax_22 == 0xffffffff)
        {
            sscanf(*(arg1 + 0x5d4), &data_431074, &_Buffer);
            eax_26 = (_Buffer * 0xa);
        }
        else
        {
            var_8 = 2;
            CString::operator=(&_Buffer, CString::Left((arg1 + 0x5d4), &var_10));
            var_8 = 1;
            CString::~CString(&var_14);
            sscanf(_Buffer, &data_431d34, &var_18, (eax_22 + 2));
            eax_26 = _ftol();
        }
        esi[4] = eax_26;
        int32_t eax_29;
        int32_t edx_13;
        edx_13 = HIGHD((0xcccccccd * *(arg1 + 0x5d8)));
        eax_29 = LOWD((0xcccccccd * *(arg1 + 0x5d8)));
        uint32_t edx_14 = (edx_13 >> 3);
        int16_t _Buffer_1 = edx_14;
        *(arg1 + 0x5d8) = edx_14;
        esi[0x19] = (0x10000 - edx_14);
        edx_14 = *(arg1 + 0x5dc);
        esi[0x25] = edx_14;
        _Buffer = _Buffer_1;
        uint32_t eax_30;
        eax_30 = *(arg1 + 0x5e0);
        *(esi + 0x96) = eax_30;
        esi[0xc] = ((*(arg1 + 0x5e4) * 0xa) + 0xaab);
        int32_t eax_31;
        eax_31 = *(arg1 + 0x5e8);
        *(esi + 0x86) = eax_31;
        esi[0xd] = ((*(arg1 + 0x5ec) * 0xa) + 0xaab);
        esi[0xe] = ((*(arg1 + 0x5f0) * 0xa) + 0xaab);
        esi[0xf] = ((*(arg1 + 0x5f4) * 0xa) + 0xaab);
        int32_t ecx_26;
        ecx_26 = *(arg1 + 0x5f8);
        esi[0x21] = ecx_26;
        esi[0x36] = *(arg1 + 0x68c);
        int32_t eax_37;
        int32_t edx_19;
        edx_19 = HIGHD((0xcccccccd * *(arg1 + 0x5fc)));
        eax_37 = LOWD((0xcccccccd * *(arg1 + 0x5fc)));
        *esi = (edx_19 >> 3);
        esi[0x2a] = *(arg1 + 0x600);
        esi[0x2b] = *(arg1 + 0x60c);
        int32_t ecx_28 = *(*(arg1 + 0x610) - 8);
        if (ecx_28 > 0x1f)
        {
            ecx_28 = 0x1f;
        }
        esi[0x39] = ecx_28;
        void* edx_21;
        edx_21 = 1;
        if (ecx_28 >= 1)
        {
            uint32_t eax_39 = 1;
            do
            {
                edx_21 = (edx_21 + 1);
                arg2 = edx_21;
                int32_t ebp_2;
                ebp_2 = *((eax_39 + *(arg1 + 0x610)) - 1);
                *((esi + (eax_39 << 1)) + 0xe4) = ebp_2;
                eax_39 = arg2;
            } while (eax_39 <= ecx_28);
        }
        esi[5] = (((((*(arg1 + 0x63c) + 0x7ff830) << 4) + *(arg1 + 0x614)) << 5) + *(arg1 + 0x5cc));
        int32_t eax_47;
        int32_t edx_22;
        edx_22 = HIGHD((0xcccccccd * *(arg1 + 0x618)));
        eax_47 = LOWD((0xcccccccd * *(arg1 + 0x618)));
        esi[0x10] = (edx_22 >> 3);
        int32_t ecx_29;
        ecx_29 = *(arg1 + 0x61c);
        *(esi + 0x8a) = ecx_29;
        int32_t eax_48;
        int32_t edx_24;
        edx_24 = HIGHD((0xcccccccd * *(arg1 + 0x620)));
        eax_48 = LOWD((0xcccccccd * *(arg1 + 0x620)));
        esi[0x11] = (edx_24 >> 3);
        int32_t eax_49;
        int32_t edx_26;
        edx_26 = HIGHD((0xcccccccd * *(arg1 + 0x624)));
        eax_49 = LOWD((0xcccccccd * *(arg1 + 0x624)));
        esi[0x12] = (edx_26 >> 3);
        uint32_t edx_27;
        edx_27 = *(arg1 + 0x628);
        esi[0x22] = edx_27;
        int32_t eax_50;
        int32_t edx_28;
        edx_28 = HIGHD((0xcccccccd * *(arg1 + 0x62c)));
        eax_50 = LOWD((0xcccccccd * *(arg1 + 0x62c)));
        esi[0x13] = (edx_28 >> 3);
        int32_t eax_51 = CString::Find((arg1 + 0x630), 0x2e);
        int32_t _Buffer_2;
        if (eax_51 == 0xffffffff)
        {
            sscanf(*(arg1 + 0x630), &data_431074, &_Buffer);
            _Buffer_2 = (_Buffer * 0xa);
        }
        else
        {
            var_8 = 3;
            CString::operator=(&_Buffer, CString::Left((arg1 + 0x630), &var_10));
            var_8 = 1;
            CString::~CString(&var_14);
            sscanf(_Buffer, &data_431d34, &var_18, (eax_51 + 2));
            /* unimplemented  {fld st0, dword [esp+0x28]} */;
            /* unimplemented  {fmul st0, dword [&data_42ae78]} */;
            _Buffer_2 = _ftol();
        }
        int32_t ebx_2 = 0;
        _Buffer = _Buffer_2;
        if (_Buffer_2 == 0)
        {
            _Buffer_2 = 1;
            _Buffer = 1;
        }
        esi[0x26] = _Buffer_2;
        esi[6] = *(arg1 + 0x634);
        esi[0x1a] = *(arg1 + 0x638);
        esi[0x2c] = *(arg1 + 0x640);
        esi[0x2d] = *(arg1 + 0x644);
        esi[0x2e] = *(arg1 + 0x648);
        esi[0x2f] = *(arg1 + 0x64c);
        esi[0x30] = *(arg1 + 0x680);
        esi[0x31] = *(arg1 + 0x66c);
        esi[0x32] = *(arg1 + 0x670);
        esi[0x33] = *(arg1 + 0x674);
        esi[0x34] = *(arg1 + 0x678);
        esi[0x35] = *(arg1 + 0x67c);
        esi[0x37] = *(arg1 + 0x658);
        esi[0x38] = *(arg1 + 0x65c);
        esi[0x29] = (SendMessageA(*(arg1 + 0x538), 0x147, nullptr, nullptr) + 3);
        esi[0x1c] = *(arg1 + 0x604);
        esi[0x1d] = *(arg1 + 0x608);
        *(esi + 0x7e) = SendMessageA(*(arg1 + 0x378), 0x147, nullptr, nullptr);
        int16_t eax_64;
        eax_64 = data_43610a;
        if (eax_64 == 0)
        {
            int16_t edx_37;
            edx_37 = ((SendMessageA(*(arg1 + 0x478), 0x147, nullptr, nullptr) & 3) << 4);
            esi[0x1f] = edx_37;
            char eax_67 = (SendMessageA(*(arg1 + 0x438), 0x147, nullptr, nullptr) << 6);
            esi[0x1e] = 0;
            int16_t ecx_41;
            ecx_41 = eax_67;
            esi[0x1f] = (esi[0x1f] | ecx_41);
            LRESULT eax_68;
            eax_68 = (SendMessageA(*(arg1 + 0x3b8), 0x147, nullptr, nullptr) & 3);
            eax_68 = (eax_68 << 3);
            eax_68 = eax_68;
            esi[0x1e] = eax_68;
            if (*(arg1 + 0x56c) == 0)
            {
                eax_68 = (eax_68 & 0x7f);
            }
            else
            {
                eax_68 = (eax_68 | 0x80);
            }
            esi[0x1e] = eax_68;
            int16_t ecx_43;
            ecx_43 = (SendMessageA(*(arg1 + 0x3f8), 0x147, nullptr, nullptr) & 7);
            esi[0x1e] = (esi[0x1e] | ecx_43);
            uint16_t eax_71;
            eax_71 = (SendMessageA(*(arg1 + 0x4b8), 0x147, nullptr, nullptr) & 7);
            eax_71 = (eax_71 << 4);
            *(esi + 0x7a) = eax_71;
            eax_64 = (SendMessageA(*(arg1 + 0x4f8), 0x147, nullptr, nullptr) & 0xf);
            *(esi + 0x7a) = (*(esi + 0x7a) | eax_64);
            eax_64 = data_43610a;
        }
        if ((((((eax_64 == 1 || eax_64 == 2) || eax_64 == 3) || eax_64 == 4) || eax_64 == 5) || eax_64 == 6))
        {
            uint16_t eax_73;
            eax_73 = (SendMessageA(*(arg1 + 0x3f8), 0x147, nullptr, nullptr) << 4);
            *(esi + 0x7a) = eax_73;
            int16_t eax_75 = (SendMessageA(*(arg1 + 0x3b8), 0x147, nullptr, nullptr) & 0xf);
            *(esi + 0x7a) = (*(esi + 0x7a) | eax_75);
            uint16_t eax_76;
            eax_76 = (SendMessageA(*(arg1 + 0x4f8), 0x147, nullptr, nullptr) << 4);
            esi[0x1e] = eax_76;
            int16_t eax_78 = (SendMessageA(*(arg1 + 0x4b8), 0x147, nullptr, nullptr) & 0xf);
            esi[0x1e] = (esi[0x1e] | eax_78);
            uint16_t eax_79;
            eax_79 = (SendMessageA(*(arg1 + 0x478), 0x147, nullptr, nullptr) << 4);
            esi[0x1f] = eax_79;
            int16_t edx_43;
            edx_43 = (SendMessageA(*(arg1 + 0x438), 0x147, nullptr, nullptr) & 0xf);
            esi[0x1f] = (esi[0x1f] | edx_43);
        }
        esi[0x28] = 0;
        arg2 = 8;
        bool cond:3_1;
        do
        {
            if (SendMessageA(*(CWnd::GetDlgItem(arg1, (ebx_2 + 0x444)) + 0x20), 0xf0, nullptr, nullptr) != 0)
            {
                esi[0x28] = (esi[0x28] | (1 << ebx_2));
            }
            ebx_2 = (ebx_2 + 1);
            cond:3_1 = arg2 != 1;
            arg2 = (arg2 - 1);
        } while (cond:3_1);
        esi[0x27] = 0;
        if (*(arg1 + 0x55c) != 0)
        {
            esi[0x27] = 1;
        }
        if (*(arg1 + 0x574) != 0)
        {
            int32_t eax_90;
            eax_90 = (esi[0x27] | 2);
            esi[0x27] = eax_90;
        }
        if (*(arg1 + 0x560) != 0)
        {
            int32_t eax_92;
            eax_92 = (esi[0x27] | 4);
            esi[0x27] = eax_92;
        }
        if (*(arg1 + 0x558) != 0)
        {
            int32_t eax_94;
            eax_94 = (esi[0x27] | 8);
            esi[0x27] = eax_94;
        }
        if (*(arg1 + 0x564) != 0)
        {
            int32_t eax_96;
            eax_96 = (esi[0x27] | 0x10);
            esi[0x27] = eax_96;
        }
        if (*(arg1 + 0x568) != 0)
        {
            int32_t eax_98;
            eax_98 = (esi[0x27] | 0x20);
            esi[0x27] = eax_98;
        }
        if (*(arg1 + 0x570) != 0)
        {
            int32_t eax_100;
            eax_100 = (esi[0x27] | 0x40);
            esi[0x27] = eax_100;
        }
        if (*(arg1 + 0x650) != 0)
        {
            int32_t eax_102;
            eax_102 = (esi[0x27] | 0x80);
            esi[0x27] = eax_102;
        }
        if (*(arg1 + 0x654) != 0)
        {
            int32_t eax_104;
            *eax_104[1] = (*esi[0x27][1] | 1);
            esi[0x27] = eax_104;
        }
        if (*(arg1 + 0x660) != 0)
        {
            int32_t eax_106;
            *eax_106[1] = (*esi[0x27][1] | 2);
            esi[0x27] = eax_106;
        }
        if (*(arg1 + 0x664) != 0)
        {
            int32_t eax_108;
            *eax_108[1] = (*esi[0x27][1] | 4);
            esi[0x27] = eax_108;
        }
        if (*(arg1 + 0x690) != 0)
        {
            int32_t eax_110;
            *eax_110[1] = (*esi[0x27][1] | 8);
            esi[0x27] = eax_110;
        }
        var_4 = 0;
        CString::~CString(&var_18);
        int32_t var_4_2 = 0xffffffff;
        CString::~CString(&var_1c);
        *fsbase = var_c;
        return 1;
    }
    void* eax_1;
    eax_1 = data_435fd4;
    if (eax_1 == 0)
    {
        CWnd::MessageBoxA(arg1, &data_431d9c, var_18, 0x10);
    }
    if (data_435fd4 == 1)
    {
        CWnd::MessageBoxA(arg1, &data_431d7c, var_18, 0x10);
    }
    if (data_435fd4 == 2)
    {
        CWnd::MessageBoxA(arg1, "The Deceive name of the device c…", var_18, 0x10);
    }
    var_4 = 0;
    CString::~CString(&var_18);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&var_1c);
    *fsbase = var_c;
    return 0;
}

int32_t __stdcall sub_409450(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __fastcall sub_409480(CWnd* arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_427bd1;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t eax = sub_408ab0(arg1, (arg1 + 0x64));
    if (eax != 0)
    {
        void var_118;
        sub_40fd60(&var_118, nullptr);
        int32_t var_4_1 = 0;
        int32_t* var_b8_1 = (arg1 + 0x64);
        CDialog::DoModal(&var_118);
        int32_t var_4_2 = 2;
        void var_50;
        CProgressCtrl::~CProgressCtrl(&var_50);
        var_4_2 = 1;
        void var_94;
        sub_416a80(&var_94);
        int32_t var_4_3 = 0xffffffff;
        eax = CDialog::~CDialog(&var_118);
    }
    *fsbase = var_c;
    return eax;
}

int32_t __fastcall sub_409530(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427bf3;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 1;
    CProgressCtrl::~CProgressCtrl((arg1 + 0xc8));
    var_4 = 0;
    sub_416a80((arg1 + 0x84));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __fastcall sub_409590(void* arg1)
{
    /* tailcall */
    return sub_416a80((arg1 + 0x1c));
}

int32_t __fastcall sub_4095a0(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427c63;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_264 = 0;
    int32_t ebp;
    int32_t var_268 = ebp;
    int32_t esi;
    int32_t var_26c = esi;
    char* edi;
    char* var_270 = edi;
    void var_258;
    CString::CString(&var_258);
    char* lpSystemTime = &data_435ef0;
    int32_t var_4 = 0;
    void var_254;
    CString::CString(&var_254, lpSystemTime);
    var_4 = 1;
    uint32_t* var_250;
    CString::CString(&var_250);
    void var_238;
    __builtin_memcpy(&var_238, "Data files(*.fig)|*.fig|All file…", 0x2c);
    int32_t var_248;
    lpSystemTime = &var_248;
    var_4 = 2;
    char* esi_1;
    char* edi_1;
    *edi_1 = *esi_1;
    GetLocalTime(lpSystemTime);
    int16_t eax_1 = var_248;
    int16_t lpSystemTime_1;
    lpSystemTime = lpSystemTime_1;
    int16_t var_246;
    uint32_t var_278 = var_246;
    uint32_t var_27c = eax_1;
    void* var_280 = "Alf-%04d%02d%02d.fig";
    CString::Format(&var_250, "Alf-%04d%02d%02d.fig");
    uint32_t* eax_3 = var_250;
    lpSystemTime = nullptr;
    var_278 = &var_238;
    int32_t var_27c_1 = 0x802006;
    void* var_284_1 = &data_431dbc;
    int32_t var_288 = 0;
    void var_208;
    CFileDialog::CFileDialog(&var_208, 0, &data_431dbc, eax_3, 0x802006, var_278, lpSystemTime);
    char** esp_1 = &var_270;
    var_4 = 3;
    uint32_t eax_4 = GetVersion();
    int32_t var_1a8 = (((eax_4 - eax_4) & 0xc) + 0x4c);
    if (CFileDialog::DoModal(&var_208) == 1)
    {
        int32_t var_260;
        lpSystemTime = &var_260;
        var_278 = CFileDialog::GetFileName(&var_208);
        var_8 = 4;
        void* var_25c;
        CString::operator=(&var_25c, var_278);
        esp_1 = &lpSystemTime;
        var_8 = 3;
        CString::~CString(&var_264);
        if (*(var_25c - 8) != 0)
        {
            __builtin_memset((arg1 + 0x64), 0, 0x1b8);
            var_278 = (arg1 + 0x64);
            int32_t eax_11;
            uint32_t ecx_11;
            eax_11 = sub_408ab0(arg1, var_278);
            esp_1 = &lpSystemTime;
            if (eax_11 != 0)
            {
                var_278 = ecx_11;
                var_250 = &var_278;
                CString::CString(&var_278, &var_25c);
                sub_409ab0(arg1);
                int32_t var_190;
                var_260 = var_190;
                var_278 = &var_260;
                void var_20c;
                class CString* eax_12 = CFileDialog::GetNextPathName(&var_20c, &var_264);
                var_c = 5;
                CString::operator+=(&var_25c, eax_12);
                esp_1 = &var_278;
                var_c = 3;
                CString::~CString(&var_268);
                if (var_264 != 0)
                {
                    do
                    {
                        *(esp_1 - 4) = &esp_1[5];
                        *(esp_1 - 8) = &esp_1[9];
                        *(esp_1 - 8) = CFileDialog::GetNextPathName(&esp_1[0x1a]);
                        *(esp_1 - 0xc) = &data_431708;
                        *(esp_1 - 0x10) = &esp_1[3];
                        esp_1[0x9a] = 6;
                        *(esp_1 - 0xc) = operator+();
                        esp_1[0x99] = 7;
                        CString::operator+=(&esp_1[5]);
                        esp_1 = (esp_1 - 8);
                        esp_1[0x9b] = 6;
                        CString::~CString(&esp_1[4]);
                        esp_1[0x9b] = 3;
                        CString::~CString(&esp_1[9]);
                    } while (esp_1[5] != 0);
                }
            }
        }
    }
    esp_1[0x9b] = 8;
    CString::~CString(&esp_1[0x46]);
    esp_1[0x9b] = 2;
    CDialog::~CDialog(&esp_1[0x1a]);
    esp_1[0x9b] = 1;
    CString::~CString(&esp_1[8]);
    esp_1[0x9b] = 0;
    CString::~CString(&esp_1[7]);
    esp_1[0x9b] = 0xffffffff;
    int32_t eax_18 = CString::~CString(&esp_1[6]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    *fsbase = esp_1[0x99];
    esp_1[3];
    return eax_18;
}

int32_t __fastcall sub_409840(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_427cc8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_254 = 0;
    int32_t ebp;
    int32_t var_258 = ebp;
    int32_t esi;
    int32_t var_25c = esi;
    char* edi;
    char* var_260 = edi;
    int32_t var_24c;
    CString::CString(&var_24c);
    char* var_264 = &data_435ef0;
    int32_t var_4 = 0;
    void var_244;
    CString::CString(&var_244, var_264);
    void var_238;
    __builtin_memcpy(&var_238, "Data files(*.fig)|*.fig|All file…", 0x2c);
    var_264 = nullptr;
    char* var_268 = &var_238;
    int32_t var_26c = 0x801000;
    void* var_270 = "*.fig";
    void* var_274 = &data_431dbc;
    int32_t var_278 = 1;
    var_4 = 1;
    char* esi_1;
    char* edi_1;
    *edi_1 = *esi_1;
    CFileDialog var_208;
    CFileDialog::CFileDialog(&var_208, 1, &data_431dbc, "*.fig", 0x801000, var_268, var_264);
    char** esp_1 = &var_260;
    var_4 = 2;
    uint32_t eax_1 = GetVersion();
    int32_t var_1a8 = (((eax_1 - eax_1) & 0xc) + 0x4c);
    if (CFileDialog::DoModal(&var_208) == 1)
    {
        int32_t var_250;
        var_264 = &var_250;
        var_268 = CFileDialog::GetFileName(&var_208);
        var_8 = 3;
        CString::operator=(&var_250, var_268);
        var_8 = 2;
        CString::~CString(&var_254);
        var_268 = &var_24c;
        int32_t var_190;
        var_24c = var_190;
        CFileDialog var_20c;
        class CString* eax_7 = CFileDialog::GetNextPathName(&var_20c, &var_254);
        var_c = 4;
        CString::operator+=(&var_24c, eax_7);
        esp_1 = &var_268;
        var_c = 2;
        CString::~CString(&var_258);
        if (var_250 != 0)
        {
            do
            {
                *(esp_1 - 4) = &esp_1[6];
                *(esp_1 - 8) = &esp_1[8];
                *(esp_1 - 8) = CFileDialog::GetNextPathName(&esp_1[0x16]);
                *(esp_1 - 0xc) = &data_431708;
                *(esp_1 - 0x10) = &esp_1[3];
                esp_1[0x96] = 5;
                *(esp_1 - 0xc) = operator+();
                esp_1[0x95] = 6;
                CString::operator+=(&esp_1[5]);
                esp_1 = (esp_1 - 8);
                esp_1[0x97] = 5;
                CString::~CString(&esp_1[4]);
                esp_1[0x97] = 2;
                CString::~CString(&esp_1[8]);
            } while (esp_1[6] != 0);
        }
        if (*(esp_1[5] - 8) != 0)
        {
            __builtin_memset((arg1 + 0x64), 0, 0x1b8);
            int32_t ecx_15;
            *(esp_1 - 4) = ecx_15;
            esp_1[9] = (esp_1 - 4);
            *(esp_1 - 8) = &esp_1[5];
            CString::CString((esp_1 - 4));
            if (sub_40ab20(arg1) != 0)
            {
                int32_t eax_15;
                eax_15 = data_435fd4;
                data_43610c = 1;
                void* esp_13;
                if (eax_15 == 2)
                {
                    *(esp_1 - 4) = "Config Name:";
                    esp_13 = (esp_1 - 4);
                }
                else
                {
                    *(esp_1 - 4) = 0x431e18;
                    esp_13 = (esp_1 - 4);
                }
                CString::operator=(0x435fe4);
                *esp_13 = (esp_13 + 0x18);
                CString::operator+=(0x435fe4);
                *esp_13 = (arg1 + 0x64);
                sub_408110(arg1);
                esp_1 = (esp_13 + 4);
            }
        }
    }
    esp_1[0x97] = 7;
    CString::~CString(&esp_1[0x42]);
    esp_1[0x97] = 1;
    CDialog::~CDialog(&esp_1[0x16]);
    esp_1[0x97] = 0;
    CString::~CString(&esp_1[7]);
    esp_1[0x97] = 0xffffffff;
    int32_t eax_16 = CString::~CString(&esp_1[5]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    *fsbase = esp_1[0x95];
    esp_1[3];
    return eax_16;
}

int32_t __fastcall sub_409ab0(CWnd* arg1)
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_427d08;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_4 = 0;
    void var_20;
    CStdioFile::CStdioFile(&var_20);
    var_4 = 1;
    char* var_2c;
    CString::CString(&var_2c, &data_435ef0);
    var_4 = 2;
    class CString var_28;
    CString::CString(&var_28);
    var_4 = 3;
    void var_24;
    CString::CString(&var_24);
    var_4 = 4;
    if (CStdioFile::Open(&var_20, arg_4, 0x5001, nullptr) == 0)
    {
        CWnd::MessageBoxA(arg1, "Open File Error", "Error", 0x10);
        var_4 = 3;
        CString::~CString(&var_24);
        var_4 = 2;
        CString::~CString(&var_28);
        var_4 = 1;
        CString::~CString(&var_2c);
        var_4 = 0;
        CStdioFile::~CStdioFile(&var_20);
        int32_t var_4_1 = 0xffffffff;
        int32_t eax_3 = CString::~CString(&arg_4);
        *fsbase = var_c;
        return eax_3;
    }
    CString::operator+=(&var_2c, "  FileCode               ");
    int32_t var_3c_1 = 0x3838;
    CString::Format(&var_28, "%04x\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DesignCapacity        ");
    int32_t var_3c_3 = *(arg1 + 0x64);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CycleCapacity        ");
    int32_t var_3c_5 = *(arg1 + 0x68);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  FullChargeVol        ");
    int32_t var_3c_7 = *(arg1 + 0x6c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChargeEndVol        ");
    int32_t var_3c_9 = *(arg1 + 0x70);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DischargingRate        ");
    int32_t var_3c_11 = *(arg1 + 0x74);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ManufactureDate        ");
    int32_t var_3c_13 = *(arg1 + 0x78);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  SerialNumber        ");
    int32_t var_3c_15 = *(arg1 + 0x7c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CycleCount        ");
    int32_t var_3c_17 = *(arg1 + 0x80);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgOverTemp        ");
    int32_t var_3c_19 = *(arg1 + 0x84);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgOTRelease        ");
    int32_t var_3c_21 = *(arg1 + 0x88);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgLowTemp        ");
    int32_t var_3c_23 = *(arg1 + 0x8c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgUTRelease        ");
    int32_t var_3c_25 = *(arg1 + 0x90);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DisOverTemp        ");
    int32_t var_3c_27 = *(arg1 + 0x94);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgOTRelease        ");
    int32_t var_3c_29 = *(arg1 + 0x98);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DisLowTemp        ");
    int32_t var_3c_31 = *(arg1 + 0x9c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgUTRelease        ");
    int32_t var_3c_33 = *(arg1 + 0xa0);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackOverVoltage        ");
    int32_t var_3c_35 = *(arg1 + 0xa4);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackOVRelease        ");
    int32_t var_3c_37 = *(arg1 + 0xa8);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackUnderVoltage        ");
    int32_t var_3c_39 = *(arg1 + 0xac);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackUVRelease        ");
    int32_t var_3c_41 = *(arg1 + 0xb0);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellOverVoltage        ");
    int32_t var_3c_43 = *(arg1 + 0xb4);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellOVRelease        ");
    int32_t var_3c_45 = *(arg1 + 0xb8);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellUnderVoltage        ");
    int32_t var_3c_47 = *(arg1 + 0xbc);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellUVRelease        ");
    int32_t var_3c_49 = *(arg1 + 0xc0);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  OverChargeCurrent        ");
    int32_t var_3c_51 = *(arg1 + 0xc4);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  OverDisCurrent        ");
    int32_t var_3c_53 = *(arg1 + 0xc8);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  BalanceStartVoltage        ");
    int32_t var_3c_55 = *(arg1 + 0xcc);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  BalanceWindow        ");
    int32_t var_3c_57 = *(arg1 + 0xd0);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  SenseResistor        ");
    int32_t var_3c_59 = *(arg1 + 0xfc);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  BatteryConfig        ");
    int32_t var_3c_61 = *(arg1 + 0x100);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  NtcConfig        ");
    int32_t var_3c_63 = *(arg1 + 0x104);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackNum        ");
    int32_t var_3c_65 = *(arg1 + 0x108);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  fet_ctrl_time_set        ");
    int32_t var_3c_67 = *(arg1 + 0x10c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  led_disp_time_set        ");
    int32_t var_3c_69 = *(arg1 + 0x110);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap80        ");
    int32_t var_3c_71 = *(arg1 + 0x114);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap60        ");
    int32_t var_3c_73 = *(arg1 + 0x118);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap40        ");
    int32_t var_3c_75 = *(arg1 + 0x11c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap20        ");
    int32_t var_3c_77 = *(arg1 + 0x120);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  HardCellOverVoltage        ");
    int32_t var_3c_79 = *(arg1 + 0xd4);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  HardCellUnderVoltage        ");
    int32_t var_3c_81 = *(arg1 + 0xd8);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  HardChgOverCurrent        ");
    int32_t eax_44;
    eax_44 = *(arg1 + 0xdc);
    int32_t var_3c_83 = eax_44;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  HardDsgOverCurrent        ");
    int32_t eax_45;
    eax_45 = *(arg1 + 0xde);
    int32_t var_3c_85 = eax_45;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  HardTime        ");
    int32_t eax_46;
    eax_46 = *(arg1 + 0xe0);
    int32_t var_3c_87 = eax_46;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  SCReleaseTime        ");
    int32_t eax_47;
    eax_47 = *(arg1 + 0xe2);
    int32_t var_3c_89 = eax_47;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgUTDelay        ");
    int32_t eax_48;
    eax_48 = *(arg1 + 0xe4);
    int32_t var_3c_91 = eax_48;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgOTDelay        ");
    int32_t eax_49;
    eax_49 = *(arg1 + 0xe6);
    int32_t var_3c_93 = eax_49;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgUTDelay        ");
    int32_t eax_50;
    eax_50 = *(arg1 + 0xe8);
    int32_t var_3c_95 = eax_50;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgOTDelay        ");
    int32_t eax_51;
    eax_51 = *(arg1 + 0xea);
    int32_t var_3c_97 = eax_51;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackUVDelay        ");
    int32_t eax_52;
    eax_52 = *(arg1 + 0xec);
    int32_t var_3c_99 = eax_52;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  PackOVDelay        ");
    int32_t eax_53;
    eax_53 = *(arg1 + 0xee);
    int32_t var_3c_101 = eax_53;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellUVDelay        ");
    int32_t eax_54;
    eax_54 = *(arg1 + 0xf0);
    int32_t var_3c_103 = eax_54;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  CellOVDelay        ");
    int32_t eax_55;
    eax_55 = *(arg1 + 0xf2);
    int32_t var_3c_105 = eax_55;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgOCDelay        ");
    int32_t eax_56;
    eax_56 = *(arg1 + 0xf4);
    int32_t var_3c_107 = eax_56;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ChgOCRDelay        ");
    int32_t eax_57;
    eax_57 = *(arg1 + 0xf6);
    int32_t var_3c_109 = eax_57;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgOCDelay        ");
    int32_t eax_58;
    eax_58 = *(arg1 + 0xf8);
    int32_t var_3c_111 = eax_58;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  DsgOCRDelay        ");
    int32_t eax_59;
    eax_59 = *(arg1 + 0xfa);
    int32_t var_3c_113 = eax_59;
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  ManufacturerName       ");
    int32_t i = 1;
    int32_t eax_60;
    eax_60 = *(arg1 + 0x148);
    if ((eax_60 + 1) > 1)
    {
        void* ebp_1 = (arg1 + 0x14a);
        int32_t ecx_129;
        do
        {
            int32_t ecx_127;
            ecx_127 = *ebp_1;
            int32_t var_3c_115 = ecx_127;
            CString::Format(&var_28, &data_431f38);
            CString::operator+=(&var_2c, &var_28);
            i = (i + 1);
            ecx_129 = *(arg1 + 0x148);
            ebp_1 = (ebp_1 + 2);
        } while (i < (ecx_129 + 1));
    }
    CString::operator+=(&var_2c, &data_431f34);
    CString::operator+=(&var_2c, "  DeviceName             ");
    int32_t i_1 = 1;
    int32_t edx;
    edx = *(arg1 + 0x188);
    if ((edx + 1) > 1)
    {
        void* ebp_2 = (arg1 + 0x18a);
        int32_t eax_63;
        do
        {
            int32_t eax_62;
            eax_62 = *ebp_2;
            int32_t var_3c_117 = eax_62;
            CString::Format(&var_28, &data_431f38);
            CString::operator+=(&var_2c, &var_28);
            i_1 = (i_1 + 1);
            eax_63 = *(arg1 + 0x188);
            ebp_2 = (ebp_2 + 2);
        } while (i_1 < (eax_63 + 1));
    }
    CString::operator+=(&var_2c, &data_431f34);
    CString::operator+=(&var_2c, "  BarCode                ");
    int32_t i_2 = 1;
    int32_t ecx_136;
    ecx_136 = *(arg1 + 0x1c8);
    if ((ecx_136 + 1) > 1)
    {
        int32_t edx_3;
        do
        {
            int32_t edx_2;
            edx_2 = *((arg1 + i_2) + 0x1c8);
            int32_t var_3c_119 = edx_2;
            CString::Format(&var_28, &data_431f38);
            CString::operator+=(&var_2c, &var_28);
            i_2 = (i_2 + 1);
            edx_3 = *(arg1 + 0x1c8);
        } while (i_2 < (edx_3 + 1));
    }
    CString::operator+=(&var_2c, &data_431f34);
    CString::operator+=(&var_2c, "  GPS_VOL        ");
    int32_t var_3c_121 = *(arg1 + 0x140);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  GPS_TIME        ");
    int32_t var_3c_123 = *(arg1 + 0x144);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap90        ");
    int32_t var_3c_125 = *(arg1 + 0x128);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap70        ");
    int32_t var_3c_127 = *(arg1 + 0x12c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap50        ");
    int32_t var_3c_129 = *(arg1 + 0x130);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap30        ");
    int32_t var_3c_131 = *(arg1 + 0x134);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap10        ");
    int32_t var_3c_133 = *(arg1 + 0x138);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  VoltageCap100        ");
    int32_t var_3c_135 = *(arg1 + 0x124);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CString::operator+=(&var_2c, "  BalanceCurrent       ");
    int32_t var_3c_137 = *(arg1 + 0x13c);
    CString::Format(&var_28, "%d\r\n");
    CString::operator+=(&var_2c, &var_28);
    CStdioFile::WriteString(&var_20, var_2c);
    CStdioFile::Close(&var_20);
    var_4 = 3;
    CString::~CString(&var_24);
    var_4 = 2;
    CString::~CString(&var_28);
    var_4 = 1;
    CString::~CString(&var_2c);
    var_4 = 0;
    CStdioFile::~CStdioFile(&var_20);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_75 = CString::~CString(&arg_4);
    *fsbase = var_c;
    return eax_75;
}

int32_t __fastcall sub_40ab20(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_427d6a;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_dc = 0;
    int32_t ebp;
    int32_t var_e0 = ebp;
    int32_t var_4 = 0;
    void var_d0;
    CStdioFile::CStdioFile(&var_d0);
    var_4 = 1;
    void var_d4;
    CString::CString(&var_d4);
    var_4 = 2;
    char* _Buffer_57;
    CString::CString(&_Buffer_57);
    char* _Format_1 = _Format_2;
    class CFileException* var_e4 = nullptr;
    uint32_t var_e8 = 0x4000;
    char* _Format = _Format_1;
    var_4 = 3;
    int32_t eax_1 = CStdioFile::Open(&var_d0, _Format, var_e8, var_e4);
    int32_t* esp_1 = &var_e0;
    uint32_t var_e4_3;
    int32_t var_bc;
    int32_t eax_6;
    if (eax_1 != 0)
    {
        esp_1 = &var_e0;
        void var_b4;
        if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
        {
            char* _Buffer_19 = _Buffer_57;
            int32_t* var_e4_5 = &var_bc;
            var_e8 = &var_b4;
            _Format = " %s %04x";
            sscanf(_Buffer_19, _Format, var_e8, var_e4_5);
            esp_1 = &var_e0;
        }
        if (var_bc == 0x3838)
        {
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_38 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_38, _Format, var_e8, (arg1 + 0x64));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer, _Format, var_e8, (arg1 + 0x68));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_20 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_20, _Format, var_e8, (arg1 + 0x6c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_39 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_39, _Format, var_e8, (arg1 + 0x70));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_1 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_1, _Format, var_e8, (arg1 + 0x74));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_21 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_21, _Format, var_e8, (arg1 + 0x78));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_40 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_40, _Format, var_e8, (arg1 + 0x7c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_2 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_2, _Format, var_e8, (arg1 + 0x80));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_22 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_22, _Format, var_e8, (arg1 + 0x84));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_41 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_41, _Format, var_e8, (arg1 + 0x88));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_3 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_3, _Format, var_e8, (arg1 + 0x8c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_23 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_23, _Format, var_e8, (arg1 + 0x90));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_42 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_42, _Format, var_e8, (arg1 + 0x94));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_4 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_4, _Format, var_e8, (arg1 + 0x98));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_24 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_24, _Format, var_e8, (arg1 + 0x9c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_43 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_43, _Format, var_e8, (arg1 + 0xa0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_5 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_5, _Format, var_e8, (arg1 + 0xa4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_25 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_25, _Format, var_e8, (arg1 + 0xa8));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_44 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_44, _Format, var_e8, (arg1 + 0xac));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_6 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_6, _Format, var_e8, (arg1 + 0xb0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_26 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_26, _Format, var_e8, (arg1 + 0xb4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_45 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_45, _Format, var_e8, (arg1 + 0xb8));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_7 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_7, _Format, var_e8, (arg1 + 0xbc));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_27 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_27, _Format, var_e8, (arg1 + 0xc0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_46 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_46, _Format, var_e8, (arg1 + 0xc4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_8 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_8, _Format, var_e8, (arg1 + 0xc8));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_28 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_28, _Format, var_e8, (arg1 + 0xcc));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_47 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_47, _Format, var_e8, (arg1 + 0xd0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_9 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_9, _Format, var_e8, (arg1 + 0xfc));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_29 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_29, _Format, var_e8, (arg1 + 0x100));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_48 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_48, _Format, var_e8, (arg1 + 0x104));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_10 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_10, _Format, var_e8, (arg1 + 0x108));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_30 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_30, _Format, var_e8, (arg1 + 0x10c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_49 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_49, _Format, var_e8, (arg1 + 0x110));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_11 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_11, _Format, var_e8, (arg1 + 0x114));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_31 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_31, _Format, var_e8, (arg1 + 0x118));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_50 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_50, _Format, var_e8, (arg1 + 0x11c));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_12 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_12, _Format, var_e8, (arg1 + 0x120));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_32 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_32, _Format, var_e8, (arg1 + 0xd4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_51 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_51, _Format, var_e8, (arg1 + 0xd8));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_13 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_13, _Format, var_e8, (arg1 + 0xdc));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_33 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_33, _Format, var_e8, (arg1 + 0xde));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_52 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_52, _Format, var_e8, (arg1 + 0xe0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_14 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_14, _Format, var_e8, (arg1 + 0xe2));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_34 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_34, _Format, var_e8, (arg1 + 0xe4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_53 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_53, _Format, var_e8, (arg1 + 0xe6));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_15 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_15, _Format, var_e8, (arg1 + 0xe8));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_35 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_35, _Format, var_e8, (arg1 + 0xea));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_54 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_54, _Format, var_e8, (arg1 + 0xec));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_16 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_16, _Format, var_e8, (arg1 + 0xee));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_36 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_36, _Format, var_e8, (arg1 + 0xf0));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_55 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_55, _Format, var_e8, (arg1 + 0xf2));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_17 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_17, _Format, var_e8, (arg1 + 0xf4));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_37 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_37, _Format, var_e8, (arg1 + 0xf6));
            }
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_56 = _Buffer_57;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_56, _Format, var_e8, (arg1 + 0xf8));
            }
            int16_t var_74;
            if (CStdioFile::ReadString(&var_d0, &_Buffer_57) != 0)
            {
                char* _Buffer_18 = _Buffer_57;
                int16_t* var_e4_119 = &var_74;
                var_e8 = &var_b4;
                _Format = " %s %d";
                sscanf(_Buffer_18, _Format, var_e8, var_e4_119);
                *(arg1 + 0xfa) = var_74;
            }
            int32_t esi;
            int32_t var_e4_120 = esi;
            uint32_t edi;
            var_e8 = edi;
            _Format = &_Buffer_57;
            uint32_t* esp_2 = &var_e8;
            if (CStdioFile::ReadString(&var_d0, _Format) != 0)
            {
                _Format = 0x19;
                void s;
                __builtin_memset(&s, 0, 0x20);
                var_8 = 4;
                void var_b8;
                CString::operator=(&_Buffer_57, CString::Mid(&_Buffer_57, &var_b8));
                var_8 = 3;
                CString::~CString(&var_bc);
                int32_t var_f0_60 = 0xffffffff;
                CString::ReleaseBuffer(&_Buffer_57, 0xffffffff);
                esp_2 = &_Format;
                char* edi_1 = CString::GetBuffer(&_Buffer_57, *(_Buffer_57 - 8));
                int32_t i = 0xffffffff;
                while (i != 0)
                {
                    bool cond:0_1 = 0 != *edi_1;
                    edi_1 = &edi_1[1];
                    i = (i - 1);
                    if ((!cond:0_1))
                    {
                        break;
                    }
                }
                int32_t ecx_97 = (!i);
                __builtin_memcpy(&var_74, (edi_1 - ecx_97), ((ecx_97 >> 2) << 2));
                int32_t esi_2;
                int32_t edi_3;
                __builtin_memcpy(edi_3, esi_2, (ecx_97 & 3));
                int16_t* edi_4 = &var_74;
                int32_t i_1 = 0xffffffff;
                while (i_1 != 0)
                {
                    bool cond:1_1 = 0 != *edi_4;
                    edi_4 = (edi_4 + 1);
                    i_1 = (i_1 - 1);
                    if ((!cond:1_1))
                    {
                        break;
                    }
                }
                int32_t ecx_102 = ((!i_1) - 1);
                if (ecx_102 > 0x20)
                {
                    ecx_102 = 0x20;
                }
                int32_t edx_19 = 0;
                if (ecx_102 > 0)
                {
                    do
                    {
                        char eax_87 = *(&var_74 + edx_19);
                        if ((eax_87 == 0xd || eax_87 == 0xa))
                        {
                            *(&var_74 + edx_19) = 0;
                        }
                        edx_19 = (edx_19 + 1);
                    } while (edx_19 < ecx_102);
                }
                int16_t* edi_5 = &var_74;
                int32_t i_2 = 0xffffffff;
                int32_t i_3 = 0;
                while (i_2 != 0)
                {
                    bool cond:6_1 = 0 != *edi_5;
                    edi_5 = (edi_5 + 1);
                    i_2 = (i_2 - 1);
                    if ((!cond:6_1))
                    {
                        break;
                    }
                }
                int32_t i_12 = 0;
                *(arg1 + 0x148) = ((!i_2) - 1);
                if (((!i_2) - 1) > 0)
                {
                    do
                    {
                        edx_19 = *(&var_74 + i_3);
                        *((arg1 + (i_3 << 1)) + 0x14a) = edx_19;
                        i_3 = (i_12 + 1);
                        i_12 = i_3;
                    } while (i_3 < ((!i_2) - 1));
                }
            }
            *(esp_2 - 4) = &esp_2[4];
            void* esp_4 = esp_2;
            if (CStdioFile::ReadString(&esp_2[6]) != 0)
            {
                *(esp_4 - 4) = 0x19;
                __builtin_memset((esp_4 + 0x78), 0, 0x20);
                *(esp_4 - 8) = (esp_4 + 0x30);
                *(esp_4 - 8) = CString::Mid((esp_4 + 0x10));
                *(esp_4 + 0xe0) = 5;
                CString::operator=((esp_4 + 0x10));
                *(esp_4 + 0xe0) = 3;
                CString::~CString((esp_4 + 0x2c));
                *(esp_4 - 8) = 0xffffffff;
                CString::ReleaseBuffer((esp_4 + 0x10));
                *(esp_4 - 8) = *(*(esp_4 + 0x10) - 8);
                int32_t eax_93 = CString::GetBuffer((esp_4 + 0x10));
                esp_4 = (esp_4 - 4);
                int32_t edi_7 = eax_93;
                int32_t i_4 = 0xffffffff;
                while (i_4 != 0)
                {
                    bool cond:2_1 = 0 != *edi_7;
                    edi_7 = (edi_7 + 1);
                    i_4 = (i_4 - 1);
                    if ((!cond:2_1))
                    {
                        break;
                    }
                }
                int32_t ecx_112 = (!i_4);
                __builtin_memcpy((esp_4 + 0x78), (edi_7 - ecx_112), ((ecx_112 >> 2) << 2));
                int32_t esi_4;
                int32_t edi_10;
                __builtin_memcpy(edi_10, esi_4, (ecx_112 & 3));
                void* edi_11 = (esp_4 + 0x78);
                int32_t i_5 = 0xffffffff;
                while (i_5 != 0)
                {
                    bool cond:3_1 = 0 != *edi_11;
                    edi_11 = (edi_11 + 1);
                    i_5 = (i_5 - 1);
                    if ((!cond:3_1))
                    {
                        break;
                    }
                }
                int32_t ecx_117 = ((!i_5) - 1);
                if (ecx_117 > 0x20)
                {
                    ecx_117 = 0x20;
                }
                int32_t edx_22 = 0;
                if (ecx_117 > 0)
                {
                    do
                    {
                        char eax_95 = *((esp_4 + edx_22) + 0x78);
                        if ((eax_95 == 0xd || eax_95 == 0xa))
                        {
                            *((esp_4 + edx_22) + 0x78) = 0;
                        }
                        edx_22 = (edx_22 + 1);
                    } while (edx_22 < ecx_117);
                }
                void* edi_12 = (esp_4 + 0x78);
                int32_t i_6 = 0xffffffff;
                int32_t i_7 = 0;
                while (i_6 != 0)
                {
                    bool cond:8_1 = 0 != *edi_12;
                    edi_12 = (edi_12 + 1);
                    i_6 = (i_6 - 1);
                    if ((!cond:8_1))
                    {
                        break;
                    }
                }
                *(esp_4 + 0x2c) = 0;
                *(arg1 + 0x188) = ((!i_6) - 1);
                if (((!i_6) - 1) > 0)
                {
                    do
                    {
                        edx_22 = *((esp_4 + i_7) + 0x78);
                        *((arg1 + (i_7 << 1)) + 0x18a) = edx_22;
                        i_7 = (*(esp_4 + 0x2c) + 1);
                        *(esp_4 + 0x2c) = i_7;
                    } while (i_7 < ((!i_6) - 1));
                }
            }
            *(esp_4 - 4) = (esp_4 + 0x10);
            void* esp_14 = esp_4;
            if (CStdioFile::ReadString((esp_4 + 0x18)) != 0)
            {
                *(esp_14 - 4) = 0x19;
                __builtin_memset((esp_14 + 0x78), 0, 0x20);
                *(esp_14 - 8) = (esp_14 + 0x30);
                *(esp_14 - 8) = CString::Mid((esp_14 + 0x10));
                *(esp_14 + 0xe0) = 6;
                CString::operator=((esp_14 + 0x10));
                *(esp_14 + 0xe0) = 3;
                CString::~CString((esp_14 + 0x2c));
                *(esp_14 - 8) = 0xffffffff;
                CString::ReleaseBuffer((esp_14 + 0x10));
                *(esp_14 - 8) = *(*(esp_14 + 0x10) - 8);
                int32_t eax_101 = CString::GetBuffer((esp_14 + 0x10));
                esp_14 = (esp_14 - 4);
                int32_t edi_14 = eax_101;
                int32_t i_8 = 0xffffffff;
                while (i_8 != 0)
                {
                    bool cond:4_1 = 0 != *edi_14;
                    edi_14 = (edi_14 + 1);
                    i_8 = (i_8 - 1);
                    if ((!cond:4_1))
                    {
                        break;
                    }
                }
                int32_t ecx_127 = (!i_8);
                __builtin_memcpy((esp_14 + 0x78), (edi_14 - ecx_127), ((ecx_127 >> 2) << 2));
                int32_t esi_6;
                int32_t edi_17;
                __builtin_memcpy(edi_17, esi_6, (ecx_127 & 3));
                void* edi_18 = (esp_14 + 0x78);
                int32_t i_9 = 0xffffffff;
                while (i_9 != 0)
                {
                    bool cond:5_1 = 0 != *edi_18;
                    edi_18 = (edi_18 + 1);
                    i_9 = (i_9 - 1);
                    if ((!cond:5_1))
                    {
                        break;
                    }
                }
                int32_t ecx_132 = ((!i_9) - 1);
                if (ecx_132 > 0x20)
                {
                    ecx_132 = 0x20;
                }
                int32_t edx_25 = 0;
                if (ecx_132 > 0)
                {
                    do
                    {
                        char eax_103 = *((esp_14 + edx_25) + 0x78);
                        if ((eax_103 == 0xd || eax_103 == 0xa))
                        {
                            *((esp_14 + edx_25) + 0x78) = 0;
                        }
                        edx_25 = (edx_25 + 1);
                    } while (edx_25 < ecx_132);
                }
                void* edi_19 = (esp_14 + 0x78);
                int32_t i_10 = 0xffffffff;
                int32_t i_11 = 0;
                while (i_10 != 0)
                {
                    bool cond:11_1 = 0 != *edi_19;
                    edi_19 = (edi_19 + 1);
                    i_10 = (i_10 - 1);
                    if ((!cond:11_1))
                    {
                        break;
                    }
                }
                *(esp_14 + 0x2c) = 0;
                *(arg1 + 0x1c8) = ((!i_10) - 1);
                if (((!i_10) - 1) > 0)
                {
                    do
                    {
                        edx_25 = *((esp_14 + i_11) + 0x78);
                        *((i_11 + arg1) + 0x1c9) = edx_25;
                        i_11 = (*(esp_14 + 0x2c) + 1);
                        *(esp_14 + 0x2c) = i_11;
                    } while (i_11 < ((!i_10) - 1));
                }
            }
            *(esp_14 - 4) = (esp_14 + 0x10);
            int32_t eax_106 = CStdioFile::ReadString((esp_14 + 0x18));
            *esp_14;
            *(esp_14 + 4);
            void* esp_26 = (esp_14 + 8);
            if (eax_106 != 0)
            {
                int32_t eax_107 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x140);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = eax_107;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t ecx_139 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x144);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = ecx_139;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t edx_29 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x128);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = edx_29;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t eax_114 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x12c);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = eax_114;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t ecx_146 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x130);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = ecx_146;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t edx_33 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x134);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = edx_33;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t eax_121 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x138);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = eax_121;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t ecx_153 = *(esp_26 + 8);
                *(esp_26 - 4) = (arg1 + 0x124);
                *(esp_26 - 8) = (esp_26 + 0x2c);
                *(esp_26 - 0xc) = " %s %d";
                *(esp_26 - 0x10) = ecx_153;
                sscanf();
            }
            *(esp_26 - 4) = (esp_26 + 8);
            esp_1 = esp_26;
            if (CStdioFile::ReadString((esp_26 + 0x10)) != 0)
            {
                int32_t ecx_155 = esp_1[2];
                *(esp_1 - 4) = (arg1 + 0x13c);
                *(esp_1 - 8) = &esp_1[0xb];
                *(esp_1 - 0xc) = " %s %d";
                *(esp_1 - 0x10) = ecx_155;
                sscanf();
            }
            CStdioFile::Close(&esp_1[4]);
            esp_1[0x37] = 2;
            CString::~CString(&esp_1[2]);
            esp_1[0x37] = 1;
            CString::~CString(&esp_1[3]);
            esp_1[0x37] = 0;
            CStdioFile::~CStdioFile(&esp_1[4]);
            esp_1[0x37] = 0xffffffff;
            CString::~CString(&esp_1[0x39]);
            eax_6 = 1;
        }
        else
        {
            CStdioFile::Close(&var_d0);
            if (data_435fd4 == 0)
            {
                uint32_t var_e4_6 = 0x10;
                var_e8 = "Error";
                _Format = &data_43256c;
                CWnd::MessageBoxA(arg1, _Format, var_e8, var_e4_6);
                esp_1 = &var_e0;
            }
            if (data_435fd4 == 1)
            {
                uint32_t var_e4_7 = 0x10;
                var_e8 = "Error";
                _Format = &data_432554;
                CWnd::MessageBoxA(arg1, _Format, var_e8, var_e4_7);
                esp_1 = &var_e0;
            }
            if (data_435fd4 != 2)
            {
                goto label_40ac97;
            }
            var_e4_3 = 0x10;
            var_e8 = "Error";
            _Format = "The file type is incorrect. Plea…";
        }
    }
    else
    {
        eax_1 = data_435fd4;
        if (eax_1 != 0)
        {
            goto label_40ac97;
        }
        uint32_t var_e4_1 = 0x10;
        var_e8 = "Error";
        _Format = &data_4325b4;
        CWnd::MessageBoxA(arg1, _Format, var_e8, var_e4_1);
        esp_1 = &var_e0;
        if (data_435fd4 != 0)
        {
            goto label_40ac97;
        }
        uint32_t var_e4_2 = 0x10;
        var_e8 = "Error";
        _Format = &data_4325a4;
        CWnd::MessageBoxA(arg1, _Format, var_e8, var_e4_2);
        esp_1 = &var_e0;
        if (data_435fd4 != 0)
        {
            goto label_40ac97;
        }
        var_e4_3 = 0x10;
        var_e8 = "Error";
        _Format = "Opening file error";
    }
    if (((eax_1 != 0 && var_bc != 0x3838) || eax_1 == 0))
    {
        CWnd::MessageBoxA(arg1, _Format, var_e8, var_e4_3);
        esp_1 = &var_e0;
    label_40ac97:
        var_4 = 2;
        CString::~CString(&_Buffer_57);
        var_4 = 1;
        CString::~CString(&var_d4);
        var_4 = 0;
        CStdioFile::~CStdioFile(&var_d0);
        int32_t var_4_1 = 0xffffffff;
        CString::~CString(&_Format_2);
        eax_6 = 0;
    }
    *esp_1;
    esp_1[1];
    *fsbase = esp_1[0x35];
    return eax_6;
}

long __fastcall sub_40bbc0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_40bc00(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428779;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_14c;
    CString::CString(&var_14c, &data_432ea8);
    int32_t var_4 = 0;
    void var_148;
    CString::CString(&var_148, &data_432e9c);
    var_4 = 1;
    void var_144;
    CString::CString(&var_144, &data_432e90);
    var_4 = 2;
    void var_140;
    CString::CString(&var_140, &data_432e88);
    var_4 = 3;
    void var_13c;
    CString::CString(&var_13c, &data_432e7c);
    var_4 = 4;
    void var_138;
    CString::CString(&var_138, &data_432e90);
    var_4 = 5;
    void var_134;
    CString::CString(&var_134, &data_432e88);
    var_4 = 6;
    void var_130;
    CString::CString(&var_130, &data_432e70);
    var_4 = 7;
    void var_12c;
    CString::CString(&var_12c, &data_432e90);
    var_4 = 8;
    void var_128;
    CString::CString(&var_128, &data_432e88);
    var_4 = 9;
    void var_124;
    CString::CString(&var_124, &data_432e64);
    var_4 = 0xa;
    void var_120;
    CString::CString(&var_120, &data_432e90);
    var_4 = 0xb;
    void var_11c;
    CString::CString(&var_11c, &data_432e88);
    var_4 = 0xc;
    void var_118;
    CString::CString(&var_118, &data_432e58);
    var_4 = 0xd;
    void var_114;
    CString::CString(&var_114, &data_432e4c);
    var_4 = 0xe;
    void var_110;
    CString::CString(&var_110, &data_432e88);
    var_4 = 0xf;
    void var_10c;
    CString::CString(&var_10c, &data_432e40);
    var_4 = 0x10;
    void var_108;
    CString::CString(&var_108, &data_432e4c);
    var_4 = 0x11;
    void var_104;
    CString::CString(&var_104, &data_432e88);
    var_4 = 0x12;
    void var_100;
    CString::CString(&var_100, &data_432e34);
    var_4 = 0x13;
    void var_fc;
    CString::CString(&var_fc, &data_432e4c);
    var_4 = 0x14;
    void var_f8;
    CString::CString(&var_f8, &data_432e88);
    var_4 = 0x15;
    void var_f4;
    CString::CString(&var_f4, &data_432e28);
    var_4 = 0x16;
    void var_f0;
    CString::CString(&var_f0, &data_432e4c);
    var_4 = 0x17;
    void var_ec;
    CString::CString(&var_ec, &data_432e88);
    var_4 = 0x18;
    void var_e8;
    CString::CString(&var_e8, &data_432e1c);
    var_4 = 0x19;
    void var_e4;
    CString::CString(&var_e4, &data_432e10);
    var_4 = 0x1a;
    void var_e0;
    CString::CString(&var_e0, &data_432e88);
    var_4 = 0x1b;
    void var_dc;
    CString::CString(&var_dc, &data_432e04);
    var_4 = 0x1c;
    void var_d8;
    CString::CString(&var_d8, &data_432e10);
    var_4 = 0x1d;
    void var_d4;
    CString::CString(&var_d4, &data_432e88);
    var_4 = 0x1e;
    void var_d0;
    CString::CString(&var_d0, &data_432df8);
    var_4 = 0x1f;
    void var_cc;
    CString::CString(&var_cc, &data_432dec);
    var_4 = 0x20;
    void var_c8;
    CString::CString(&var_c8, &data_432de0);
    var_4 = 0x21;
    void var_c4;
    CString::CString(&var_c4, &data_432dd4);
    var_4 = 0x22;
    void var_c0;
    CString::CString(&var_c0, &data_432dc8);
    var_4 = 0x23;
    void var_bc;
    CString::CString(&var_bc, &data_432db8);
    var_4 = 0x24;
    void var_b8;
    CString::CString(&var_b8, &data_432dac);
    var_4 = 0x25;
    void var_b4;
    CString::CString(&var_b4, &data_432d9c);
    var_4 = 0x26;
    void var_b0;
    CString::CString(&var_b0, &data_432d90);
    var_4 = 0x27;
    void var_ac;
    CString::CString(&var_ac, &data_432d80);
    var_4 = 0x28;
    void var_a8;
    CString::CString(&var_a8, &data_432d74);
    var_4 = 0x29;
    void var_a4;
    CString::CString(&var_a4, &data_432d6c);
    var_4 = 0x2a;
    void var_a0;
    CString::CString(&var_a0, &data_432d60);
    var_4 = 0x2b;
    void var_9c;
    CString::CString(&var_9c, &data_432d54);
    var_4 = 0x2c;
    void var_98;
    CString::CString(&var_98, &data_432d48);
    var_4 = 0x2d;
    void var_94;
    CString::CString(&var_94, &data_432d38);
    var_4 = 0x2e;
    void var_90;
    CString::CString(&var_90, &data_432d2c);
    var_4 = 0x2f;
    void var_8c;
    CString::CString(&var_8c, &data_432d20);
    var_4 = 0x30;
    void var_88;
    CString::CString(&var_88, &data_432d14);
    var_4 = 0x31;
    void var_84;
    CString::CString(&var_84, &data_432d0c);
    var_4 = 0x32;
    void var_80;
    CString::CString(&var_80, &data_432d04);
    var_4 = 0x33;
    void var_7c;
    CString::CString(&var_7c, &data_432cf8);
    var_4 = 0x34;
    void var_78;
    CString::CString(&var_78, &data_432cec);
    var_4 = 0x35;
    void var_74;
    CString::CString(&var_74, &data_432ce4);
    var_4 = 0x36;
    void var_70;
    CString::CString(&var_70, &data_432cd8);
    var_4 = 0x37;
    void var_6c;
    CString::CString(&var_6c, &data_432ccc);
    var_4 = 0x38;
    void var_68;
    CString::CString(&var_68, &data_432cbc);
    var_4 = 0x39;
    void var_64;
    CString::CString(&var_64, &data_432cb0);
    var_4 = 0x3a;
    void var_60;
    CString::CString(&var_60, &data_432ca0);
    var_4 = 0x3b;
    void var_5c;
    CString::CString(&var_5c, &data_432c94);
    var_4 = 0x3c;
    void var_58;
    CString::CString(&var_58, &data_432c88);
    var_4 = 0x3d;
    void var_54;
    CString::CString(&var_54, &data_432c7c);
    var_4 = 0x3e;
    void var_50;
    CString::CString(&var_50, &data_432c70);
    var_4 = 0x3f;
    void var_4c;
    CString::CString(&var_4c, &data_432c64);
    var_4 = 0x40;
    void var_48;
    CString::CString(&var_48, &data_432c58);
    var_4 = 0x41;
    void var_44;
    CString::CString(&var_44, &data_432c4c);
    var_4 = 0x42;
    void var_40;
    CString::CString(&var_40, &data_432c40);
    var_4 = 0x43;
    void var_3c;
    CString::CString(&var_3c, &data_432e1c);
    var_4 = 0x44;
    void var_38;
    CString::CString(&var_38, &data_432e04);
    var_4 = 0x45;
    void var_34;
    CString::CString(&var_34, &data_432e9c);
    var_4 = 0x46;
    void var_30;
    CString::CString(&var_30, &data_432e7c);
    var_4 = 0x47;
    void var_2c;
    CString::CString(&var_2c, &data_432e58);
    var_4 = 0x48;
    void var_28;
    CString::CString(&var_28, &data_432e40);
    var_4 = 0x49;
    void var_24;
    CString::CString(&var_24, &data_432e34);
    var_4 = 0x4a;
    void var_20;
    CString::CString(&var_20, &data_432e28);
    var_4 = 0x4b;
    void var_1c;
    CString::CString(&var_1c, &data_432c34);
    var_4 = 0x4c;
    void var_18;
    CString::CString(&var_18, &data_432c28);
    var_4 = 0x4d;
    void var_14;
    CString::CString(&var_14, &data_432c1c);
    var_4 = 0x4e;
    void var_10;
    CString::CString(&var_10, &data_432c10);
    var_4 = 0x4f;
    void var_28c;
    CString::CString(&var_28c, &data_432bfc);
    var_4 = 0x50;
    void var_288;
    CString::CString(&var_288, &data_432bf0);
    var_4 = 0x51;
    void var_284;
    CString::CString(&var_284, &data_432be4);
    var_4 = 0x52;
    void var_280;
    CString::CString(&var_280, &data_432bdc);
    var_4 = 0x53;
    void var_27c;
    CString::CString(&var_27c, &data_432bd0);
    var_4 = 0x54;
    void var_278;
    CString::CString(&var_278, &data_432be4);
    var_4 = 0x55;
    void var_274;
    CString::CString(&var_274, &data_432bdc);
    var_4 = 0x56;
    void var_270;
    CString::CString(&var_270, &data_432bc4);
    var_4 = 0x57;
    void var_26c;
    CString::CString(&var_26c, &data_432be4);
    var_4 = 0x58;
    void var_268;
    CString::CString(&var_268, &data_432bdc);
    var_4 = 0x59;
    void var_264;
    CString::CString(&var_264, &data_432bb8);
    var_4 = 0x5a;
    void var_260;
    CString::CString(&var_260, &data_432be4);
    var_4 = 0x5b;
    void var_25c;
    CString::CString(&var_25c, &data_432bdc);
    var_4 = 0x5c;
    void var_258;
    CString::CString(&var_258, &data_432bac);
    var_4 = 0x5d;
    void var_254;
    CString::CString(&var_254, &data_432ba0);
    var_4 = 0x5e;
    void var_250;
    CString::CString(&var_250, &data_432bdc);
    var_4 = 0x5f;
    void var_24c;
    CString::CString(&var_24c, &data_432b94);
    var_4 = 0x60;
    void var_248;
    CString::CString(&var_248, &data_432ba0);
    var_4 = 0x61;
    void var_244;
    CString::CString(&var_244, &data_432bdc);
    var_4 = 0x62;
    void var_240;
    CString::CString(&var_240, &data_432b88);
    var_4 = 0x63;
    void var_23c;
    CString::CString(&var_23c, &data_432ba0);
    var_4 = 0x64;
    void var_238;
    CString::CString(&var_238, &data_432bdc);
    var_4 = 0x65;
    void var_234;
    CString::CString(&var_234, &data_432b7c);
    var_4 = 0x66;
    void var_230;
    CString::CString(&var_230, &data_432ba0);
    var_4 = 0x67;
    void var_22c;
    CString::CString(&var_22c, &data_432bdc);
    var_4 = 0x68;
    void var_228;
    CString::CString(&var_228, &data_432b70);
    var_4 = 0x69;
    void var_224;
    CString::CString(&var_224, &data_432b64);
    var_4 = 0x6a;
    void var_220;
    CString::CString(&var_220, &data_432bdc);
    var_4 = 0x6b;
    void var_21c;
    CString::CString(&var_21c, &data_432b58);
    var_4 = 0x6c;
    void var_218;
    CString::CString(&var_218, &data_432b64);
    var_4 = 0x6d;
    void var_214;
    CString::CString(&var_214, &data_432bdc);
    var_4 = 0x6e;
    void var_210;
    CString::CString(&var_210, &data_432b4c);
    var_4 = 0x6f;
    void var_20c;
    CString::CString(&var_20c, &data_432b40);
    var_4 = 0x70;
    void var_208;
    CString::CString(&var_208, &data_432b34);
    var_4 = 0x71;
    void var_204;
    CString::CString(&var_204, &data_432b28);
    var_4 = 0x72;
    void var_200;
    CString::CString(&var_200, &data_432b1c);
    var_4 = 0x73;
    void var_1fc;
    CString::CString(&var_1fc, &data_432b0c);
    var_4 = 0x74;
    void var_1f8;
    CString::CString(&var_1f8, &data_432b00);
    var_4 = 0x75;
    void var_1f4;
    CString::CString(&var_1f4, &data_432af0);
    var_4 = 0x76;
    void var_1f0;
    CString::CString(&var_1f0, &data_432ae4);
    var_4 = 0x77;
    void var_1ec;
    CString::CString(&var_1ec, &data_432ad4);
    var_4 = 0x78;
    void var_1e8;
    CString::CString(&var_1e8, &data_432ac8);
    var_4 = 0x79;
    void var_1e4;
    CString::CString(&var_1e4, &data_432ac0);
    var_4 = 0x7a;
    void var_1e0;
    CString::CString(&var_1e0, &data_432ab4);
    var_4 = 0x7b;
    void var_1dc;
    CString::CString(&var_1dc, &data_432aa8);
    var_4 = 0x7c;
    void var_1d8;
    CString::CString(&var_1d8, &data_432d48);
    var_4 = 0x7d;
    void var_1d4;
    CString::CString(&var_1d4, &data_432a98);
    var_4 = 0x7e;
    void var_1d0;
    CString::CString(&var_1d0, &data_432a8c);
    var_4 = 0x7f;
    void var_1cc;
    CString::CString(&var_1cc, &data_432a80);
    var_4 = 0x80;
    void var_1c8;
    CString::CString(&var_1c8, &data_432a74);
    var_4 = 0x81;
    void var_1c4;
    CString::CString(&var_1c4, &data_432a6c);
    var_4 = 0x82;
    void var_1c0;
    CString::CString(&var_1c0, &data_432a64);
    var_4 = 0x83;
    void var_1bc;
    CString::CString(&var_1bc, &data_432a58);
    var_4 = 0x84;
    void var_1b8;
    CString::CString(&var_1b8, &data_432a4c);
    var_4 = 0x85;
    void var_1b4;
    CString::CString(&var_1b4, &data_432a44);
    var_4 = 0x86;
    void var_1b0;
    CString::CString(&var_1b0, &data_432a38);
    var_4 = 0x87;
    void var_1ac;
    CString::CString(&var_1ac, &data_432a2c);
    var_4 = 0x88;
    void var_1a8;
    CString::CString(&var_1a8, &data_432a1c);
    var_4 = 0x89;
    void var_1a4;
    CString::CString(&var_1a4, &data_432a10);
    var_4 = 0x8a;
    void var_1a0;
    CString::CString(&var_1a0, &data_432a00);
    var_4 = 0x8b;
    void var_19c;
    CString::CString(&var_19c, &data_4329f4);
    var_4 = 0x8c;
    void var_198;
    CString::CString(&var_198, &data_4329e8);
    var_4 = 0x8d;
    void var_194;
    CString::CString(&var_194, &data_4329dc);
    var_4 = 0x8e;
    void var_190;
    CString::CString(&var_190, &data_4329d0);
    var_4 = 0x8f;
    void var_18c;
    CString::CString(&var_18c, &data_4329c4);
    var_4 = 0x90;
    void var_188;
    CString::CString(&var_188, &data_4329b8);
    var_4 = 0x91;
    void var_184;
    CString::CString(&var_184, &data_4329ac);
    var_4 = 0x92;
    void var_180;
    CString::CString(&var_180, &data_4329a0);
    var_4 = 0x93;
    void var_17c;
    CString::CString(&var_17c, &data_432b70);
    var_4 = 0x94;
    void var_178;
    CString::CString(&var_178, &data_432b58);
    var_4 = 0x95;
    void var_174;
    CString::CString(&var_174, &data_432bf0);
    var_4 = 0x96;
    void var_170;
    CString::CString(&var_170, &data_432bd0);
    var_4 = 0x97;
    void var_16c;
    CString::CString(&var_16c, &data_432bac);
    var_4 = 0x98;
    void var_168;
    CString::CString(&var_168, &data_432b94);
    var_4 = 0x99;
    void var_164;
    CString::CString(&var_164, &data_432b88);
    var_4 = 0x9a;
    void var_160;
    CString::CString(&var_160, &data_432b7c);
    var_4 = 0x9b;
    void var_15c;
    CString::CString(&var_15c, &data_432994);
    var_4 = 0x9c;
    void var_158;
    CString::CString(&var_158, &data_432988);
    var_4 = 0x9d;
    void var_154;
    CString::CString(&var_154, &data_432c1c);
    var_4 = 0x9e;
    void var_150;
    CString::CString(&var_150, &data_432c10);
    var_4 = 0x9f;
    void var_3cc;
    CString::CString(&var_3cc, "Basic protected parameter config…");
    var_4 = 0xa0;
    void var_3c8;
    CString::CString(&var_3c8, "CellOvp");
    var_4 = 0xa1;
    void var_3c4;
    CString::CString(&var_3c4, "Release");
    var_4 = 0xa2;
    void var_3c0;
    CString::CString(&var_3c0, "Delay");
    var_4 = 0xa3;
    void var_3bc;
    CString::CString(&var_3bc, "CellUvp");
    var_4 = 0xa4;
    void var_3b8;
    CString::CString(&var_3b8, "Release");
    var_4 = 0xa5;
    void var_3b4;
    CString::CString(&var_3b4, "Delay");
    var_4 = 0xa6;
    void var_3b0;
    CString::CString(&var_3b0, "PackOvp");
    var_4 = 0xa7;
    void var_3ac;
    CString::CString(&var_3ac, "Release");
    var_4 = 0xa8;
    void var_3a8;
    CString::CString(&var_3a8, "Delay");
    var_4 = 0xa9;
    void var_3a4;
    CString::CString(&var_3a4, "PackUvp");
    var_4 = 0xaa;
    void var_3a0;
    CString::CString(&var_3a0, "Release");
    var_4 = 0xab;
    void var_39c;
    CString::CString(&var_39c, "Delay");
    var_4 = 0xac;
    void var_398;
    CString::CString(&var_398, "CHGOTP");
    var_4 = 0xad;
    void var_394;
    CString::CString(&var_394, "Release");
    var_4 = 0xae;
    void var_390;
    CString::CString(&var_390, "Delay");
    var_4 = 0xaf;
    void var_38c;
    CString::CString(&var_38c, "CHGUTP");
    var_4 = 0xb0;
    void var_388;
    CString::CString(&var_388, "Release");
    var_4 = 0xb1;
    void var_384;
    CString::CString(&var_384, "Delay");
    var_4 = 0xb2;
    void var_380;
    CString::CString(&var_380, "DSGOTP");
    var_4 = 0xb3;
    void var_37c;
    CString::CString(&var_37c, "Release");
    var_4 = 0xb4;
    void var_378;
    CString::CString(&var_378, "Delay");
    var_4 = 0xb5;
    void var_374;
    CString::CString(&var_374, "DSGUTP");
    var_4 = 0xb6;
    void var_370;
    CString::CString(&var_370, "Release");
    var_4 = 0xb7;
    void var_36c;
    CString::CString(&var_36c, "Delay");
    var_4 = 0xb8;
    void var_368;
    CString::CString(&var_368, "CHGOCP");
    var_4 = 0xb9;
    void var_364;
    CString::CString(&var_364, "ReleaseTime");
    var_4 = 0xba;
    void var_360;
    CString::CString(&var_360, "Delay");
    var_4 = 0xbb;
    void var_35c;
    CString::CString(&var_35c, "DSGOCP");
    var_4 = 0xbc;
    void var_358;
    CString::CString(&var_358, "ReleaseTime");
    var_4 = 0xbd;
    void var_354;
    CString::CString(&var_354, "Delay");
    var_4 = 0xbe;
    void var_350;
    CString::CString(&var_350, "Advanced protection");
    var_4 = 0xbf;
    void var_34c;
    CString::CString(&var_34c, "DSGOCP2");
    var_4 = 0xc0;
    void var_348;
    CString::CString(&var_348, "OCP2Delay");
    var_4 = 0xc1;
    void var_344;
    CString::CString(&var_344, "Short-circuit");
    var_4 = 0xc2;
    void var_340;
    CString::CString(&var_340, "SCtDelay");
    var_4 = 0xc3;
    void var_33c;
    CString::CString(&var_33c, "HardwareOVP");
    var_4 = 0xc4;
    void var_338;
    CString::CString(&var_338, "OVPdelay");
    var_4 = 0xc5;
    void var_334;
    CString::CString(&var_334, "HardwareUVP");
    var_4 = 0xc6;
    void var_330;
    CString::CString(&var_330, "UVP delay");
    var_4 = 0xc7;
    void var_32c;
    CString::CString(&var_32c, "SC release delay");
    var_4 = 0xc8;
    void var_328;
    CString::CString(&var_328, "Function configuration");
    var_4 = 0xc9;
    void var_324;
    CString::CString(&var_324, "NTC configuration");
    var_4 = 0xca;
    void var_320;
    CString::CString(&var_320, "Balanced allocation");
    var_4 = 0xcb;
    void var_31c;
    CString::CString(&var_31c, "StartVoltage");
    var_4 = 0xcc;
    void var_318;
    CString::CString(&var_318, "Accuracy");
    var_4 = 0xcd;
    void var_314;
    CString::CString(&var_314, "Other information configuration");
    var_4 = 0xce;
    void var_310;
    CString::CString(&var_310, "Current resistance");
    var_4 = 0xcf;
    void var_30c;
    CString::CString(&var_30c, "PackNumber");
    var_4 = 0xd0;
    void var_308;
    CString::CString(&var_308, "Cycles");
    var_4 = 0xd1;
    void var_304;
    CString::CString(&var_304, "Serial number");
    var_4 = 0xd2;
    void var_300;
    CString::CString(&var_300, "Manufacturer");
    var_4 = 0xd3;
    void var_2fc;
    CString::CString(&var_2fc, "Device model");
    var_4 = 0xd4;
    void var_2f8;
    CString::CString(&var_2f8, "Production date");
    var_4 = 0xd5;
    void var_2f4;
    CString::CString(&var_2f4, "Bar code");
    var_4 = 0xd6;
    void var_2f0;
    CString::CString(&var_2f0, "Nominal capacity");
    var_4 = 0xd7;
    void var_2ec;
    CString::CString(&var_2ec, "Cyclic capacity");
    var_4 = 0xd8;
    void var_2e8;
    CString::CString(&var_2e8, "Full voltage");
    var_4 = 0xd9;
    void var_2e4;
    CString::CString(&var_2e4, "Capacity configuration");
    var_4 = 0xda;
    void var_2e0;
    CString::CString(&var_2e0, "End of voltage");
    var_4 = 0xdb;
    void var_2dc;
    CString::CString(&var_2dc, "DischargeRate");
    var_4 = 0xdc;
    void var_2d8;
    CString::CString(&var_2d8, "80% capacity voltage");
    var_4 = 0xdd;
    void var_2d4;
    CString::CString(&var_2d4, "60% capacity voltage");
    var_4 = 0xde;
    void var_2d0;
    CString::CString(&var_2d0, "40% capacity voltage");
    var_4 = 0xdf;
    void var_2cc;
    CString::CString(&var_2cc, "20% capacity voltage");
    var_4 = 0xe0;
    void var_2c8;
    CString::CString(&var_2c8, "LED Timer");
    var_4 = 0xe1;
    void var_2c4;
    CString::CString(&var_2c4, "Protection Count");
    var_4 = 0xe2;
    void var_2c0;
    CString::CString(&var_2c0, "SC Count");
    var_4 = 0xe3;
    void var_2bc;
    CString::CString(&var_2bc, "CHGOCP");
    var_4 = 0xe4;
    void var_2b8;
    CString::CString(&var_2b8, "DSGOCP");
    var_4 = 0xe5;
    void var_2b4;
    CString::CString(&var_2b4, "CellOVP");
    var_4 = 0xe6;
    void var_2b0;
    CString::CString(&var_2b0, "CellUVP");
    var_4 = 0xe7;
    void var_2ac;
    CString::CString(&var_2ac, "CHGOTP");
    var_4 = 0xe8;
    void var_2a8;
    CString::CString(&var_2a8, "CHGUTP");
    var_4 = 0xe9;
    void var_2a4;
    CString::CString(&var_2a4, "DSGOTP");
    var_4 = 0xea;
    void var_2a0;
    CString::CString(&var_2a0, "DSGUTP");
    var_4 = 0xeb;
    void var_29c;
    CString::CString(&var_29c, "PACKOVP");
    var_4 = 0xec;
    void var_298;
    CString::CString(&var_298, "PACKUVP");
    var_4 = 0xed;
    void var_294;
    CString::CString(&var_294, "GPS OFF VOL");
    var_4 = 0xee;
    void var_290;
    CString::CString(&var_290, "GPSOFFTIME");
    var_4 = 0xef;
    if (data_435fd4 == 0)
    {
        CWnd::SetDlgItemTextA(arg1, 0x418, &data_432640);
        CWnd::SetDlgItemTextA(arg1, 0x419, &data_432634);
        CWnd::SetDlgItemTextA(arg1, 0x41b, &data_432628);
        CWnd::SetDlgItemTextA(arg1, 0x41a, &data_43261c);
        int32_t ebp_1 = 0x4ce;
        void* edi_1 = &var_14c;
        int32_t var_3d0_1 = 0x50;
        bool cond:0_1;
        do
        {
            CWnd::SetDlgItemTextA(arg1, ebp_1, *edi_1);
            edi_1 = (edi_1 + 4);
            ebp_1 = (ebp_1 + 1);
            cond:0_1 = var_3d0_1 != 1;
            var_3d0_1 = (var_3d0_1 - 1);
        } while (cond:0_1);
    }
    if (data_435fd4 == 1)
    {
        CWnd::SetDlgItemTextA(arg1, 0x418, &data_432610);
        CWnd::SetDlgItemTextA(arg1, 0x419, &data_432604);
        CWnd::SetDlgItemTextA(arg1, 0x41b, &data_4325f8);
        CWnd::SetDlgItemTextA(arg1, 0x41a, &data_4325ec);
        int32_t ebp_2 = 0x4ce;
        void* edi_2 = &var_28c;
        int32_t var_3d0_2 = 0x51;
        bool cond:1_1;
        do
        {
            CWnd::SetDlgItemTextA(arg1, ebp_2, *edi_2);
            edi_2 = (edi_2 + 4);
            ebp_2 = (ebp_2 + 1);
            cond:1_1 = var_3d0_2 != 1;
            var_3d0_2 = (var_3d0_2 - 1);
        } while (cond:1_1);
    }
    if (data_435fd4 == 2)
    {
        CWnd::SetDlgItemTextA(arg1, 0x418, "Read");
        CWnd::SetDlgItemTextA(arg1, 0x419, "Write");
        CWnd::SetDlgItemTextA(arg1, 0x41b, "SaveFile");
        CWnd::SetDlgItemTextA(arg1, 0x41a, "OpenFile");
        int32_t ebp_3 = 0x4ce;
        char** edi_3 = &var_3cc;
        int32_t var_3d0_3 = 0x51;
        bool cond:2_1;
        do
        {
            CWnd::SetDlgItemTextA(arg1, ebp_3, *edi_3);
            edi_3 = &edi_3[1];
            ebp_3 = (ebp_3 + 1);
            cond:2_1 = var_3d0_3 != 1;
            var_3d0_3 = (var_3d0_3 - 1);
        } while (cond:2_1);
    }
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x477), 5);
    var_4 = 0xee;
    CString::~CString(&var_290);
    var_4 = 0xed;
    CString::~CString(&var_294);
    var_4 = 0xec;
    CString::~CString(&var_298);
    var_4 = 0xeb;
    CString::~CString(&var_29c);
    var_4 = 0xea;
    CString::~CString(&var_2a0);
    var_4 = 0xe9;
    CString::~CString(&var_2a4);
    var_4 = 0xe8;
    CString::~CString(&var_2a8);
    var_4 = 0xe7;
    CString::~CString(&var_2ac);
    var_4 = 0xe6;
    CString::~CString(&var_2b0);
    var_4 = 0xe5;
    CString::~CString(&var_2b4);
    var_4 = 0xe4;
    CString::~CString(&var_2b8);
    var_4 = 0xe3;
    CString::~CString(&var_2bc);
    var_4 = 0xe2;
    CString::~CString(&var_2c0);
    var_4 = 0xe1;
    CString::~CString(&var_2c4);
    var_4 = 0xe0;
    CString::~CString(&var_2c8);
    var_4 = 0xdf;
    CString::~CString(&var_2cc);
    var_4 = 0xde;
    CString::~CString(&var_2d0);
    var_4 = 0xdd;
    CString::~CString(&var_2d4);
    var_4 = 0xdc;
    CString::~CString(&var_2d8);
    var_4 = 0xdb;
    CString::~CString(&var_2dc);
    var_4 = 0xda;
    CString::~CString(&var_2e0);
    var_4 = 0xd9;
    CString::~CString(&var_2e4);
    var_4 = 0xd8;
    CString::~CString(&var_2e8);
    var_4 = 0xd7;
    CString::~CString(&var_2ec);
    var_4 = 0xd6;
    CString::~CString(&var_2f0);
    var_4 = 0xd5;
    CString::~CString(&var_2f4);
    var_4 = 0xd4;
    CString::~CString(&var_2f8);
    var_4 = 0xd3;
    CString::~CString(&var_2fc);
    var_4 = 0xd2;
    CString::~CString(&var_300);
    var_4 = 0xd1;
    CString::~CString(&var_304);
    var_4 = 0xd0;
    CString::~CString(&var_308);
    var_4 = 0xcf;
    CString::~CString(&var_30c);
    var_4 = 0xce;
    CString::~CString(&var_310);
    var_4 = 0xcd;
    CString::~CString(&var_314);
    var_4 = 0xcc;
    CString::~CString(&var_318);
    var_4 = 0xcb;
    CString::~CString(&var_31c);
    var_4 = 0xca;
    CString::~CString(&var_320);
    var_4 = 0xc9;
    CString::~CString(&var_324);
    var_4 = 0xc8;
    CString::~CString(&var_328);
    var_4 = 0xc7;
    CString::~CString(&var_32c);
    var_4 = 0xc6;
    CString::~CString(&var_330);
    var_4 = 0xc5;
    CString::~CString(&var_334);
    var_4 = 0xc4;
    CString::~CString(&var_338);
    var_4 = 0xc3;
    CString::~CString(&var_33c);
    var_4 = 0xc2;
    CString::~CString(&var_340);
    var_4 = 0xc1;
    CString::~CString(&var_344);
    var_4 = 0xc0;
    CString::~CString(&var_348);
    var_4 = 0xbf;
    CString::~CString(&var_34c);
    var_4 = 0xbe;
    CString::~CString(&var_350);
    var_4 = 0xbd;
    CString::~CString(&var_354);
    var_4 = 0xbc;
    CString::~CString(&var_358);
    var_4 = 0xbb;
    CString::~CString(&var_35c);
    var_4 = 0xba;
    CString::~CString(&var_360);
    var_4 = 0xb9;
    CString::~CString(&var_364);
    var_4 = 0xb8;
    CString::~CString(&var_368);
    var_4 = 0xb7;
    CString::~CString(&var_36c);
    var_4 = 0xb6;
    CString::~CString(&var_370);
    var_4 = 0xb5;
    CString::~CString(&var_374);
    var_4 = 0xb4;
    CString::~CString(&var_378);
    var_4 = 0xb3;
    CString::~CString(&var_37c);
    var_4 = 0xb2;
    CString::~CString(&var_380);
    var_4 = 0xb1;
    CString::~CString(&var_384);
    var_4 = 0xb0;
    CString::~CString(&var_388);
    var_4 = 0xaf;
    CString::~CString(&var_38c);
    var_4 = 0xae;
    CString::~CString(&var_390);
    var_4 = 0xad;
    CString::~CString(&var_394);
    var_4 = 0xac;
    CString::~CString(&var_398);
    var_4 = 0xab;
    CString::~CString(&var_39c);
    var_4 = 0xaa;
    CString::~CString(&var_3a0);
    var_4 = 0xa9;
    CString::~CString(&var_3a4);
    var_4 = 0xa8;
    CString::~CString(&var_3a8);
    var_4 = 0xa7;
    CString::~CString(&var_3ac);
    var_4 = 0xa6;
    CString::~CString(&var_3b0);
    var_4 = 0xa5;
    CString::~CString(&var_3b4);
    var_4 = 0xa4;
    CString::~CString(&var_3b8);
    var_4 = 0xa3;
    CString::~CString(&var_3bc);
    var_4 = 0xa2;
    CString::~CString(&var_3c0);
    var_4 = 0xa1;
    CString::~CString(&var_3c4);
    var_4 = 0xa0;
    CString::~CString(&var_3c8);
    var_4 = 0x9f;
    CString::~CString(&var_3cc);
    var_4 = 0x9e;
    CString::~CString(&var_150);
    var_4 = 0x9d;
    CString::~CString(&var_154);
    var_4 = 0x9c;
    CString::~CString(&var_158);
    var_4 = 0x9b;
    CString::~CString(&var_15c);
    var_4 = 0x9a;
    CString::~CString(&var_160);
    var_4 = 0x99;
    CString::~CString(&var_164);
    var_4 = 0x98;
    CString::~CString(&var_168);
    var_4 = 0x97;
    CString::~CString(&var_16c);
    var_4 = 0x96;
    CString::~CString(&var_170);
    var_4 = 0x95;
    CString::~CString(&var_174);
    var_4 = 0x94;
    CString::~CString(&var_178);
    var_4 = 0x93;
    CString::~CString(&var_17c);
    var_4 = 0x92;
    CString::~CString(&var_180);
    var_4 = 0x91;
    CString::~CString(&var_184);
    var_4 = 0x90;
    CString::~CString(&var_188);
    var_4 = 0x8f;
    CString::~CString(&var_18c);
    var_4 = 0x8e;
    CString::~CString(&var_190);
    var_4 = 0x8d;
    CString::~CString(&var_194);
    var_4 = 0x8c;
    CString::~CString(&var_198);
    var_4 = 0x8b;
    CString::~CString(&var_19c);
    var_4 = 0x8a;
    CString::~CString(&var_1a0);
    var_4 = 0x89;
    CString::~CString(&var_1a4);
    var_4 = 0x88;
    CString::~CString(&var_1a8);
    var_4 = 0x87;
    CString::~CString(&var_1ac);
    var_4 = 0x86;
    CString::~CString(&var_1b0);
    var_4 = 0x85;
    CString::~CString(&var_1b4);
    var_4 = 0x84;
    CString::~CString(&var_1b8);
    var_4 = 0x83;
    CString::~CString(&var_1bc);
    var_4 = 0x82;
    CString::~CString(&var_1c0);
    var_4 = 0x81;
    CString::~CString(&var_1c4);
    var_4 = 0x80;
    CString::~CString(&var_1c8);
    var_4 = 0x7f;
    CString::~CString(&var_1cc);
    var_4 = 0x7e;
    CString::~CString(&var_1d0);
    var_4 = 0x7d;
    CString::~CString(&var_1d4);
    var_4 = 0x7c;
    CString::~CString(&var_1d8);
    var_4 = 0x7b;
    CString::~CString(&var_1dc);
    var_4 = 0x7a;
    CString::~CString(&var_1e0);
    var_4 = 0x79;
    CString::~CString(&var_1e4);
    var_4 = 0x78;
    CString::~CString(&var_1e8);
    var_4 = 0x77;
    CString::~CString(&var_1ec);
    var_4 = 0x76;
    CString::~CString(&var_1f0);
    var_4 = 0x75;
    CString::~CString(&var_1f4);
    var_4 = 0x74;
    CString::~CString(&var_1f8);
    var_4 = 0x73;
    CString::~CString(&var_1fc);
    var_4 = 0x72;
    CString::~CString(&var_200);
    var_4 = 0x71;
    CString::~CString(&var_204);
    var_4 = 0x70;
    CString::~CString(&var_208);
    var_4 = 0x6f;
    CString::~CString(&var_20c);
    var_4 = 0x6e;
    CString::~CString(&var_210);
    var_4 = 0x6d;
    CString::~CString(&var_214);
    var_4 = 0x6c;
    CString::~CString(&var_218);
    var_4 = 0x6b;
    CString::~CString(&var_21c);
    var_4 = 0x6a;
    CString::~CString(&var_220);
    var_4 = 0x69;
    CString::~CString(&var_224);
    var_4 = 0x68;
    CString::~CString(&var_228);
    var_4 = 0x67;
    CString::~CString(&var_22c);
    var_4 = 0x66;
    CString::~CString(&var_230);
    var_4 = 0x65;
    CString::~CString(&var_234);
    var_4 = 0x64;
    CString::~CString(&var_238);
    var_4 = 0x63;
    CString::~CString(&var_23c);
    var_4 = 0x62;
    CString::~CString(&var_240);
    var_4 = 0x61;
    CString::~CString(&var_244);
    var_4 = 0x60;
    CString::~CString(&var_248);
    var_4 = 0x5f;
    CString::~CString(&var_24c);
    var_4 = 0x5e;
    CString::~CString(&var_250);
    var_4 = 0x5d;
    CString::~CString(&var_254);
    var_4 = 0x5c;
    CString::~CString(&var_258);
    var_4 = 0x5b;
    CString::~CString(&var_25c);
    var_4 = 0x5a;
    CString::~CString(&var_260);
    var_4 = 0x59;
    CString::~CString(&var_264);
    var_4 = 0x58;
    CString::~CString(&var_268);
    var_4 = 0x57;
    CString::~CString(&var_26c);
    var_4 = 0x56;
    CString::~CString(&var_270);
    var_4 = 0x55;
    CString::~CString(&var_274);
    var_4 = 0x54;
    CString::~CString(&var_278);
    var_4 = 0x53;
    CString::~CString(&var_27c);
    var_4 = 0x52;
    CString::~CString(&var_280);
    var_4 = 0x51;
    CString::~CString(&var_284);
    var_4 = 0x50;
    CString::~CString(&var_288);
    var_4 = 0x4f;
    CString::~CString(&var_28c);
    var_4 = 0x4e;
    CString::~CString(&var_10);
    var_4 = 0x4d;
    CString::~CString(&var_14);
    var_4 = 0x4c;
    CString::~CString(&var_18);
    var_4 = 0x4b;
    CString::~CString(&var_1c);
    var_4 = 0x4a;
    CString::~CString(&var_20);
    var_4 = 0x49;
    CString::~CString(&var_24);
    var_4 = 0x48;
    CString::~CString(&var_28);
    var_4 = 0x47;
    CString::~CString(&var_2c);
    var_4 = 0x46;
    CString::~CString(&var_30);
    var_4 = 0x45;
    CString::~CString(&var_34);
    var_4 = 0x44;
    CString::~CString(&var_38);
    var_4 = 0x43;
    CString::~CString(&var_3c);
    var_4 = 0x42;
    CString::~CString(&var_40);
    var_4 = 0x41;
    CString::~CString(&var_44);
    var_4 = 0x40;
    CString::~CString(&var_48);
    var_4 = 0x3f;
    CString::~CString(&var_4c);
    var_4 = 0x3e;
    CString::~CString(&var_50);
    var_4 = 0x3d;
    CString::~CString(&var_54);
    var_4 = 0x3c;
    CString::~CString(&var_58);
    var_4 = 0x3b;
    CString::~CString(&var_5c);
    var_4 = 0x3a;
    CString::~CString(&var_60);
    var_4 = 0x39;
    CString::~CString(&var_64);
    var_4 = 0x38;
    CString::~CString(&var_68);
    var_4 = 0x37;
    CString::~CString(&var_6c);
    var_4 = 0x36;
    CString::~CString(&var_70);
    var_4 = 0x35;
    CString::~CString(&var_74);
    var_4 = 0x34;
    CString::~CString(&var_78);
    var_4 = 0x33;
    CString::~CString(&var_7c);
    var_4 = 0x32;
    CString::~CString(&var_80);
    var_4 = 0x31;
    CString::~CString(&var_84);
    var_4 = 0x30;
    CString::~CString(&var_88);
    var_4 = 0x2f;
    CString::~CString(&var_8c);
    var_4 = 0x2e;
    CString::~CString(&var_90);
    var_4 = 0x2d;
    CString::~CString(&var_94);
    var_4 = 0x2c;
    CString::~CString(&var_98);
    var_4 = 0x2b;
    CString::~CString(&var_9c);
    var_4 = 0x2a;
    CString::~CString(&var_a0);
    var_4 = 0x29;
    CString::~CString(&var_a4);
    var_4 = 0x28;
    CString::~CString(&var_a8);
    var_4 = 0x27;
    CString::~CString(&var_ac);
    var_4 = 0x26;
    CString::~CString(&var_b0);
    var_4 = 0x25;
    CString::~CString(&var_b4);
    var_4 = 0x24;
    CString::~CString(&var_b8);
    var_4 = 0x23;
    CString::~CString(&var_bc);
    var_4 = 0x22;
    CString::~CString(&var_c0);
    var_4 = 0x21;
    CString::~CString(&var_c4);
    var_4 = 0x20;
    CString::~CString(&var_c8);
    var_4 = 0x1f;
    CString::~CString(&var_cc);
    var_4 = 0x1e;
    CString::~CString(&var_d0);
    var_4 = 0x1d;
    CString::~CString(&var_d4);
    var_4 = 0x1c;
    CString::~CString(&var_d8);
    var_4 = 0x1b;
    CString::~CString(&var_dc);
    var_4 = 0x1a;
    CString::~CString(&var_e0);
    var_4 = 0x19;
    CString::~CString(&var_e4);
    var_4 = 0x18;
    CString::~CString(&var_e8);
    var_4 = 0x17;
    CString::~CString(&var_ec);
    var_4 = 0x16;
    CString::~CString(&var_f0);
    var_4 = 0x15;
    CString::~CString(&var_f4);
    var_4 = 0x14;
    CString::~CString(&var_f8);
    var_4 = 0x13;
    CString::~CString(&var_fc);
    var_4 = 0x12;
    CString::~CString(&var_100);
    var_4 = 0x11;
    CString::~CString(&var_104);
    var_4 = 0x10;
    CString::~CString(&var_108);
    var_4 = 0xf;
    CString::~CString(&var_10c);
    var_4 = 0xe;
    CString::~CString(&var_110);
    var_4 = 0xd;
    CString::~CString(&var_114);
    var_4 = 0xc;
    CString::~CString(&var_118);
    var_4 = 0xb;
    CString::~CString(&var_11c);
    var_4 = 0xa;
    CString::~CString(&var_120);
    var_4 = 9;
    CString::~CString(&var_124);
    var_4 = 8;
    CString::~CString(&var_128);
    var_4 = 7;
    CString::~CString(&var_12c);
    var_4 = 6;
    CString::~CString(&var_130);
    var_4 = 5;
    CString::~CString(&var_134);
    var_4 = 4;
    CString::~CString(&var_138);
    var_4 = 3;
    CString::~CString(&var_13c);
    var_4 = 2;
    CString::~CString(&var_140);
    var_4 = 1;
    CString::~CString(&var_144);
    var_4 = 0;
    CString::~CString(&var_148);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_12 = CString::~CString(&var_14c);
    *fsbase = var_c;
    return eax_12;
}

LRESULT __fastcall sub_40e750(CWnd* arg1)
{
    char eax_1 = SendMessageA(*(arg1 + 0x4b8), 0x147, nullptr, nullptr);
    char wParam_1 = SendMessageA(*(arg1 + 0x4f8), 0x147, nullptr, nullptr);
    char eax_2 = SendMessageA(*(arg1 + 0x3f8), 0x147, nullptr, nullptr);
    char eax_4 = SendMessageA(*(arg1 + 0x3b8), 0x147, nullptr, nullptr);
    char eax_5 = SendMessageA(*(arg1 + 0x478), 0x147, nullptr, nullptr);
    char eax_6 = SendMessageA(*(arg1 + 0x438), 0x147, nullptr, nullptr);
    sub_40e8d0(arg1);
    SendMessageA(*(arg1 + 0x4b8), 0x14e, eax_1, nullptr);
    uint32_t wParam = wParam_1;
    SendMessageA(*(arg1 + 0x4f8), 0x14e, wParam, nullptr);
    int32_t var_28;
    if (data_43610a != 6)
    {
        SendMessageA(*(arg1 + 0x3f8), 0x14e, eax_2, nullptr);
        var_28 = 1;
    }
    else
    {
        SendMessageA(*(arg1 + 0x3f8), 0x14e, wParam, nullptr);
        var_28 = 0;
    }
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x43d), var_28);
    SendMessageA(*(arg1 + 0x3b8), 0x14e, eax_4, nullptr);
    SendMessageA(*(arg1 + 0x478), 0x14e, eax_5, nullptr);
    return SendMessageA(*(arg1 + 0x438), 0x14e, eax_6, nullptr);
}

int32_t __fastcall sub_40e8d0(CWnd* arg1)
{
    int32_t ebp;
    int32_t var_4 = ebp;
    int32_t var_c = 0xffffffff;
    int32_t (* var_10)() = sub_4287a6;
    int32_t* fsbase;
    int32_t var_14 = *fsbase;
    *fsbase = &var_14;
    void* const _Buffer = 0;
    LPARAM lParam;
    CString::CString(&lParam);
    int16_t var_ca = 0x64;
    int16_t var_e2 = 0x64;
    int16_t var_d8 = 0x16;
    int16_t var_98;
    __builtin_memcpy(&var_98, "\x08\x00\x0b\x00\x0e\x00\x11\x00\x13\x00\x16\x00\x19\x00\x1c\x00\x1f\x00", 0x12);
    int16_t var_b8 = 8;
    int32_t var_c_1 = 0;
    int16_t var_d6 = 0x21;
    int16_t var_d4 = 0x2c;
    int16_t var_d2 = 0x38;
    int16_t var_d0 = 0x43;
    int16_t var_ce = 0x4e;
    int16_t var_cc = 0x59;
    int16_t var_e4 = 0x46;
    int16_t var_e0 = 0xc8;
    int16_t var_de = 0x190;
    int16_t var_86 = 0x21;
    int16_t var_84 = 0x24;
    int16_t var_82 = 0x27;
    int16_t var_80 = 0x2a;
    int16_t var_7e = 0x2c;
    int16_t var_7c = 0x2f;
    int16_t var_7a = 0x32;
    int16_t var_b6 = 0x14;
    int16_t var_b4 = 0x28;
    int16_t var_b2 = 0x50;
    int16_t var_b0 = 0xa0;
    int16_t var_ae = 0x140;
    int16_t var_ac = 0x280;
    int16_t var_aa = 0x500;
    SendMessageA(*(arg1 + 0x3f8), 0x14b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x3b8), 0x14b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x4f8), 0x14b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x4b8), 0x14b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x478), 0x14b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x438), 0x14b, nullptr, nullptr);
    CWnd::UpdateData(arg1, 1);
    int32_t eax_3 = CString::Find((arg1 + 0x630), 0x2e);
    int32_t var_f0;
    int32_t i_17;
    float var_1c;
    int32_t eax_6;
    if (eax_3 == 0xffffffff)
    {
        sscanf(*(arg1 + 0x630), &data_431074, &var_f0);
        eax_6 = (var_f0 * 0xa);
    }
    else
    {
        var_10 = 1;
        CString::operator=(&_Buffer, CString::Left((arg1 + 0x630), &i_17));
        var_10 = 0;
        CString::~CString(&var_f0);
        sscanf(_Buffer, &data_431d34, &var_1c, (eax_3 + 2));
        eax_6 = _ftol();
    }
    var_f0 = eax_6;
    if (eax_6 != 0)
    {
        eax_6 = data_43610a;
        if (eax_6 == 0)
        {
            int32_t ebp_3 = 0;
            int32_t i_18 = 8;
            int32_t i;
            do
            {
                int32_t eax_9;
                eax_9 = *(&var_d8 + ebp_3);
                uint32_t var_108_2 = (COMBINE(0, (eax_9 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                int32_t ecx_8;
                ecx_8 = *(&var_b8 + ebp_3);
                int32_t var_108_4 = ecx_8;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                ebp_3 = (ebp_3 + 2);
                i = i_18;
                i_18 = (i_18 - 1);
            } while (i != 1);
            int16_t* ebp_4 = &var_e4;
            int32_t i_19 = 4;
            int32_t i_1;
            do
            {
                int32_t edx_6;
                edx_6 = *ebp_4;
                int32_t var_108_6 = edx_6;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                ebp_4 = &ebp_4[1];
                i_1 = i_19;
                i_19 = (i_19 - 1);
            } while (i_1 != 1);
            int16_t* ebp_5 = &var_98;
            int32_t i_20 = 0x10;
            int32_t i_2;
            do
            {
                int32_t eax_15;
                eax_15 = *ebp_5;
                uint32_t var_108_8 = (COMBINE(0, (eax_15 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                ebp_5 = &ebp_5[1];
                i_2 = i_20;
                i_20 = (i_20 - 1);
            } while (i_2 != 1);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ecc);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ec8);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ec4);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, U"8421");
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ecc);
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ec4);
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, U"8421");
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ebc);
        }
        if (data_43610a == 1)
        {
            int32_t var_dc_1 = 0x32;
            int32_t ebx_1 = 0x271;
            int32_t ebp_6 = 0xc8;
            var_e4 = 0x10;
            int32_t i_3;
            do
            {
                uint32_t var_108_10 = (COMBINE(0, ebp_6) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                uint32_t var_108_12 = (ebx_1 / 0xa);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                uint32_t var_108_14 = (COMBINE(0, var_dc_1) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                i_3 = var_e4;
                ebp_6 = (ebp_6 + 0xc8);
                ebx_1 = (ebx_1 + 0x271);
                var_dc_1 = (var_dc_1 + 0x64);
                var_e4 = (i_3 - 1);
            } while (i_3 != 1);
            int32_t ebx_2 = 0x1f4;
            int32_t i_26 = 5;
            int32_t i_4;
            do
            {
                int32_t var_108_16 = ebx_2;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                ebx_2 = (ebx_2 + 0x1f4);
                i_4 = i_26;
                i_26 = (i_26 - 1);
            } while (i_4 != 1);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ecc);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ec8);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, &data_432ec4);
            SendMessageA(*(arg1 + 0x478), 0x143, nullptr, U"8421");
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ecc);
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ec4);
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, U"8421");
            SendMessageA(*(arg1 + 0x438), 0x143, nullptr, &data_432ebc);
        }
        if (data_43610a == 2)
        {
            var_e4 = 0xa;
            int32_t var_dc_2 = 0x64;
            int32_t ebx_3 = 0xc35;
            int32_t ebp_7 = 0xc8;
            i_17 = 0x10;
            int32_t i_5;
            do
            {
                uint32_t var_108_18 = (COMBINE(0, ebp_7) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                uint32_t var_108_20 = (ebx_3 / 0x64);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                uint32_t var_108_22 = (COMBINE(0, var_dc_2) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                int32_t var_108_24 = var_e4;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                i_5 = i_17;
                ebp_7 = (ebp_7 + 0x190);
                ebx_3 = (ebx_3 + 0x186a);
                var_dc_2 = (var_dc_2 + 0xc8);
                var_e4 = (var_e4 + 0x14);
                i_17 = (i_5 - 1);
            } while (i_5 != 1);
            var_98 = 0x9999999a;
            int16_t var_94;
            var_94 = 0x3fc99999;
            int16_t var_90;
            var_90 = 0x9999999a;
            int16_t var_8c;
            var_8c = 0x3fd99999;
            var_88_257;
            __builtin_strncpy(&var_88_257, "3333", 4);
            var_84 = 0x3fe33333;
            var_80 = 0x9999999a;
            var_7c = 0x3fe99999;
            int32_t var_78_1 = 0;
            int32_t var_74_1 = 0x3ff80000;
            int32_t var_70_1 = 0;
            int32_t var_6c_1 = 0x40080000;
            int32_t var_68_1 = 0;
            int32_t var_64_1 = 0x40120000;
            int32_t var_60_1 = 0;
            int32_t var_5c_1 = 0x40180000;
            int16_t* ebx_4 = &var_98;
            int32_t i_27 = 8;
            int32_t i_6;
            do
            {
                int32_t var_108_26 = *(ebx_4 + 4);
                int32_t var_10c_4 = *ebx_4;
                CString::Format(&lParam, "%0.1f");
                SendMessageA(*(arg1 + 0x478), 0x143, nullptr, lParam);
                SendMessageA(*(arg1 + 0x438), 0x143, nullptr, lParam);
                ebx_4 = &ebx_4[4];
                i_6 = i_27;
                i_27 = (i_27 - 1);
            } while (i_6 != 1);
        }
        bool cond:1_1 = data_43610a != 3;
        var_98 = 0x32;
        int16_t var_96_1 = 0x50;
        int16_t var_94_1 = 0x6e;
        var_92_2133;
        __builtin_memcpy(&var_92_2133, "\x8c\x00\xaa\x00\xc8\x00\xe6\x00\x04\x01\x22\x01\x40\x01\x5e\x01\x90\x01\xf4\x01\x58\x02\x20\x03\xe8\x03", 0x1a);
        var_b8 = 0x14;
        int16_t var_b6_1 = 0x1e;
        int16_t var_b4_1 = 0x28;
        int16_t var_b2_1 = 0x32;
        int16_t var_b0_1 = 0x3c;
        int16_t var_ae_1 = 0x46;
        int16_t var_ac_1 = 0x50;
        int16_t var_aa_1 = 0x5a;
        int16_t var_a8_1 = 0x64;
        int16_t var_a6_1 = 0x6e;
        int16_t var_a4_1 = 0x78;
        int16_t var_a2_1 = 0x82;
        int16_t var_a0_1 = 0x8c;
        int16_t var_9e_1 = 0xa0;
        int16_t var_9c_1 = 0xb4;
        int16_t var_9a_1 = 0xc8;
        var_d8 = 0x32;
        int16_t var_d6_1 = 0x64;
        var_d4_2344;
        __builtin_memcpy(&var_d4_2344, "\xc8\x00\x90\x01\x58\x02\x20\x03\xe8\x03\xd0\x07\xa0\x0f\x70\x17\x40\x1f\x10\x27\x98\x3a", 0x16);
        var_be_2410;
        __builtin_strncpy(&var_be_2410, " N0u", 4);
        int16_t var_ba_1 = 0x9c40;
        if ((!cond:1_1))
        {
            int32_t ebx_5 = 0;
            int32_t ebp_8 = 0;
            i_17 = 0x10;
            int32_t i_7;
            do
            {
                int32_t eax_47;
                eax_47 = *(&var_98 + ebp_8);
                uint32_t var_108_29 = (COMBINE(0, (eax_47 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                int32_t var_108_31 = ebx_5;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                int32_t eax_51;
                eax_51 = *(&var_b8 + ebp_8);
                uint32_t var_108_33 = (COMBINE(0, (eax_51 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                int32_t eax_55;
                eax_55 = *(&var_d8 + ebp_8);
                int32_t var_108_35 = eax_55;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                i_7 = i_17;
                ebx_5 = (ebx_5 + 0x40);
                ebp_8 = (ebp_8 + 2);
                i_17 = (i_7 - 1);
            } while (i_7 != 1);
            var_98 = 0x9999999a;
            var_94_1 = 0x3fb99999;
            int16_t var_90_1;
            var_90_1 = 0x9999999a;
            int16_t var_8c_1;
            var_8c_1 = 0x3fc99999;
            var_88_2164;
            __builtin_strncpy(&var_88_2164, "3333", 4);
            int16_t var_84_1;
            var_84_1 = 0x3fd33333;
            int16_t var_80_1;
            var_80_1 = 0x9999999a;
            int16_t var_7c_1;
            var_7c_1 = 0x3fd99999;
            var_78_2746;
            __builtin_strncpy(&var_78_2746, "3333", 4);
            int32_t var_74_2 = 0x3fe33333;
            int32_t var_70_2 = 0x9999999a;
            int32_t var_6c_2 = 0x3fe99999;
            int32_t var_68_2 = 0;
            int32_t var_64_2 = 0x3ff00000;
            int32_t var_60_2 = 0;
            int32_t var_5c_2 = 0x40000000;
            int32_t var_58_1 = 0;
            int32_t var_54_1 = 0x40080000;
            int32_t var_50_1 = 0;
            int32_t var_4c_1 = 0x40100000;
            int32_t var_48_1 = 0;
            int32_t var_44_1 = 0x40180000;
            int32_t var_40_1 = 0;
            int32_t var_3c_1 = 0x40200000;
            int32_t var_38_1 = 0;
            int32_t var_34_1 = 0x40240000;
            int32_t var_30_1 = 0;
            int32_t var_2c_1 = 0x40340000;
            int32_t var_28_1 = 0;
            int32_t var_24_1 = 0x403e0000;
            int32_t var_20_1 = 0;
            var_1c = 3.0625f;
            int16_t* ebx_6 = &var_98;
            int32_t i_28 = 0x10;
            int32_t i_8;
            do
            {
                int32_t var_108_37 = *(ebx_6 + 4);
                int32_t var_10c_5 = *ebx_6;
                CString::Format(&lParam, "%0.1f");
                SendMessageA(*(arg1 + 0x478), 0x143, nullptr, lParam);
                SendMessageA(*(arg1 + 0x438), 0x143, nullptr, lParam);
                ebx_6 = &ebx_6[4];
                i_8 = i_28;
                i_28 = (i_28 - 1);
            } while (i_8 != 1);
        }
        *i_17[2] = 0xc8;
        int16_t var_e8_1 = 0x12c;
        int16_t var_e0_1 = 0x12c;
        bool cond:3_1 = data_43610a != 4;
        i_17 = 0x64;
        int16_t var_e6_1 = 0x190;
        var_e4 = 0x32;
        int16_t var_e2_1 = 0x64;
        int16_t var_de_1 = 0x1f4;
        if ((!cond:3_1))
        {
            int32_t ebp_9 = 0;
            int32_t i_21 = 4;
            int32_t i_9;
            do
            {
                int32_t eax_61;
                eax_61 = *(&i_17 + ebp_9);
                uint32_t var_108_40 = (COMBINE(0, (eax_61 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                int32_t ecx_35;
                ecx_35 = *(&var_e4 + ebp_9);
                int32_t var_108_42 = ecx_35;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                int32_t eax_67;
                eax_67 = *(&var_b8 + ebp_9);
                uint32_t var_108_44 = (COMBINE(0, (eax_67 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                int32_t eax_72;
                eax_72 = *(&var_d8 + ebp_9);
                int32_t var_108_46 = eax_72;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                ebp_9 = (ebp_9 + 2);
                i_9 = i_21;
                i_21 = (i_21 - 1);
            } while (i_9 != 1);
            __builtin_memcpy(&var_98, "\x9a\x99\x99\x99\x99\x99\xb9\x3f\x9a\x99\x99\x99\x99\x99\xc9\x3f\x9a\x99\x99\x99\x99\x99\xd9\x3f\x9a\x99\x99\x99\x99\x99\xe9\x3f\x9a\x99\x99\x99\x99\x99\xf9\x3f\x9a\x99\x99\x99\x99\x99\x09\x40\x9a\x99\x99\x99\x99\x99\x19\x40\x9a\x99\x99\x99\x99\x99\x29\x40", 0x40);
            int16_t* ebp_10 = &var_98;
            int32_t i_22 = 8;
            int32_t i_10;
            do
            {
                int32_t var_108_48 = *(ebp_10 + 4);
                int32_t var_10c_6 = *ebp_10;
                CString::Format(&lParam, "%0.1f");
                SendMessageA(*(arg1 + 0x478), 0x143, nullptr, lParam);
                SendMessageA(*(arg1 + 0x438), 0x143, nullptr, lParam);
                ebp_10 = &ebp_10[4];
                i_10 = i_22;
                i_22 = (i_22 - 1);
            } while (i_10 != 1);
        }
        char eax_60 = data_43610a;
        var_98 = 0x13;
        int16_t var_96_2 = 0x1e;
        int16_t var_94_2 = 0x29;
        int16_t var_92_1 = 0x35;
        int16_t var_90_2 = 0x40;
        int16_t var_8e_1 = 0x4b;
        int16_t var_8c_2 = 0x57;
        int16_t var_8a_1 = 0x62;
        int16_t var_88_1 = 0x6e;
        int16_t var_86_1 = 0x78;
        int16_t var_84_2 = 0x84;
        int16_t var_82_1 = 0x8f;
        int16_t var_80_2 = 0x9b;
        int16_t var_7e_1 = 0xa6;
        int16_t var_7c_2 = 0xb1;
        int16_t var_7a_1 = 0xbe;
        var_d8 = 4;
        int16_t var_d6_2 = 0xa;
        int16_t var_d4_1 = 0x10;
        int16_t var_d2_1 = 0x15;
        int16_t var_d0_1 = 0x1c;
        int16_t var_ce_1 = 0x21;
        int16_t var_cc_1 = 0x26;
        int16_t var_ca_1 = 0x2c;
        int16_t var_c8_1 = 0x32;
        int16_t var_c6_1 = 0x37;
        int16_t var_c4_1 = 0x3d;
        int16_t var_c2_1 = 0x43;
        int16_t var_c0_1 = 0x49;
        int16_t var_be_1 = 0x4e;
        int16_t var_bc_1 = 0x54;
        int16_t var_ba_2 = 0x5a;
        var_b8 = 0x20;
        int16_t var_b6_2 = 0x50;
        int16_t var_b4_2 = 0xa0;
        int16_t var_b2_2 = 0x140;
        int16_t var_b0_2 = 0x280;
        int16_t var_ae_2 = 0x500;
        int16_t var_ac_2 = 0xa00;
        int16_t var_aa_2 = 0x1400;
        i_17 = 0x230;
        *i_17[2] = 0x320;
        int16_t var_e8_2 = 0x640;
        int16_t var_e6_2 = 0xc80;
        if (eax_60 == 5)
        {
            int32_t ebp_11 = 0;
            int32_t i_23 = 0x10;
            int32_t i_11;
            do
            {
                int32_t eax_76;
                eax_76 = *(&var_98 + ebp_11);
                uint32_t var_108_51 = (COMBINE(0, (eax_76 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                int32_t eax_80;
                eax_80 = *(&var_d8 + ebp_11);
                uint32_t var_108_53 = (COMBINE(0, (eax_80 * 0xa)) / var_f0);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                ebp_11 = (ebp_11 + 2);
                i_11 = i_23;
                i_23 = (i_23 - 1);
            } while (i_11 != 1);
            int16_t* ebp_12 = &var_b8;
            int32_t i_24 = 8;
            int32_t i_12;
            do
            {
                int32_t eax_84;
                eax_84 = *ebp_12;
                int32_t var_108_55 = eax_84;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                ebp_12 = &ebp_12[1];
                i_12 = i_24;
                i_24 = (i_24 - 1);
            } while (i_12 != 1);
            int32_t* ebp_13 = &i_17;
            int32_t i_25 = 4;
            int32_t i_13;
            do
            {
                int32_t eax_85;
                eax_85 = *ebp_13;
                int32_t var_108_57 = eax_85;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                ebp_13 = (ebp_13 + 2);
                i_13 = i_25;
                i_25 = (i_25 - 1);
            } while (i_13 != 1);
        }
        if (data_43610a == 6)
        {
            int32_t ebx_7 = 0x64;
            i_17 = 0x10;
            int32_t i_14;
            do
            {
                uint32_t temp0_13 = (COMBINE(0, ebx_7) / var_f0);
                uint32_t var_108_59 = temp0_13;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4f8), 0x143, nullptr, lParam);
                uint32_t var_108_61 = (temp0_13 << 2);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3f8), 0x143, nullptr, lParam);
                i_14 = i_17;
                ebx_7 = (ebx_7 + 0x64);
                i_17 = (i_14 - 1);
            } while (i_14 != 1);
            int32_t ebx_8 = 2;
            int32_t i_29 = 0x10;
            int32_t i_15;
            do
            {
                int32_t var_108_63 = ebx_8;
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x4b8), 0x143, nullptr, lParam);
                ebx_8 = (ebx_8 + 2);
                i_15 = i_29;
                i_29 = (i_29 - 1);
            } while (i_15 != 1);
            int32_t ebx_9 = 0x271;
            int32_t i_30 = 0x10;
            int32_t i_16;
            do
            {
                uint32_t var_108_65 = (ebx_9 / 0xa);
                CString::Format(&lParam, &data_431074);
                SendMessageA(*(arg1 + 0x3b8), 0x143, nullptr, lParam);
                ebx_9 = (ebx_9 + 0x271);
                i_16 = i_30;
                i_30 = (i_30 - 1);
            } while (i_16 != 1);
        }
        CWnd::UpdateData(arg1, 0);
    }
    int32_t var_c_2 = 0xffffffff;
    int32_t eax_90 = CString::~CString(&lParam);
    *fsbase = var_14;
    var_4;
    return eax_90;
}

int32_t __fastcall sub_40fa90(CWnd* arg1)
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_4287c0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* _Buffer_1;
    char* _Buffer = _Buffer_1;
    void var_2c;
    CString::CString(&var_2c);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    int32_t eax_1 = CString::Find((arg1 + 0x630), 0x2e);
    int32_t var_28;
    int32_t eax_4;
    if (eax_1 == 0xffffffff)
    {
        sscanf(*(arg1 + 0x630), &data_431074, &var_28);
        eax_4 = (var_28 * 0xa);
    }
    else
    {
        var_8 = 1;
        float var_24;
        CString::operator=(&_Buffer, CString::Left((arg1 + 0x630), &var_24));
        var_8 = 0;
        CString::~CString(&var_28);
        sscanf(_Buffer, &data_431d34, &var_24, (eax_1 + 2));
        eax_4 = _ftol();
    }
    var_28 = eax_4;
    if (eax_4 != 0)
    {
        char eax_8 = SendMessageA(*(arg1 + 0x4b8), 0x147, nullptr, nullptr);
        char eax_9 = SendMessageA(*(arg1 + 0x4f8), 0x147, nullptr, nullptr);
        char eax_11 = SendMessageA(*(arg1 + 0x3f8), 0x147, nullptr, nullptr);
        char eax_12 = SendMessageA(*(arg1 + 0x3b8), 0x147, nullptr, nullptr);
        char eax_13 = SendMessageA(*(arg1 + 0x478), 0x147, nullptr, nullptr);
        char eax_15 = SendMessageA(*(arg1 + 0x438), 0x147, nullptr, nullptr);
        sub_40e8d0(arg1);
        SendMessageA(*(arg1 + 0x4b8), 0x14e, eax_8, nullptr);
        SendMessageA(*(arg1 + 0x4f8), 0x14e, eax_9, nullptr);
        SendMessageA(*(arg1 + 0x3f8), 0x14e, eax_11, nullptr);
        SendMessageA(*(arg1 + 0x3b8), 0x14e, eax_12, nullptr);
        SendMessageA(*(arg1 + 0x478), 0x14e, eax_13, nullptr);
        SendMessageA(*(arg1 + 0x438), 0x14e, eax_15, nullptr);
        CWnd::UpdateData(arg1, 0);
        int32_t var_4_2 = 0xffffffff;
        int32_t eax_26 = CString::~CString(&var_2c);
        *fsbase = var_c;
        return eax_26;
    }
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_7 = CString::~CString(&var_2c);
    *fsbase = var_c;
    return eax_7;
}

int32_t __fastcall sub_40fcd0(CWnd* arg1)
{
    CWnd* var_4 = arg1;
    CWnd::UpdateData(arg1, 1);
    var_4 = SendMessageA(*(arg1 + 0x4f8), 0x147, nullptr, nullptr);
    if (data_43610a == 6)
    {
        SendMessageA(*(arg1 + 0x3f8), 0x14e, var_4, nullptr);
    }
    return CWnd::UpdateData(arg1, 0);
}

long sub_40fd30()
{
    CWnd* ecx;
    return CWnd::Default(ecx);
}

CProgressCtrl* __thiscall sub_40fd40(CProgressCtrl* arg1, char arg2)
{
    CProgressCtrl::~CProgressCtrl(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void*** __thiscall sub_40fd60(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4287e3;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x8e, arg2);
    int32_t var_4 = 0;
    sub_416590(&esi[0x21]);
    var_4 = 1;
    CWnd::CWnd(&esi[0x32]);
    int32_t ecx_2 = var_c;
    esi[0x32] = &data_42adb8;
    *esi = &data_42aee8;
    *fsbase = ecx_2;
    return esi;
}

CDialog* __thiscall sub_40fde0(CDialog* arg1, char arg2)
{
    sub_409530(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __thiscall sub_40fe00(void* arg1, class CDataExchange* arg2)
{
    return DDX_Control(arg2, 0x475, (arg1 + 0xc8));
}

int32_t sub_40fe20() __pure
{
    return CDialog::messageMap;
}

int32_t sub_40fe30() __pure
{
    return 0x42ae80;
}

void __thiscall sub_40fe40(CDialog* this)
{
    /* tailcall */
    return CDialog::OnOK(this);
}

void __thiscall sub_40fe50(CDialog* this)
{
    /* tailcall */
    return CDialog::OnCancel(this);
}

int32_t __fastcall sub_40fe60(CDialog* arg1)
{
    CDialog::OnInitDialog(arg1);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 1), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 2), 0);
    SendMessageA(*(arg1 + 0xe8), 0x401, nullptr, 0x320000);
    SendMessageA(*(arg1 + 0xe8), 0x402, nullptr, nullptr);
    SetTimer(*(arg1 + 0x20), 1, 0x14, nullptr);
    *(arg1 + 0x108) = GetTickCount();
    return 1;
}

long __thiscall sub_40fee0(CWnd* arg1, int32_t arg2)
{
    if (arg2 == 1)
    {
        if (sub_404a90() != 0)
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 1);
            int32_t eax_2;
            if (arg1 != 0)
            {
                eax_2 = *(arg1 + 0x20);
            }
            else
            {
                eax_2 = 0;
            }
            int32_t ecx = *(arg1 + 0x60);
            *(arg1 + 0x78) = eax_2;
            *(arg1 + 0x80) = ecx;
            *(arg1 + 0x68) = (arg1 + 0xc8);
            *(arg1 + 0x70) = (arg1 + 0xc0);
            *(arg1 + 0x7c) = (arg1 + 0xc4);
            data_4360ec = AfxBeginThread(sub_420690, (arg1 + 0x68), 0, 0, 0, nullptr);
            return CWnd::Default(arg1);
        }
        if ((GetTickCount() - *(arg1 + 0x108)) > 0x1388)
        {
            KillTimer(*(arg1 + 0x20), 1);
            CWnd::MessageBoxA(arg1, "communication port is being occu…", "Prompt", 0x20);
        }
    }
    return CWnd::Default(arg1);
}

int32_t __stdcall sub_40ffa0(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __fastcall sub_40ffd0(CWnd* arg1)
{
    int32_t var_8;
    if (*(arg1 + 0xc0) != 0)
    {
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 1), 5);
        var_8 = 0;
    }
    else
    {
        if (*(arg1 + 0xc4) != 0)
        {
            CWnd::MessageBoxA(arg1, &data_431d14, "Prompt", 0x20);
        }
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 1), 0);
        var_8 = 5;
    }
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 2), var_8);
    return 0;
}

long __fastcall sub_410040(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t* __fastcall sub_410080(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428811;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    CWnd::CWnd(arg1);
    esi[0x1a] = 0x42b130;
    int32_t var_4 = 0;
    esi[0x1b] = 0;
    esi[0x1e] = 0;
    esi[0x1d] = 0;
    esi[0x1c] = 0;
    esi[0x24] = 0;
    esi[0x23] = 0x42b11c;
    var_4 = 2;
    *esi = 0x42b058;
    esi[0x10] = 0xd92626;
    esi[0x11] = 0xf5ded7;
    esi[0x12] = 0xfff0e8;
    esi[0x13] = 0;
    esi[0x14] = 0xe6e0db;
    esi[0x15] = 0;
    esi[0x16] = 0xf6f3ef;
    esi[0x17] = 0;
    esi[0x18] = 0xd8e9ec;
    esi[0x19] = 0x99a8ac;
    esi[0x20] = 0;
    *(esi + 0x81) = 0;
    esi[0x25] = 1;
    CGdiObject::Attach(&esi[0x23], CreatePen(PS_COSMETIC, 0, 0xffff));
    *fsbase = var_c;
    return esi;
}

int32_t* __thiscall sub_410150(int32_t* arg1, char arg2)
{
    sub_410170(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_410170(int32_t* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428849;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_14 = arg1;
    *arg1 = 0x42b058;
    int32_t var_4 = 2;
    CGdiObject::DeleteObject(&arg1[0x23]);
    sub_411350(&arg1[0x1a], nullptr, 0xffffffff);
    void* var_10 = &arg1[0x23];
    arg1[0x23] = 0x42a6d0;
    var_4 = 3;
    CGdiObject::DeleteObject(&arg1[0x23]);
    arg1[0x23] = 0x42a6e4;
    void* eax_1 = arg1[0x1b];
    arg1[0x1a] = 0x42b130;
    if (eax_1 != 0)
    {
        operator delete(eax_1);
    }
    arg1[0x1a] = 0x42a6e4;
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_2 = CTabCtrl::~CTabCtrl(arg1);
    *fsbase = var_c;
    return eax_2;
}

int32_t sub_410220() __pure
{
    return CTabCtrl::messageMap;
}

int32_t sub_410230() __pure
{
    return 0x42afc0;
}

int32_t __fastcall sub_410240(CWnd* arg1)
{
    CWnd::PreSubclassWindow(arg1);
    return CWnd::ModifyStyle(arg1, 0, 0x2000, 0);
}

int32_t DBI1::DeleteMod() __pure
{
    return 1;
}

int32_t __fastcall sub_410270(class CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428886;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_60;
    CPaintDC::CPaintDC(&var_60, arg1);
    int32_t var_4 = 0;
    int32_t var_84 = 0;
    int32_t var_88 = 0x42b144;
    var_4 = 1;
    CDC var_70;
    CDC::CDC(&var_70);
    var_4 = 2;
    int32_t lpRect;
    GetClientRect(*(arg1 + 0x20), &lpRect);
    int32_t var_7c;
    int32_t var_78;
    int32_t var_74;
    HDC hdc;
    CGdiObject::Attach(&var_88, CreateCompatibleBitmap(hdc, (var_78 - lpRect), (var_74 - var_7c)));
    int32_t eax_4 = (-&var_60);
    CDC::Attach(&var_70, CreateCompatibleDC(((eax_4 - eax_4) & hdc)));
    int32_t eax_8 = (-&var_88);
    struct HDC__* var_6c;
    CDC::SelectGdiObject(var_6c, ((eax_8 - eax_8) & var_84));
    CDC::SetBkMode(&var_70, 1);
    CDC::SetTextColor(&var_70, 0xff);
    CDC::FillSolidRect(&var_70, 0, 0, (var_78 - lpRect), (var_74 - var_7c), *(arg1 + 0x48));
    sub_410450(arg1, &var_70);
    CDC::SetROP2(&var_70, 0x10);
    int32_t eax_16 = (-&var_70);
    BitBlt(hdc, 0, 0, (var_78 - lpRect), (var_74 - var_7c), ((eax_16 - eax_16) & var_6c), 0, 0, SRCCOPY);
    CGdiObject::DeleteObject((arg1 + 0x8c));
    CGdiObject::DeleteObject(&var_88);
    CDC::DeleteDC(&var_70);
    var_4 = 1;
    CDC::~CDC(&var_70);
    var_88 = 0x42a6d0;
    var_4 = 3;
    CGdiObject::DeleteObject(&var_88);
    var_88 = 0x42a6e4;
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_19 = CPaintDC::~CPaintDC(&var_60);
    *fsbase = var_c;
    return eax_19;
}

LRESULT __thiscall sub_410450(CWnd* arg1, CDC* arg2)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_4288a6;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const lprc = 0;
    int32_t lpRect;
    GetClientRect(*(arg1 + 0x20), &lpRect);
    void* eax = operator new(0x30);
    *(eax + 4) = CWnd::GetDlgCtrlID(arg1);
    *eax = 0x65;
    int32_t eax_2;
    if (arg1 != 0)
    {
        eax_2 = *(arg1 + 0x20);
    }
    else
    {
        eax_2 = 0;
    }
    *(eax + 0x14) = eax_2;
    int32_t eax_3;
    if (arg2 != 0)
    {
        eax_3 = *(arg2 + 4);
    }
    else
    {
        eax_3 = 0;
    }
    *(eax + 0x18) = eax_3;
    *(eax + 0xc) = 1;
    LRESULT var_f8 = SendMessageA(*(arg1 + 0x20), 0x1304, nullptr, nullptr);
    LRESULT wParam_1 = SendMessageA(*(arg1 + 0x20), 0x130b, nullptr, nullptr);
    LRESULT eax_6 = var_f8;
    if (eax_6 != 0)
    {
        class CGdiObject* eax_8 = CGdiObject::FromHandle(SendMessageA(*(arg1 + 0x20), 0x31, nullptr, nullptr));
        void pv;
        GetObjectA(*(eax_8 + 4), 0x3c, &pv);
        int32_t lpRect_4;
        SendMessageA(*(arg1 + 0x20), 0x130a, nullptr, &lpRect_4);
        int32_t lpRect_1 = lpRect;
        int32_t var_c8;
        int32_t var_f0_1 = var_c8;
        int32_t var_c4;
        int32_t var_ec_1 = var_c4;
        int32_t var_fc;
        int32_t var_e8_1 = var_fc;
        CDC::FillSolidRect(arg2, &lpRect_1, *(arg1 + 0x44));
        var_f8 = (var_f8 - 1);
        while (true)
        {
            void var_4c;
            void* var_a8_1 = &var_4c;
            HWND hWnd = *(arg1 + 0x20);
            WPARAM wParam = var_f8;
            int32_t lParam = 0xb;
            int32_t var_a4_1 = 0x3f;
            eax_6 = SendMessageA(hWnd, 0x1305, wParam, &lParam);
            if (eax_6 == 0)
            {
                break;
            }
            LRESULT wParam_2 = var_f8;
            int32_t var_11c_14;
            CWnd* var_9c;
            HFONT ebp_4;
            int32_t var_104;
            int32_t var_100;
            void* var_d8;
            void lplf;
            if (wParam_2 == wParam_1)
            {
                *(eax + 8) = wParam_1;
                *(eax + 0x10) = 1;
                SendMessageA(*(arg1 + 0x20), 0x130a, wParam_1, (eax + 0x1c));
                int32_t ebp_5 = *(eax + 0x20);
                *(eax + 0x28) = (*(eax + 0x28) + 2);
                *(eax + 0x20) = (ebp_5 - 2);
                CopyRect(&lpRect_4, (eax + 0x1c));
                int32_t eax_35 = *(*arg2 + 0x24)();
                CGdiObject::DeleteObject((arg1 + 0x8c));
                uint32_t color_1;
                int32_t ecx_37;
                if (*(arg1 + 0x80) == 1)
                {
                    ecx_37 = *(arg1 + 0x81);
                    if (var_f8 == ecx_37)
                    {
                        color_1 = 0xe6e0db;
                    }
                }
                if ((*(arg1 + 0x80) != 1 || (*(arg1 + 0x80) == 1 && var_f8 != ecx_37)))
                {
                    color_1 = *(arg1 + 0x40);
                }
                CGdiObject::Attach((arg1 + 0x8c), CreatePen(PS_COSMETIC, 1, color_1));
                CDC::SelectObject(arg2, (arg1 + 0x8c));
                var_100 = (var_100 - 4);
                int32_t lpRect_6 = (lpRect_4 - 2);
                lpRect_4 = lpRect_6;
                var_fc = (var_fc - 2);
                void var_98;
                CDC::MoveTo(arg2, &var_98, lpRect_6);
                CDC::LineTo(arg2, lprc, var_100);
                CDC::LineTo(arg2, var_9c, var_100);
                CDC::LineTo(arg2, var_9c, (var_c4 - 1));
                CDC::LineTo(arg2, (var_c8 - 1), (var_c4 - 1));
                CDC::LineTo(arg2, (var_c8 - 1), var_100);
                CDC::LineTo(arg2, var_104, var_100);
                CDC::LineTo(arg2, var_104, lpRect_4);
                CDC::LineTo(arg2, lprc, lpRect_4);
                int32_t lpRect_2 = lpRect_4;
                var_f8 = lprc;
                lpRect_1 = lpRect_2;
                int32_t var_f0_3 = var_104;
                int32_t var_ec_3 = var_100;
                CRect::DeflateRect(&var_f8, 1, 1, 0, 0xffffffff);
                CDC::FillSolidRect(arg2, &var_f8, *(arg1 + 0x48));
                int32_t var_7c_2 = 0x258;
                ebp_4 = CreateFontIndirectA(&lplf);
                if (ebp_4 != 0)
                {
                    SelectObject(*(arg2 + 4), ebp_4);
                }
                OffsetRect(&lprc, 0, 3);
                CDC::SetBkMode(arg2, 1);
                *(*arg2 + 0x38)(0, var_104);
                CString::CString(&var_d8, &var_4c);
                void* eax_51 = var_d8;
                int32_t var_4_3 = 1;
                *(*arg2 + 0x70)(eax_51, *(eax_51 - 8), &lpRect_4, 0x2d);
                int32_t var_4_4 = 0xffffffff;
                CString::~CString(&var_d8);
                DeleteObject(ebp_4);
                *(*arg2 + 0x28)(eax_35);
                var_11c_14 = 5;
            }
            else
            {
                *(eax + 8) = wParam_2;
                *(eax + 0x10) = 0;
                SendMessageA(*(arg1 + 0x20), 0x130a, wParam_2, (eax + 0x1c));
                CopyRect(&lpRect_4, (eax + 0x1c));
                int32_t eax_16 = *(*arg2 + 0x24)();
                CGdiObject::DeleteObject((arg1 + 0x8c));
                uint32_t color;
                int32_t ecx_11;
                if (*(arg1 + 0x80) == 1)
                {
                    ecx_11 = *(arg1 + 0x81);
                    if (var_f8 == ecx_11)
                    {
                        int32_t var_dc_1 = *(arg1 + 0x58);
                        int32_t var_d4_1 = *(arg1 + 0x5c);
                        color = 0xe6e0db;
                    }
                }
                if ((*(arg1 + 0x80) != 1 || (*(arg1 + 0x80) == 1 && var_f8 != ecx_11)))
                {
                    int32_t var_dc_2 = *(arg1 + 0x50);
                    int32_t var_d4_2 = *(arg1 + 0x54);
                    color = *(arg1 + 0x40);
                }
                CGdiObject::Attach((arg1 + 0x8c), CreatePen(PS_COSMETIC, 1, color));
                CDC::SelectObject(arg2, (arg1 + 0x8c));
                int32_t lpRect_5 = (lpRect_4 - 2);
                lpRect_4 = lpRect_5;
                var_100 = (var_100 - 4);
                void var_90;
                CDC::MoveTo(arg2, &var_90, lpRect_5);
                CDC::LineTo(arg2, lprc, lpRect_4);
                CDC::LineTo(arg2, var_104, lpRect_4);
                CDC::LineTo(arg2, var_104, var_100);
                int32_t lpRect_3 = lpRect_4;
                var_f8 = lprc;
                lpRect_1 = lpRect_3;
                int32_t var_f0_2 = var_104;
                int32_t var_ec_2 = var_100;
                CRect::DeflateRect(&var_f8, 1, 1, 0, 0);
                unsigned long var_e0;
                CDC::FillSolidRect(arg2, &var_f8, var_e0);
                int32_t var_7c_1 = 0x190;
                ebp_4 = CreateFontIndirectA(&lplf);
                if (ebp_4 != 0)
                {
                    SelectObject(*(arg2 + 4), ebp_4);
                }
                OffsetRect(&lprc, 0, 3);
                CDC::SetBkMode(arg2, 1);
                *(*arg2 + 0x38)(var_d8, var_fc);
                CString::CString(&var_e0, &var_4c);
                unsigned long eax_28 = var_e0;
                int32_t var_4_1 = 0;
                *(*arg2 + 0x70)(eax_28, *(eax_28 - 8), &lpRect_4, 0x2d);
                int32_t var_4_2 = 0xffffffff;
                CString::~CString(&var_e0);
                DeleteObject(ebp_4);
                *(*arg2 + 0x28)(eax_16);
                var_11c_14 = 0;
            }
            CWnd::ShowWindow(var_9c, var_11c_14);
            LRESULT eax_53 = var_f8;
            var_f8 = (eax_53 - 1);
            if (eax_53 == 0)
            {
                DeleteObject(ebp_4);
                *(*arg2 + 0x30)(eax_8);
                eax_6 = operator delete(eax);
                break;
            }
        }
    }
    *fsbase = var_c;
    return eax_6;
}

void* __thiscall sub_410a50(void* arg1, CWnd* arg2, void* arg3, void* arg4)
{
    WPARAM wParam = *(arg1 + 0x70);
    void* var_10 = arg3;
    HWND hWnd = *(arg1 + 0x20);
    int32_t lParam_1 = 0xb;
    CWnd* var_4 = arg2;
    void* var_8 = arg4;
    SendMessageA(hWnd, 0x1307, wParam, &lParam_1);
    int32_t lpRect;
    GetClientRect(*(arg1 + 0x20), &lpRect);
    void lParam;
    SendMessageA(*(arg1 + 0x20), 0x130a, wParam, &lParam);
    int32_t var_34;
    int32_t var_30;
    int32_t var_20;
    CWnd::SetWindowPos(arg2, CWnd::wndTop, (lpRect + 1), (var_20 + 1), (var_34 - 2), ((var_30 - (var_20 + 1)) - 2), 0x80);
    int32_t esi = (-wParam);
    CWnd::ShowWindow(arg2, (((esi - esi) & 0xfffffffb) + 5));
    void* eax_4 = *(arg1 + 0x70);
    if (eax_4 != 0xffffffff)
    {
        int32_t edx_5 = *(arg1 + 0x6c);
        if (edx_5 != 0)
        {
            void* edi_3 = *(arg1 + 0x74);
            if ((eax_4 + 1) > edi_3)
            {
                int32_t ecx_14 = *(arg1 + 0x78);
                if (ecx_14 == 0)
                {
                    int32_t eax_7;
                    int32_t edx_8;
                    edx_8 = HIGHD(eax_4);
                    eax_7 = LOWD(eax_4);
                    ecx_14 = ((eax_7 + (edx_8 & 7)) >> 3);
                    if (ecx_14 < 4)
                    {
                        ecx_14 = 4;
                    }
                    else if (ecx_14 > 0x400)
                    {
                        ecx_14 = 0x400;
                    }
                }
                CWnd* eax_9 = (edi_3 + ecx_14);
                arg2 = eax_9;
                if ((eax_4 + 1) >= eax_9)
                {
                    arg2 = (eax_4 + 1);
                }
                void* eax_11 = operator new((arg2 << 2));
                int32_t ecx_17 = (*(arg1 + 0x70) << 2);
                __builtin_memcpy(eax_11, *(arg1 + 0x6c), ((ecx_17 >> 2) << 2));
                int32_t esi_6;
                int32_t edi_6;
                __builtin_memcpy(edi_6, esi_6, (ecx_17 & 3));
                int32_t edx_12 = *(arg1 + 0x70);
                __builtin_memset((eax_11 + (edx_12 << 2)), 0, (((eax_4 + 1) - edx_12) << 2));
                operator delete(*(arg1 + 0x6c));
                *(arg1 + 0x6c) = eax_11;
                *(arg1 + 0x70) = (eax_4 + 1);
                *(arg1 + 0x74) = arg2;
                *(eax_11 + (eax_4 << 2)) = 1;
                return eax_11;
            }
            if ((eax_4 + 1) > eax_4)
            {
                __builtin_memset((edx_5 + (eax_4 << 2)), 0, (((eax_4 * 0) + 1) << 2));
            }
            int32_t ecx_13 = *(arg1 + 0x6c);
            *(arg1 + 0x70) = (eax_4 + 1);
            *(ecx_13 + (eax_4 << 2)) = 1;
            return eax_4;
        }
        int32_t edi_1 = ((eax_4 + 1) << 2);
        void* s = operator new(edi_1);
        *(arg1 + 0x6c) = s;
        __builtin_memset(s, 0, ((edi_1 >> 2) << 2));
        int32_t s_1;
        __builtin_memset(s_1, 0, (edi_1 & 3));
        int32_t eax_6 = *(arg1 + 0x6c);
        *(arg1 + 0x74) = (eax_4 + 1);
        *(arg1 + 0x70) = (eax_4 + 1);
        *(eax_6 + (eax_4 << 2)) = 1;
        return eax_6;
    }
    void* eax_5 = *(arg1 + 0x6c);
    if (eax_5 != 0)
    {
        eax_5 = operator delete(eax_5);
        *(arg1 + 0x6c) = (eax_4 + 1);
    }
    int32_t edx_4 = *(arg1 + 0x6c);
    *(arg1 + 0x74) = 0;
    *(arg1 + 0x70) = 0;
    *(edx_4 + (eax_4 << 2)) = 1;
    return eax_5;
}

int32_t* __thiscall sub_410c60(void* arg1, WPARAM arg2, int32_t arg3)
{
    int32_t eax = *(arg1 + 0x6c);
    int32_t* eax_1 = (eax + (arg2 << 2));
    if (*(eax + (arg2 << 2)) != arg3)
    {
        *eax_1 = arg3;
        void var_10;
        SendMessageA(*(arg1 + 0x20), 0x130a, arg2, &var_10);
        eax_1 = InvalidateRect(*(arg1 + 0x20), &var_10, 1);
    }
    return eax_1;
}

LRESULT __fastcall sub_410cb0(void* arg1)
{
    sub_411350((arg1 + 0x68), nullptr, 0xffffffff);
    return SendMessageA(*(arg1 + 0x20), 0x1309, nullptr, nullptr);
}

LRESULT __thiscall sub_410ce0(void* arg1, WPARAM arg2)
{
    int32_t ecx = *(arg1 + 0x6c);
    int32_t eax_1 = (*(arg1 + 0x70) - arg2);
    if (eax_1 != 1)
    {
        memmove((ecx + (arg2 << 2)), ((ecx + (arg2 << 2)) + 4), ((eax_1 - 1) << 2));
    }
    *(arg1 + 0x70) = (*(arg1 + 0x70) - 1);
    return SendMessageA(*(arg1 + 0x20), 0x1308, arg2, nullptr);
}

int32_t __thiscall sub_410d30(void* arg1, int32_t arg2)
{
    return *(*(arg1 + 0x6c) + (arg2 << 2));
}

LRESULT __fastcall sub_410d40(void* arg1)
{
    return SendMessageA(*(arg1 + 0x20), 0x130b, nullptr, nullptr);
}

int32_t __thiscall sub_410d60(void* arg1, WPARAM arg2)
{
    if (SendMessageA(*(arg1 + 0x20), 0x130b, nullptr, nullptr) == arg2)
    {
        return 1;
    }
    if (*(*(arg1 + 0x6c) + (arg2 << 2)) == 0)
    {
        return 0;
    }
    HWND hWnd = *(arg1 + 0x20);
    int32_t lParam = 8;
    LRESULT wParam = SendMessageA(hWnd, 0x130b, nullptr, nullptr);
    SendMessageA(*(arg1 + 0x20), 0x1305, wParam, &lParam);
    CWnd* var_4;
    CWnd::ShowWindow(var_4, 0);
    SendMessageA(*(arg1 + 0x20), 0x130c, arg2, nullptr);
    SendMessageA(*(arg1 + 0x20), 0x1305, arg2, &lParam);
    CWnd::ShowWindow(var_4, 5);
    return 1;
}

int32_t __thiscall sub_410e20(void* arg1, int32_t arg2)
{
    *(arg1 + 0x44) = arg2;
    return arg2;
}

int32_t __thiscall sub_410e30(void* arg1, int32_t arg2)
{
    *(arg1 + 0x40) = arg2;
    return arg2;
}

int32_t __thiscall sub_410e40(void* arg1, int32_t arg2)
{
    *(arg1 + 0x48) = arg2;
    return arg2;
}

int32_t sub_410e50() __pure
{
    return;
}

int32_t sub_410e60() __pure
{
    return;
}

int32_t sub_410e70() __pure
{
    return;
}

int32_t sub_410e80() __pure
{
    return;
}

int32_t __thiscall sub_410e90(void* arg1, int32_t arg2)
{
    *(arg1 + 0x94) = arg2;
    return arg2;
}

long __thiscall sub_410ea0(CWnd* arg1, int32_t arg2, int32_t arg3)
{
    if (*(arg1 + 0x94) == 1)
    {
        int32_t ecx = *(arg1 + 0x20);
        int32_t lpEventTrack = 0x10;
        int32_t var_8_1 = ecx;
        int32_t var_c_1 = 3;
        int32_t var_4_1 = 1;
        _TrackMouseEvent(&lpEventTrack);
        *(arg1 + 0x84) = arg2;
        *(arg1 + 0x88) = arg3;
    }
    return CWnd::Default(arg1);
}

LRESULT __fastcall sub_410f00(CWnd* arg1)
{
    char eax = *(arg1 + 0x81);
    LRESULT eax_1 = *(arg1 + 0x94);
    if (eax_1 == 1)
    {
        int32_t var_38;
        GetCursorPos(&var_38);
        eax_1 = SendMessageA(*(arg1 + 0x20), 0x1304, nullptr, nullptr);
        LRESULT ebp_1 = eax_1;
        WPARAM wParam = nullptr;
        if (ebp_1 > 0)
        {
            do
            {
                int32_t lParam;
                SendMessageA(*(arg1 + 0x20), 0x130a, wParam, &lParam);
                int32_t var_1c;
                int32_t var_2c_1 = var_1c;
                int32_t lprc = lParam;
                int32_t var_18;
                int32_t var_28_1 = var_18;
                int32_t var_14;
                int32_t var_24_1 = var_14;
                CWnd::ClientToScreen(arg1, &lprc);
                int32_t var_34;
                int32_t var_50_4 = var_34;
                eax_1 = PtInRect(&lprc, var_38);
                if (eax_1 != 0)
                {
                    HWND hWnd = *(arg1 + 0x20);
                    *(arg1 + 0x81) = wParam;
                    *(arg1 + 0x80) = 1;
                    SendMessageA(hWnd, 0x130a, nullptr, &lParam);
                    void lParam_1;
                    SendMessageA(*(arg1 + 0x20), 0x130a, (ebp_1 - 1), &lParam_1);
                    eax_1 = eax;
                    if (eax_1 != *(arg1 + 0x81))
                    {
                        eax_1 = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
                    }
                }
                wParam = (wParam + 1);
            } while (wParam < ebp_1);
        }
    }
    return eax_1;
}

int32_t __fastcall sub_411010(void* arg1)
{
    LRESULT eax_1 = SendMessageA(*(arg1 + 0x20), 0x1304, nullptr, nullptr);
    if (*(arg1 + 0x94) == 1)
    {
        *(arg1 + 0x81) = 0xff;
        if (eax_1 > 0)
        {
            void lParam;
            SendMessageA(*(arg1 + 0x20), 0x130a, nullptr, &lParam);
            void lParam_1;
            SendMessageA(*(arg1 + 0x20), 0x130a, (eax_1 - 1), &lParam_1);
            InvalidateRect(*(arg1 + 0x20), nullptr, 1);
        }
        *(arg1 + 0x80) = 0;
    }
    return 0;
}

void* __thiscall sub_411090(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_4110b0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t __fastcall sub_4110b0(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4288b8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

void* __thiscall sub_411100(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_411120(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t __fastcall sub_411120(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4288d8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

void* __fastcall sub_411170(int32_t* arg1)
{
    void* eax = arg1[1];
    *arg1 = 0x42b130;
    if (eax != 0)
    {
        eax = operator delete(eax);
    }
    *arg1 = 0x42a6e4;
    return eax;
}

uint32_t __thiscall sub_4111a0(void* arg1, CArchive* arg2)
{
    CArchive* esi = arg2;
    if (((!*(esi + 0x14)) & 1) != 0)
    {
        CArchive::WriteCount(esi, *(arg1 + 8));
    }
    else
    {
        unsigned long eax_2 = CArchive::ReadCount(esi);
        if (eax_2 != 0)
        {
            int32_t edx_1 = *(arg1 + 4);
            if (edx_1 != 0)
            {
                int32_t ecx_7 = *(arg1 + 0xc);
                if (eax_2 > ecx_7)
                {
                    int32_t eax_5 = *(arg1 + 0x10);
                    if (eax_5 == 0)
                    {
                        int32_t eax_7;
                        int32_t edx_4;
                        edx_4 = HIGHD(*(arg1 + 8));
                        eax_7 = LOWD(*(arg1 + 8));
                        eax_5 = ((eax_7 + (edx_4 & 7)) >> 3);
                        if (eax_5 < 4)
                        {
                            eax_5 = 4;
                        }
                        else if (eax_5 > 0x400)
                        {
                            eax_5 = 0x400;
                        }
                    }
                    unsigned long eax_9 = (eax_5 + ecx_7);
                    unsigned long var_8_1 = eax_9;
                    if (eax_2 >= eax_9)
                    {
                        var_8_1 = eax_2;
                    }
                    void* eax_11 = operator new((var_8_1 << 2));
                    int32_t ecx_12 = (*(arg1 + 8) << 2);
                    __builtin_memcpy(eax_11, *(arg1 + 4), ((ecx_12 >> 2) << 2));
                    int32_t esi_2;
                    int32_t edi_5;
                    __builtin_memcpy(edi_5, esi_2, (ecx_12 & 3));
                    int32_t edx_7 = *(arg1 + 8);
                    __builtin_memset((eax_11 + (edx_7 << 2)), 0, ((eax_2 - edx_7) << 2));
                    operator delete(*(arg1 + 4));
                    esi = arg2;
                    *(arg1 + 4) = eax_11;
                    *(arg1 + 8) = eax_2;
                    *(arg1 + 0xc) = var_8_1;
                }
                else
                {
                    int32_t eax_4 = *(arg1 + 8);
                    if (eax_2 > eax_4)
                    {
                        __builtin_memset((edx_1 + (eax_4 << 2)), 0, ((eax_2 - eax_4) << 2));
                    }
                    *(arg1 + 8) = eax_2;
                }
            }
            else
            {
                uint32_t edi_1 = (eax_2 << 2);
                void* s = operator new(edi_1);
                *(arg1 + 4) = s;
                __builtin_memset(s, 0, ((edi_1 >> 2) << 2));
                int32_t s_1;
                __builtin_memset(s_1, 0, (edi_1 & 3));
                *(arg1 + 0xc) = eax_2;
                *(arg1 + 8) = eax_2;
            }
        }
        else
        {
            void* eax_3 = *(arg1 + 4);
            if (eax_3 != 0)
            {
                operator delete(eax_3);
                *(arg1 + 4) = 0;
            }
            *(arg1 + 0xc) = 0;
            *(arg1 + 8) = 0;
        }
    }
    int32_t eax_13 = *(arg1 + 8);
    void* ebx_1 = *(arg1 + 4);
    if (((!*(esi + 0x14)) & 1) == 0)
    {
        return CArchive::Read(esi, ebx_1, (eax_13 << 2));
    }
    return CArchive::Write(esi, ebx_1, (eax_13 << 2));
}

void* __thiscall sub_411330(int32_t* arg1, char arg2)
{
    void* esi = arg1;
    sub_411170(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

void* __thiscall sub_411350(void* arg1, void* arg2, void* arg3)
{
    if (arg3 != 0xffffffff)
    {
        *(arg1 + 0x10) = arg3;
    }
    if (arg2 != 0)
    {
        int32_t edx = *(arg1 + 4);
        if (edx != 0)
        {
            int32_t ecx_4 = *(arg1 + 0xc);
            if (arg2 > ecx_4)
            {
                int32_t eax_2 = *(arg1 + 0x10);
                if (eax_2 == 0)
                {
                    int32_t eax_4;
                    int32_t edx_2;
                    edx_2 = HIGHD(*(arg1 + 8));
                    eax_4 = LOWD(*(arg1 + 8));
                    eax_2 = ((eax_4 + (edx_2 & 7)) >> 3);
                    if (eax_2 < 4)
                    {
                        eax_2 = 4;
                    }
                    else if (eax_2 > 0x400)
                    {
                        eax_2 = 0x400;
                    }
                }
                void* eax_6 = (eax_2 + ecx_4);
                arg3 = eax_6;
                if (arg2 >= eax_6)
                {
                    arg3 = arg2;
                }
                void* eax_8 = operator new((arg3 << 2));
                int32_t ecx_9 = (*(arg1 + 8) << 2);
                __builtin_memcpy(eax_8, *(arg1 + 4), ((ecx_9 >> 2) << 2));
                int32_t esi_2;
                int32_t edi_4;
                __builtin_memcpy(edi_4, esi_2, (ecx_9 & 3));
                int32_t edx_5 = *(arg1 + 8);
                __builtin_memset((eax_8 + (edx_5 << 2)), 0, ((arg2 - edx_5) << 2));
                int32_t eax_10 = operator delete(*(arg1 + 4));
                *(arg1 + 8) = arg2;
                *(arg1 + 4) = eax_8;
                *(arg1 + 0xc) = arg3;
                return eax_10;
            }
            int32_t eax_1 = *(arg1 + 8);
            if (arg2 > eax_1)
            {
                __builtin_memset((edx + (eax_1 << 2)), 0, ((arg2 - eax_1) << 2));
            }
            *(arg1 + 8) = arg2;
            return eax_1;
        }
        int32_t esi = (arg2 << 2);
        void* s = operator new(esi);
        *(arg1 + 4) = s;
        __builtin_memset(s, 0, ((esi >> 2) << 2));
        int32_t s_1;
        __builtin_memset(s_1, 0, (esi & 3));
        *(arg1 + 0xc) = arg2;
        *(arg1 + 8) = arg2;
        return s;
    }
    void* eax = *(arg1 + 4);
    if (eax != 0)
    {
        eax = operator delete(eax);
        *(arg1 + 4) = 0;
    }
    *(arg1 + 0xc) = 0;
    *(arg1 + 8) = 0;
    return eax;
}

void*** __thiscall sub_411490(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428911;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0xa0, arg2);
    int32_t var_4 = 0;
    sub_412fc0(&esi[0x18]);
    var_4 = 1;
    CString::CString(&esi[0x4a]);
    var_4 = 2;
    *esi = &data_42b1a8;
    CString::operator=(&esi[0x4a], &data_435ef0);
    *fsbase = var_c;
    return esi;
}

CDialog* __thiscall sub_411510(CDialog* arg1, char arg2)
{
    sub_411530(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_411530(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428933;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 1;
    CString::~CString((arg1 + 0x128));
    var_4 = 0;
    sub_413090((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_411590(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x4b1, (arg1 + 0x60));
    return DDX_Text(arg2, 0x4af, (arg1 + 0x128));
}

int32_t sub_4115c0() __pure
{
    return CDialog::messageMap;
}

int32_t sub_4115d0() __pure
{
    return 0x42b158;
}

long __fastcall sub_4115e0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __stdcall sub_411620(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __fastcall sub_411650(CDialog* arg1)
{
    CDialog* var_4_1 = arg1;
    CWnd* edi = arg1;
    CDialog::OnInitDialog(arg1);
    void* var_10 = "                                …";
    CString::operator=((edi + 0x128), var_10);
    var_10 = &data_433614;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4335c0;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43356c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43353c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4334f4;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4334a0;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433480;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433450;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43340c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4333c8;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43338c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433368;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433318;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4332d8;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433288;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433238;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4331e4;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43319c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_43314c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433114;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_4330c0;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433098;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_433050;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_432ff8;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_432fa0;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_432f80;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_432f5c;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = &data_432f40;
    CString::operator+=((edi + 0x128), var_10);
    var_10 = nullptr;
    var_10 = CWnd::UpdateData(edi, var_10);
    void** var_4 = &var_10;
    CString::CString(&var_10, "http://www.jiabaida.com/faq/2016…");
    sub_413400((edi + 0x60));
    var_10 = 1;
    sub_4135a0((edi + 0x60), var_10);
    return 1;
}

int32_t sub_411800()
{
    CWnd* ecx;
    /* tailcall */
    return CWnd::SetFocus(CWnd::GetDlgItem(ecx, 1));
}

int32_t* __fastcall sub_411810(int32_t* arg1)
{
    *arg1 = 0x42b280;
    return arg1;
}

int32_t* __thiscall sub_411820(int32_t* arg1, char arg2)
{
    sub_411840(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_411840(int32_t* arg1)
{
    *arg1 = 0x42b280;
}

int32_t __stdcall sub_411850(int32_t arg1)
{
    int32_t edi = arg1;
    int32_t i = 0xffffffff;
    int32_t eax = 0;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx = (!i);
    char* i_1 = nullptr;
    if (ecx != 1)
    {
        do
        {
            int32_t esi_1 = (eax << 4);
            int32_t eax_1;
            eax_1 = i_1[arg1];
            if ((eax_1 < 0x30 || (eax_1 >= 0x30 && eax_1 > 0x39)))
            {
                eax = ((esi_1 + tolower(eax_1)) - 0x57);
            }
            if ((eax_1 >= 0x30 && eax_1 <= 0x39))
            {
                eax = ((esi_1 + eax_1) - 0x30);
            }
            i_1 = &i_1[1];
        } while (i_1 < (ecx - 1));
    }
    return eax;
}

uint32_t __stdcall sub_4118b0(char* arg1, char* arg2, int16_t arg3)
{
    uint32_t i_2 = arg3;
    if (i_2 > 0)
    {
        char* edx_1 = arg2;
        char* esi_1 = arg1;
        uint32_t i_1 = i_2;
        uint32_t i;
        do
        {
            char ecx = *esi_1;
            i_2 = ecx;
            ecx = (ecx & 0xf);
            i_2 = (i_2 >> 4);
            esi_1 = &esi_1[1];
            if (i_2 > 9)
            {
                i_2 = (i_2 + 0x37);
            }
            else
            {
                i_2 = (i_2 + 0x30);
            }
            *edx_1 = i_2;
            if (ecx > 9)
            {
                ecx = (ecx + 0x37);
            }
            else
            {
                ecx = (ecx + 0x30);
            }
            edx_1[1] = ecx;
            edx_1 = &edx_1[2];
            i = i_1;
            i_1 = (i_1 - 1);
        } while (i != 1);
    }
    return i_2;
}

int32_t __thiscall sub_411900(void* arg1, uint32_t arg2 @ esi, int32_t arg3, PSTR arg4)
{
    if (sub_411930(arg3, arg2, __return_addr, arg3, arg4) == 0)
    {
        sub_4123e0(arg1, arg4);
    }
    return 0;
}

int32_t sub_411930(char arg1, uint32_t arg2, char arg3, int32_t arg4, PSTR arg5)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* lpFileName)() = sub_428956;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* ecx = sub_426ed0(0x200bc);
    CStdioFile::CStdioFile(&arg_1c);
    arg_200b8 = nullptr;
    *var_c[3] = 0;
    HANDLE hObject_2 = CreateFileA(arg5, 0x80000000, FILE_SHARE_READ, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
    int32_t eax_2 = 0xffffffff;
    int32_t eax_23;
    if (hObject_2 != 0xffffffff)
    {
        int32_t edx_1 = data_433b1c;
        HANDLE hObject;
        int32_t ecx_2;
        if (edx_1 == 0)
        {
            ecx_2 = data_435fd8;
            if (ecx_2 > 0)
            {
                goto label_411a56;
            }
        label_411ace:
            while (true)
            {
                struct OVERLAPPED* lpOverlapped = nullptr;
                __builtin_memset(&arg_30, 0xffffffff, 0x80);
                ReadFile(hObject_2, &lpBuffer, 1, &lpNumberOfBytesRead, lpOverlapped);
                if (lpBuffer != 0x3a)
                {
                    hObject = hObject_2;
                    break;
                }
                ReadFile(hObject_2, &__return_addr, 2, &lpNumberOfBytesRead, nullptr);
                *__return_addr[2] = 0;
                int32_t eax_3 = sub_411850(&__return_addr);
                ReadFile(hObject_2, &__return_addr, 4, &lpNumberOfBytesRead, nullptr);
                arg1 = 0;
                void* eax_4 = sub_411850(&__return_addr);
                ReadFile(hObject_2, &__return_addr, 2, &lpNumberOfBytesRead, nullptr);
                *__return_addr[2] = 0;
                int32_t lpNumberOfBytesWritten_1 = sub_411850(&__return_addr);
                lpNumberOfBytesWritten = lpNumberOfBytesWritten_1;
                if ((eax_3 != 0 && lpNumberOfBytesWritten_1 != 1))
                {
                    int32_t eax_7 = data_433b1c;
                    HANDLE hObject_1;
                    if (eax_7 != 0)
                    {
                        if (eax_7 != 6)
                        {
                            void* lpFileName_1;
                            if (eax_7 != 1)
                            {
                                if (eax_7 != 2)
                                {
                                    if (((eax_7 == 4 || eax_7 == 7) && lpNumberOfBytesWritten_1 == 0))
                                    {
                                        if ((*var_c[3] == 0 && eax_4 != 0x1000))
                                        {
                                            goto label_411eab;
                                        }
                                        *var_c[3] = 1;
                                        lpFileName = ((eax_4 + eax_3) - 0x1000);
                                    }
                                    if (eax_7 != 9)
                                    {
                                        if (eax_7 != 8)
                                        {
                                            if (eax_7 != 0xff)
                                            {
                                                goto label_411d3c;
                                            }
                                            if (lpNumberOfBytesWritten_1 != 0)
                                            {
                                                goto label_411d3c;
                                            }
                                            if (eax_4 < 0x8000)
                                            {
                                                goto label_411d1c;
                                            }
                                            lpFileName = ((eax_4 + eax_3) - 0x8800);
                                            goto label_411d3c;
                                        }
                                        if (lpNumberOfBytesWritten_1 != 0)
                                        {
                                            goto label_411d3c;
                                        }
                                        eax_7 = *var_c[3];
                                        if (eax_7 != 0)
                                        {
                                            goto label_411cf1;
                                        }
                                        if (eax_4 != 0)
                                        {
                                            goto label_411eb9;
                                        }
                                        goto label_411cf1;
                                    }
                                    if (lpNumberOfBytesWritten_1 != 0)
                                    {
                                        goto label_411d3c;
                                    }
                                    eax_7 = *var_c[3];
                                    if (eax_7 != 0)
                                    {
                                    label_411cc2:
                                        *var_c[3] = 1;
                                        lpFileName_1 = ((((arg2 << 0x10) + eax_4) + eax_3) - 0x2000);
                                        goto label_411d23;
                                    }
                                    if (eax_4 != 0x2000)
                                    {
                                        goto label_411eb2;
                                    }
                                    goto label_411cc2;
                                }
                                if (lpNumberOfBytesWritten_1 != 0)
                                {
                                    goto label_411d3c;
                                }
                                eax_7 = *var_c[3];
                                if ((eax_7 == 0 && eax_4 != 0x8800))
                                {
                                    goto label_411eb9;
                                }
                                *var_c[3] = 1;
                                if (eax_4 >= 0x8000)
                                {
                                    lpFileName = ((eax_4 + eax_3) - 0x8800);
                                    goto label_411d3c;
                                }
                            label_411d1c:
                                lpFileName_1 = ((eax_4 + eax_3) + 0x7800);
                                goto label_411d23;
                            }
                            if (lpNumberOfBytesWritten_1 != 0)
                            {
                                goto label_411d3c;
                            }
                            eax_7 = *var_c[3];
                            if ((eax_7 == 0 && eax_4 != 0x8800))
                            {
                            label_411eb2:
                                hObject_1 = hObject_2;
                                goto label_411eba;
                            }
                            *var_c[3] = 1;
                            if (eax_4 < 0x8000)
                            {
                                lpFileName = ((eax_4 + eax_3) + 0x7800);
                                goto label_411d3c;
                            }
                            lpFileName_1 = ((eax_4 + eax_3) - 0x8800);
                        label_411d23:
                            lpFileName = lpFileName_1;
                            goto label_411d3c;
                        }
                        if (lpNumberOfBytesWritten_1 != 0)
                        {
                            goto label_411d3c;
                        }
                        eax_7 = *var_c[3];
                        if ((eax_7 == 0 && eax_4 != 0))
                        {
                        label_411eab:
                            hObject_1 = hObject_2;
                            goto label_411eba;
                        }
                        *var_c[3] = 1;
                        lpFileName = (eax_4 + eax_3);
                        goto label_411d3c;
                    }
                    if (eax_4 >= 0x8800)
                    {
                    label_411eb9:
                        hObject_1 = hObject_2;
                    label_411eba:
                        CloseHandle(hObject_1);
                        arg_200b8 = 0xffffffff;
                        CStdioFile::~CStdioFile(&arg_1c);
                        eax_23 = 4;
                        break;
                    }
                    eax_7 = *var_c[3];
                    if (eax_7 == 0)
                    {
                        if (eax_4 != 0)
                        {
                            goto label_411eb9;
                        }
                        *var_c[3] = 1;
                        lpFileName = (eax_4 + eax_3);
                        goto label_411d3c;
                    }
                label_411cf1:
                    *var_c[3] = 1;
                    lpFileName = (eax_4 + eax_3);
                label_411d3c:
                    ReadFile(hObject_2, &arg_30, (eax_3 * 2), &lpNumberOfBytesRead, nullptr);
                    if ((lpNumberOfBytesWritten_1 == 0 || lpNumberOfBytesWritten_1 == 4))
                    {
                        int32_t edi_3 = 0;
                        if (eax_3 > 0)
                        {
                            void* ebp_3 = &*arg_30[1];
                            do
                            {
                                *__return_addr[1] = *ebp_3;
                                __return_addr = *(ebp_3 - 1);
                                *__return_addr[2] = 0;
                                *(&arg_30 + edi_3) = sub_411850(&__return_addr);
                                edi_3 = (edi_3 + 1);
                                ebp_3 = (ebp_3 + 2);
                            } while (edi_3 < eax_3);
                            lpNumberOfBytesWritten_1 = lpNumberOfBytesWritten;
                        }
                    }
                    ReadFile(hObject_2, &__return_addr, 4, &lpNumberOfBytesRead, nullptr);
                    if (lpNumberOfBytesWritten_1 == 0)
                    {
                        int32_t eax_16 = 0;
                        if (eax_3 <= 0)
                        {
                            continue;
                        }
                        else
                        {
                            int32_t ecx_22 = data_433b1c;
                            do
                            {
                                if (ecx_22 == 0)
                                {
                                    *(&s + (eax_4 + eax_16)) = *(&arg_30 + eax_16);
                                }
                                else
                                {
                                    if ((ecx_22 == 6 || ecx_22 == 8))
                                    {
                                        *(&s + (eax_4 + eax_16)) = *(&arg_30 + eax_16);
                                    }
                                    void var_f50;
                                    if (((ecx_22 != 1 && ecx_22 != 2) && ((ecx_22 == 4 || ecx_22 == 7) && eax_4 >= 0x1000)))
                                    {
                                        *(&var_f50 + (eax_4 + eax_16)) = *(&arg_30 + eax_16);
                                    }
                                    void var_1f50;
                                    if (ecx_22 == 9)
                                    {
                                        *(&var_1f50 + (((arg2 << 0x10) + eax_4) + eax_16)) = *(&arg_30 + eax_16);
                                    }
                                    if (((ecx_22 == 1 || ecx_22 == 2) || ecx_22 == 0xff))
                                    {
                                        char edx_9 = *(&arg_30 + eax_16);
                                        void* edi_6 = (eax_4 + eax_16);
                                        void var_8750;
                                        if (eax_4 < 0x8800)
                                        {
                                            *(&arg_78b0 + edi_6) = edx_9;
                                        }
                                        else
                                        {
                                            *(&var_8750 + edi_6) = edx_9;
                                        }
                                    }
                                }
                                eax_16 = (eax_16 + 1);
                            } while (eax_16 < eax_3);
                            continue;
                        }
                    }
                    else if (lpNumberOfBytesWritten_1 != 4)
                    {
                        continue;
                    }
                    else
                    {
                        char eax_17 = arg_30;
                        if (eax_3 != 1)
                        {
                            arg2 = ((eax_17 << 8) + arg3);
                            continue;
                        }
                        else
                        {
                            arg2 = eax_17;
                            continue;
                        }
                    }
                }
                CloseHandle(hObject_2);
                int32_t (* lpFileName_2)() = lpFileName;
                uint32_t eax_26 = (lpFileName_2 >> 7);
                *(ecx + 0x23004) = eax_26;
                if ((lpFileName_2 & 0x7f) != 0)
                {
                    *(ecx + 0x23004) = (eax_26 + 1);
                }
                int32_t i = 0;
                if (data_435fdc > 0)
                {
                    void* edi_12 = &s;
                    void* ebp_4 = (ecx + 0x21004);
                    void* esi_5 = (ecx + 0xc04);
                    do
                    {
                        int32_t edx_11 = 0;
                        int32_t j = 0;
                        do
                        {
                            int32_t eax_28;
                            eax_28 = *(edi_12 + j);
                            *(esi_5 + j) = eax_28;
                            edx_11 = (edx_11 + (eax_28 & 0xff));
                            j = (j + 1);
                        } while (j < 0x80);
                        i = (i + 1);
                        *ebp_4 = (0x10000 - (edx_11 & 0xffff));
                        ebp_4 = (ebp_4 + 4);
                        esi_5 = (esi_5 + 0x80);
                        edi_12 = (edi_12 + 0x80);
                    } while (i < data_435fdc);
                }
                if (data_433b1c == 0xff)
                {
                    CString::CString(&lpFileName, arg5);
                    arg_200b8 = 1;
                    CString::operator+=(&lpFileName, &data_432ecc);
                    int32_t i_1 = 0;
                    HANDLE eax_30 = CreateFileA(lpFileName, 0x40000000, FILE_SHARE_READ, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
                    if (eax_30 == 0xffffffff)
                    {
                        arg_200b8 = 0;
                        CString::~CString(&lpFileName);
                        arg_200b8 = eax_30;
                        goto label_411fdf;
                    }
                    lpNumberOfBytesWritten = 0;
                    if (*(ecx + 0x23004) > 0)
                    {
                        void* lpBuffer_1 = (ecx + 0xc04);
                        BOOL eax_31;
                        do
                        {
                            eax_31 = WriteFile(eax_30, lpBuffer_1, 0x80, &lpNumberOfBytesWritten, nullptr);
                            if (eax_31 == 0)
                            {
                                break;
                            }
                            i_1 = (i_1 + 1);
                            lpBuffer_1 = (lpBuffer_1 + 0x80);
                        } while (i_1 < *(ecx + 0x23004));
                        if (eax_31 == 0)
                        {
                            CloseHandle(eax_30);
                            arg_200b8 = 0;
                            CString::~CString(&lpFileName);
                            arg_200b8 = 0xffffffff;
                            CStdioFile::~CStdioFile(&arg_1c);
                            eax_23 = 3;
                            goto label_4120bb;
                        }
                    }
                    CloseHandle(eax_30);
                    arg_200b8 = 0;
                    CString::~CString(&lpFileName);
                }
                arg_200b8 = 0xffffffff;
                CStdioFile::~CStdioFile(&arg_1c);
                eax_23 = 0;
                goto label_4120bb;
            }
            if (lpBuffer != 0x3a)
            {
                goto label_412091;
            }
        }
        else
        {
            if ((edx_1 == 1 || edx_1 == 2))
            {
                ecx_2 = data_435fd8;
                if (ecx_2 <= 0)
                {
                    goto label_411ace;
                }
                eax_2 = 0;
            label_411a56:
                int32_t ecx_12;
                int32_t edi;
                edi = __memfill_u32(&s, eax_2, ((ecx_2 >> 2) << 2));
                int32_t ecx_15;
                int32_t edi_1;
                edi_1 = __memfill_u8(edi, eax_2, (ecx_2 & 3));
                goto label_411ace;
            }
            if ((edx_1 != 1 && edx_1 != 2))
            {
                int32_t esi_1 = data_435fd8;
                if (((edx_1 == 4 || edx_1 == 7) && esi_1 > 0))
                {
                    __builtin_memset(&s, 0, ((esi_1 >> 2) << 2));
                    int32_t s_1;
                    __builtin_memset(s_1, 0, (esi_1 & 3));
                }
                if ((((edx_1 == 6 || edx_1 == 8) || edx_1 == 9) && esi_1 > 0))
                {
                    __builtin_memset(&s, 0xffffffff, ((esi_1 >> 2) << 2));
                    int32_t s_2;
                    __builtin_memset(s_2, 0xff, (esi_1 & 3));
                }
                if (edx_1 == 0xff)
                {
                    if (esi_1 <= 0)
                    {
                        goto label_411ace;
                    }
                    ecx_2 = esi_1;
                    eax_2 = 0xffffffff;
                    goto label_411a56;
                }
                if ((edx_1 != 7 && edx_1 != 8))
                {
                    goto label_411ace;
                }
                ReadFile(hObject_2, &__return_addr, 7, &lpNumberOfBytesRead, nullptr);
                if (__return_addr == 0x53)
                {
                    if (*__return_addr[1] != 0x4c)
                    {
                        goto label_412090;
                    }
                    if (*__return_addr[2] != 0x41)
                    {
                        goto label_412090;
                    }
                    if (*__return_addr[3] != 0x56)
                    {
                        goto label_412090;
                    }
                    if (arg1 != 0x45)
                    {
                        goto label_412090;
                    }
                    goto label_411ace;
                }
            label_412090:
                hObject = hObject_2;
            label_412091:
                CloseHandle(hObject);
                arg_200b8 = 0xffffffff;
                CStdioFile::~CStdioFile(&arg_1c);
                eax_23 = 2;
            }
        }
    }
    else
    {
        arg_200b8 = 0xffffffff;
    label_411fdf:
        CStdioFile::~CStdioFile(&arg_1c);
        eax_23 = 1;
    }
label_4120bb:
    *fsbase = arg4;
    return eax_23;
}

int32_t sub_4120d0(int32_t arg1, PSTR arg2)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_42896b;
    int32_t* fsbase;
    int32_t lpNumberOfBytesRead = *fsbase;
    *fsbase = &lpNumberOfBytesRead;
    void* ecx = sub_426ed0(0x100e8);
    CStdioFile::CStdioFile(&__return_addr);
    arg_100e4 = 0;
    HANDLE eax_1 = CreateFileA(arg2, 0x80000000, FILE_SHARE_READ, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
    int32_t eax_2;
    if (eax_1 == 0xffffffff)
    {
        arg_100e4 = 0xffffffff;
        CStdioFile::~CStdioFile(&__return_addr);
        eax_2 = 1;
    }
    else
    {
        int32_t ecx_3 = data_435fd8;
        if (ecx_3 > 0)
        {
            __builtin_memset(&s, 0xffffffff, ((ecx_3 >> 2) << 2));
            int32_t s_1;
            __builtin_memset(s_1, 0xff, (ecx_3 & 3));
        }
        struct OVERLAPPED* __saved_ebp_1 = nullptr;
        __builtin_memset(&arg_14, 0xffffffff, 0x80);
        ReadFile(eax_1, &arg_14, 0x80, &lpNumberOfBytesRead, __saved_ebp_1);
        if (arg_14 == 0x3a)
        {
            CloseHandle(eax_1);
            arg_100e4 = 0xffffffff;
            CStdioFile::~CStdioFile(&__return_addr);
            eax_2 = 2;
        }
        else
        {
            __builtin_memcpy(&s, &arg_14, 0x80);
            int32_t ebx_1 = 0x80;
            void* ebp_1 = &arg_15c;
            while (true)
            {
                __builtin_memset(&arg_14, 0xffffffff, 0x80);
                ReadFile(eax_1, &arg_14, 0x80, &lpNumberOfBytesRead, nullptr);
                int32_t lpNumberOfBytesRead_1 = lpNumberOfBytesRead;
                if (lpNumberOfBytesRead_1 == 0)
                {
                    break;
                }
                int32_t ecx_9 = data_433b1c;
                if (ecx_9 != 3)
                {
                    if (ecx_9 != 5)
                    {
                        break;
                    }
                    if (lpNumberOfBytesRead_1 != 0x80)
                    {
                        if (lpNumberOfBytesRead_1 > 0)
                        {
                            var_1c;
                            __builtin_memcpy(((&var_1c + ebx_1) + 0xf8), &arg_14, ((lpNumberOfBytesRead_1 >> 2) << 2));
                            int32_t esi_1;
                            int32_t edi_2;
                            __builtin_memcpy(edi_2, esi_1, (lpNumberOfBytesRead_1 & 3));
                        }
                        ebx_1 = (ebx_1 + lpNumberOfBytesRead_1);
                        break;
                    }
                }
                ebx_1 = (ebx_1 + 0x80);
                __builtin_memcpy(ebp_1, &arg_14, 0x80);
                ebp_1 = (ebp_1 + 0x80);
            }
            CloseHandle(eax_1);
            uint32_t eax_5 = (ebx_1 >> 7);
            *(ecx + 0x23004) = eax_5;
            if ((ebx_1 & 0x7f) != 0)
            {
                *(ecx + 0x23004) = (eax_5 + 1);
            }
            ebx_1 = (ebx_1 & 0x7f);
            int32_t ecx_15 = (*(ecx + 0x23004) << 7);
            *(ecx + 0x2300c) = ebx_1;
            *(ecx + 0x23008) = ecx_15;
            int32_t i = 0;
            if (data_435fdc > 0)
            {
                void* ebx_2 = &s;
                void* edx_4 = (ecx + 0xc04);
                do
                {
                    i = (i + 1);
                    __builtin_memcpy(edx_4, ebx_2, 0x80);
                    edx_4 = (edx_4 + 0x80);
                    ebx_2 = (ebx_2 + 0x80);
                } while (i < data_435fdc);
            }
            arg_100e4 = 0xffffffff;
            CStdioFile::~CStdioFile(&__return_addr);
            eax_2 = 0;
        }
    }
    *fsbase = arg1;
    return eax_2;
}

int32_t __fastcall sub_412310(void* arg1)
{
    void* var_4 = arg1;
    CString::CString(&var_4);
    int32_t eax = data_435fdc;
    int32_t edi = 0;
    void* edx;
    if (eax > 0)
    {
        char* esi_1 = (arg1 + 0xc04);
        int32_t* ecx_1 = (arg1 + 0x21004);
        do
        {
            *ecx_1 = 0;
            int32_t i = 0;
            do
            {
                edx = esi_1[i];
                i = (i + 1);
                *ecx_1 = (*ecx_1 + edx);
            } while (i < 0x80);
            eax = data_435fdc;
            edi = (edi + 1);
            ecx_1 = &ecx_1[1];
            esi_1 = &esi_1[0x80];
        } while (edi < eax);
    }
    int32_t ecx_2 = 0;
    if (eax > 0)
    {
        edx = (arg1 + 0x22004);
        do
        {
            int32_t eax_1 = *(edx - 0x1000);
            edx = (edx + 4);
            int32_t eax_3 = ((eax_1 & 0x7f) + ecx_2);
            ecx_2 = (ecx_2 + 1);
            *(edx - 4) = eax_3;
            eax = data_435fdc;
        } while (ecx_2 < eax);
    }
    int32_t i_1 = 0;
    if (eax > 0)
    {
        void* esi_2 = (arg1 + 0xc04);
        do
        {
            int32_t j = 0;
            do
            {
                eax = *(esi_2 + j);
                eax = (!eax);
                edx = eax;
                edx = (edx & 0xf);
                edx = (edx << 4);
                eax = (eax >> 4);
                edx = (edx + eax);
                *(esi_2 + j) = edx;
                j = (j + 1);
            } while (j < 0x80);
            i_1 = (i_1 + 1);
            esi_2 = (esi_2 + 0x80);
        } while (i_1 < data_435fdc);
    }
    return CString::~CString(&var_4);
}

int32_t __thiscall sub_4123e0(void* arg1, PSTR arg2)
{
    int32_t i_7 = 0;
    int32_t i_10 = *(arg1 + 0x23004);
    int32_t lpNumberOfBytesWritten = 0;
    if (i_10 > 0)
    {
        void* ecx = (arg1 + 0xc04);
        int32_t i_8 = i_10;
        int32_t i;
        do
        {
            int32_t j = 0;
            do
            {
                int32_t edx_1;
                edx_1 = *(ecx + j);
                i_7 = (i_7 + edx_1);
                j = (j + 1);
            } while (j < 0x80);
            ecx = (ecx + 0x80);
            i = i_8;
            i_8 = (i_8 - 1);
        } while (i != 1);
    }
    if ((i_10 <= 0 || (i_10 > 0 && i_7 < 0x3e8)))
    {
        i_7 = (i_7 + 0x3e8);
    }
    if (i_7 > 0)
    {
        int32_t i_9 = i_7;
        int32_t i_1;
        do
        {
            rand();
            i_1 = i_9;
            i_9 = (i_9 - 1);
        } while (i_1 != 1);
    }
    int32_t i_2 = 0;
    do
    {
        *((arg1 + i_2) + 4) = (!rand());
        i_2 = (i_2 + 1);
    } while (i_2 < 0xc00);
    if (i_7 > 0)
    {
        int32_t i_3;
        do
        {
            rand();
            i_3 = i_7;
            i_7 = (i_7 - 1);
        } while (i_3 != 1);
    }
    char* i_4 = nullptr;
    void* edx_2;
    do
    {
        char eax_1;
        eax_1 = rand();
        *(i_4 + (arg1 + 0x20c04)) = (!eax_1);
        i_4 = &i_4[1];
    } while (i_4 < 0x400);
    void* eax_2 = (arg1 + 4);
    void* ecx_1 = (arg1 + 0xc03);
    do
    {
        edx_2 = *eax_2;
        *eax_2 = rand;
        eax_2 = (eax_2 + 1);
        *ecx_1 = edx_2;
        ecx_1 = (ecx_1 - 1);
    } while (((0xfffffffc - arg1) + eax_2) < 0x1f4);
    void* eax_3 = (arg1 + 0x20c04);
    char* ecx_2 = (arg1 + 0x21003);
    do
    {
        edx_2 = *eax_3;
        *eax_3 = rand;
        eax_3 = (eax_3 + 1);
        *ecx_2 = edx_2;
        ecx_2 = (ecx_2 - 1);
    } while (((0xfffdf3fc - arg1) + eax_3) < 0x64);
    int32_t i_5 = 0;
    void* eax_4;
    if (data_435fdc > 0)
    {
        eax_4 = (arg1 + 0x22004);
        void* ecx_3 = (arg1 + 0x1f9);
        do
        {
            edx_2 = *(eax_4 - 0x1000);
            eax_4 = (eax_4 + 4);
            *(ecx_3 - 1) = edx_2;
            *ecx_3 = (*(eax_4 - 0x1004) >> 8);
            *(ecx_3 + 0x2bb) = *(eax_4 - 4);
            *(ecx_3 + 0x2bc) = (*(eax_4 - 4) >> 8);
            i_5 = (i_5 + 1);
            ecx_3 = (ecx_3 + 2);
        } while (i_5 < data_435fdc);
    }
    eax_4 = *(arg1 + 0x23004);
    uint8_t ecx_5 = (*(arg1 + 0x23004) >> 8);
    *(arg1 + 0x7d4) = eax_4;
    *(arg1 + 0x7d5) = ecx_5;
    *(arg1 + 0x4a8) = 0x48;
    *(arg1 + 0x764) = 0x45;
    *(arg1 + 0xb4c) = 0x78;
    int32_t i_6 = 0;
    if (data_435fdc > 0)
    {
        char* ecx_6 = (arg1 + 0xc04);
        do
        {
            int32_t j_1 = 0;
            do
            {
                if ((i_6 & 1) != 0)
                {
                    edx_2 = *((j_1 + arg1) + 0xcc);
                }
                else
                {
                    edx_2 = *((j_1 + arg1) + 0x20ccc);
                }
                ecx_6[j_1] = (ecx_6[j_1] ^ edx_2);
                j_1 = (j_1 + 1);
            } while (j_1 < 0x80);
            i_6 = (i_6 + 1);
            ecx_6 = &ecx_6[0x80];
        } while (i_6 < data_435fdc);
    }
    HANDLE eax_8 = CreateFileA(arg2, 0x40000000, FILE_SHARE_READ, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
    if (eax_8 == 0xffffffff)
    {
        return 1;
    }
    if (WriteFile(eax_8, (arg1 + 4), 0xc00, &lpNumberOfBytesWritten, nullptr) == 0)
    {
        CloseHandle(eax_8);
        return 3;
    }
    if (WriteFile(eax_8, (arg1 + 0xc04), data_435fd8, &lpNumberOfBytesWritten, nullptr) == 0)
    {
        CloseHandle(eax_8);
        return 3;
    }
    if (WriteFile(eax_8, (arg1 + 0x20c04), 0x400, &lpNumberOfBytesWritten, nullptr) != 0)
    {
        CloseHandle(eax_8);
        return 0;
    }
    CloseHandle(eax_8);
    return 3;
}

int32_t __stdcall sub_412660(PSTR arg1, PSTR arg2)
{
    return sub_412680(arg1, arg2);
}

int32_t sub_412680(PSTR arg1, PSTR arg2)
{
    void* ecx = sub_426ed0(0x11004);
    void* const var_4 = 0;
    HANDLE eax_1 = CreateFileA(arg1, 0x80000000, FILE_SHARE_READ, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);
    if (eax_1 == 0xffffffff)
    {
        return 1;
    }
    BOOL eax_3 = ReadFile(eax_1, &lpBuffer, (data_435fd8 + 0x1000), &__return_addr, nullptr);
    if (eax_3 == 0)
    {
        MessageBoxA(eax_3, "---here----3----", "error", eax_3);
        CloseHandle(eax_1);
        return 2;
    }
    if (__return_addr != (data_435fd8 + 0x1000))
    {
        MessageBoxA(nullptr, "---here----2----", "error", MB_OK);
        CloseHandle(eax_1);
        return 2;
    }
    CloseHandle(eax_1);
    int32_t i = 0;
    __builtin_memset((ecx + 4), 0, 0xc00);
    __builtin_memcpy((ecx + 4), &lpBuffer, 0xc00);
    void* ebx;
    if (data_435fdc > 0)
    {
        ebx = &arg_c04;
        void* edx_3 = (ecx + 0xc04);
        do
        {
            i = (i + 1);
            __builtin_memcpy(edx_3, ebx, 0x80);
            edx_3 = (edx_3 + 0x80);
            ebx = (ebx + 0x80);
        } while (i < data_435fdc);
    }
    int32_t i_1 = 0;
    __builtin_memset((ecx + 0x20c04), 0, 0x400);
    do
    {
        int32_t ecx_6 = (data_435fd8 + i_1);
        i_1 = (i_1 + 1);
        ecx_6 = *(&arg_c04 + ecx_6);
        *(((ecx + 0x20c04) + i_1) - 1) = ecx_6;
    } while (i_1 < 0x400);
    void* eax_7 = (ecx + 0x22004);
    void* ecx_7 = (ecx + 0x1f9);
    int32_t i_5 = 0x140;
    int32_t i_2;
    do
    {
        eax_7 = (eax_7 + 4);
        int32_t edx_5;
        edx_5 = *(ecx_7 - 1);
        ecx_7 = (ecx_7 + 2);
        *(eax_7 - 0x1004) = edx_5;
        int32_t edx_6;
        edx_6 = *(ecx_7 - 2);
        *(eax_7 - 0x1004) = ((edx_6 << 8) + edx_5);
        int32_t edx_9;
        edx_9 = *(ecx_7 + 0x2b9);
        *(eax_7 - 4) = edx_9;
        int32_t edx_10;
        edx_10 = *(ecx_7 + 0x2ba);
        i_2 = i_5;
        i_5 = (i_5 - 1);
        *(eax_7 - 4) = ((edx_10 << 8) + edx_9);
    } while (i_2 != 1);
    int32_t eax_8;
    eax_8 = *(ecx + 0x7d5);
    int32_t ecx_8;
    ecx_8 = *(ecx + 0x7d4);
    *(ecx + 0x23004) = ((eax_8 << 8) + ecx_8);
    int32_t eax_10;
    eax_10 = *(ecx + 0x4a8);
    if ((eax_10 == 0x48 && (*(ecx + 0x764) == 0x45 && *(ecx + 0xb4c) == 0x78)))
    {
        int32_t eax_11 = data_435fdc;
        int32_t edi_4 = 0;
        if (eax_11 > 0)
        {
            char* ecx_9 = (ecx + 0xc04);
            do
            {
                int32_t i_3 = 0;
                do
                {
                    int32_t edx_12;
                    if ((edi_4 & 1) != 0)
                    {
                        edx_12 = *((i_3 + ecx) + 0xcc);
                    }
                    else
                    {
                        edx_12 = *((i_3 + ecx) + 0x20ccc);
                    }
                    ebx = ecx_9[i_3];
                    ebx = (ebx ^ edx_12);
                    ecx_9[i_3] = ebx;
                    i_3 = (i_3 + 1);
                } while (i_3 < 0x80);
                eax_11 = data_435fdc;
                edi_4 = (edi_4 + 1);
                ecx_9 = &ecx_9[0x80];
            } while (edi_4 < eax_11);
        }
        if (arg2 == 0)
        {
            return 0;
        }
        int32_t i_4 = 0;
        if (eax_11 > 0)
        {
            void* esi_6 = (ecx + 0xc04);
            do
            {
                int32_t j = 0;
                do
                {
                    eax_11 = *(esi_6 + j);
                    eax_11 = (!eax_11);
                    ebx = eax_11;
                    ebx = (ebx & 0xf);
                    ebx = (ebx << 4);
                    eax_11 = (eax_11 >> 4);
                    ebx = (ebx + eax_11);
                    *(esi_6 + j) = ebx;
                    j = (j + 1);
                } while (j < 0x80);
                i_4 = (i_4 + 1);
                esi_6 = (esi_6 + 0x80);
            } while (i_4 < data_435fdc);
        }
        HANDLE eax_13 = CreateFileA(arg2, 0x40000000, FILE_SHARE_READ, nullptr, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, nullptr);
        if (eax_13 == 0xffffffff)
        {
            return 1;
        }
        if (WriteFile(eax_13, (ecx + 0xc04), data_435fd8, &__return_addr, nullptr) != 0)
        {
            CloseHandle(eax_13);
            return 0;
        }
        CloseHandle(eax_13);
        return 3;
    }
    MessageBoxA(nullptr, "---here----1----", "error", MB_OK);
    return 2;
}

void*** __thiscall sub_4129c0(void*** arg1, char* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_42898a;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void*** var_10 = arg1;
    *arg1 = &data_42b284;
    void* eax_1 = operator new(0x14);
    void* var_10_1 = eax_1;
    int32_t var_4 = 0;
    int32_t eax_2;
    if (eax_1 == 0)
    {
        eax_2 = 0;
    }
    else
    {
        eax_2 = CInternetSession::CInternetSession(eax_1, arg2, 1, 0, nullptr, nullptr, 0);
    }
    int32_t ecx_2 = var_c;
    arg1[1] = eax_2;
    arg1[2] = 0;
    arg1[3] = 0;
    *fsbase = ecx_2;
    return arg1;
}

void*** __thiscall sub_412a40(void*** arg1, char arg2)
{
    sub_412a60(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_412a60(void*** arg1)
{
    *arg1 = &data_42b284;
    int32_t eax = sub_412aa0(arg1);
    int32_t* ecx = arg1[1];
    if (ecx != 0)
    {
        eax = *(*ecx + 0x14)();
        int32_t* ecx_1 = arg1[1];
        if (ecx_1 != 0)
        {
            eax = *(*ecx_1 + 4)(1);
        }
        arg1[1] = 0;
    }
    return eax;
}

void __fastcall sub_412aa0(void* arg1)
{
    int32_t* ecx = *(arg1 + 0xc);
    if (ecx != 0)
    {
        *(*ecx + 0x54)();
        int32_t* ecx_1 = *(arg1 + 0xc);
        if (ecx_1 != 0)
        {
            *(*ecx_1 + 4)(1);
        }
        *(arg1 + 0xc) = 0;
    }
    int32_t* ecx_2 = *(arg1 + 8);
    if (ecx_2 != 0)
    {
        *(*ecx_2 + 0x14)();
        int32_t* ecx_3 = *(arg1 + 8);
        if (ecx_3 != 0)
        {
            *(*ecx_3 + 4)(1);
        }
        *(arg1 + 8) = 0;
    }
}

int32_t __thiscall sub_412af0(void* arg1, char* arg2, void* arg3)
{
    int32_t var_8 = 0xffffffff;
    int32_t (* var_c)() = sub_4289c1;
    int32_t* fsbase;
    int32_t var_10 = *fsbase;
    *fsbase = &var_10;
    void* esi = arg1;
    int32_t __saved_edi;
    int32_t* var_14 = &__saved_edi;
    void* var_20 = esi;
    char* var_18;
    CString::CString(&var_18);
    int32_t var_8_1 = 0;
    char* var_1c;
    CString::CString(&var_1c);
    int32_t edi = 0x435ef0;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    var_8_1 = 1;
    if (?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAE_NI_N@Z(((!i) - 1), 1) != 0)
    {
        __builtin_memcpy(*(arg3 + 4), 0x435ef0, ((((!i) - 1) >> 2) << 2));
        int32_t esi_1;
        int32_t edi_3;
        __builtin_memcpy(edi_3, esi_1, (((!i) - 1) & 3));
        esi = var_20;
        *(arg3 + 8) = ((!i) - 1);
        *(arg3 + 4)[((!i) - 1)] = 0;
    }
    int32_t var_38;
    unsigned long var_24;
    AfxParseURL(arg_8, &var_24, &var_18, &var_1c, &var_38);
    unsigned long eax_6 = var_24;
    if ((eax_6 != 3 && eax_6 != 0x100b))
    {
        var_8_1 = 0;
        CString::~CString(&var_1c);
        int32_t var_8_4 = 0xffffffff;
        CString::~CString(&var_18);
        *fsbase = var_10;
        return 1;
    }
    int32_t ecx_11 = (-(var_24 - 3));
    var_8_1 = 2;
    class CHttpConnection* eax_8 = CInternetSession::GetHttpConnection(*(esi + 4), var_18, (((ecx_11 - ecx_11) & 0x800000) + 0x400000), var_38, nullptr, nullptr);
    char* edx_2 = var_1c;
    int32_t ecx_17 = (var_24 - 3);
    *(esi + 8) = eax_8;
    int32_t ecx_18 = (-ecx_17);
    class CHttpFile* eax_9 = CHttpConnection::OpenRequest(eax_8, arg2, edx_2, nullptr, 1, nullptr, nullptr, (((ecx_18 - ecx_18) & 0x801000) - 0x7c000000));
    int32_t var_450_4 = 0xffffffff;
    unsigned long var_454_4 = 0x10000000;
    void* var_458_3 = "Accept: *,*/*";
    *(esi + 0xc) = eax_9;
    CHttpFile::AddRequestHeaders(eax_9, var_458_3, var_454_4, var_450_4);
    CHttpFile::AddRequestHeaders(*(esi + 0xc), "Accept-Language: zh-cn", 0x10000000, 0xffffffff);
    CHttpFile::AddRequestHeaders(*(esi + 0xc), "Content-Type: application/x-www-…", 0x10000000, 0xffffffff);
    CHttpFile::AddRequestHeaders(*(esi + 0xc), "Accept-Encoding: gzip, deflate", 0x10000000, 0xffffffff);
    CHttpFile::SendRequest(*(esi + 0xc), nullptr, 0, nullptr, 0);
    char s = 0;
    void s_1;
    __builtin_memset(&s_1, 0, 0x400);
    int32_t edi_4 = 0x435ef0;
    int32_t i_1 = 0xffffffff;
    while (i_1 != 0)
    {
        bool cond:1_1 = 0 != *edi_4;
        edi_4 = (edi_4 + 1);
        i_1 = (i_1 - 1);
        if ((!cond:1_1))
        {
            break;
        }
    }
    char* lpMultiByteStr_2 = nullptr;
    char var_34 = *arg3[3];
    void* var_2c = nullptr;
    int32_t var_28 = 0;
    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z(0x435ef0, ((!i_1) - 1));
    var_8_1 = 3;
    while (true)
    {
        int32_t eax_11 = *(**(esi + 0xc) + 0x3c)(&s, 0x400);
        if (eax_11 <= 0)
        {
            break;
        }
        &s[eax_11] = 0;
        char* edi_5 = &s;
        int32_t i_2 = 0xffffffff;
        while (i_2 != 0)
        {
            bool cond:2_1 = 0 != *edi_5;
            edi_5 = &edi_5[1];
            i_2 = (i_2 - 1);
            if ((!cond:2_1))
            {
                break;
            }
        }
        if ((*?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB - var_2c) <= ((!i_2) - 1))
        {
            std::_Xlen();
        }
        if (((!i_2) - 1) > 0)
        {
            void* ebx_1 = (var_2c + ((!i_2) - 1));
            if (?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAE_NI_N@Z(ebx_1, 0) != 0)
            {
                __builtin_memcpy((var_2c + lpMultiByteStr_2), &s, ((((!i_2) - 1) >> 2) << 2));
                int32_t esi_3;
                int32_t edi_7;
                __builtin_memcpy(edi_7, esi_3, (((!i_2) - 1) & 3));
                var_2c = ebx_1;
                *(lpMultiByteStr_2 + ebx_1) = 0;
            }
        }
        esi = var_20;
        __builtin_memset(&s, 0, 0x400);
        char* edi_8;
        *edi_8 = 0;
    }
    char* lpMultiByteStr = lpMultiByteStr_2;
    if (lpMultiByteStr == 0)
    {
        lpMultiByteStr = ?_C@?1??_Nullstr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPBDXZ@4DB;
    }
    int32_t cchWideChar = MultiByteToWideChar(0xfde9, 0, lpMultiByteStr, 0xffffffff, nullptr, 0);
    char* ebx_2 = operator new(((cchWideChar * 2) + 2));
    __builtin_memset(ebx_2, 0, ((((cchWideChar * 2) + 2) >> 2) << 2));
    int32_t s_2;
    __builtin_memset(s_2, 0, (((cchWideChar * 2) + 2) & 3));
    char* lpMultiByteStr_1 = lpMultiByteStr_2;
    if (lpMultiByteStr_1 == 0)
    {
        lpMultiByteStr_1 = ?_C@?1??_Nullstr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPBDXZ@4DB;
    }
    MultiByteToWideChar(0xfde9, 0, lpMultiByteStr_1, 0xffffffff, ebx_2, cchWideChar);
    CString::CString(&arg_8, ebx_2);
    var_8_1 = 4;
    operator delete(ebx_2);
    char* edi_12 = arg_8;
    int32_t i_3 = 0xffffffff;
    char* esi_5 = edi_12;
    while (i_3 != 0)
    {
        bool cond:3_1 = 0 != *edi_12;
        edi_12 = &edi_12[1];
        i_3 = (i_3 - 1);
        if ((!cond:3_1))
        {
            break;
        }
    }
    int32_t eax_16 = ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ();
    if (eax_16 < ((!i_3) - 1))
    {
        std::_Xlen();
    }
    void* ecx_49 = *(arg3 + 4);
    if (ecx_49 != 0)
    {
        eax_16 = *(ecx_49 - 1);
        if ((eax_16 != 0 && eax_16 != 0xff))
        {
            if ((!i_3) != 1)
            {
                goto label_412e41;
            }
            eax_16 = (eax_16 - 1);
            *(ecx_49 - 1) = eax_16;
            ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z(((!i_3) - 1));
        }
    }
    if (((ecx_49 == 0 || (ecx_49 != 0 && eax_16 == 0)) || (ecx_49 != 0 && eax_16 == 0xff)))
    {
        if ((!i_3) == 1)
        {
            ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z(1);
        }
        else
        {
            int32_t eax_17 = *(arg3 + 0xc);
            if ((eax_17 <= 0x1f && eax_17 >= ((!i_3) - 1)))
            {
                goto label_412e47;
            }
            ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z(1);
        label_412e41:
            ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z(((!i_3) - 1));
        label_412e47:
            __builtin_memcpy(*(arg3 + 4), esi_5, ((((!i_3) - 1) >> 2) << 2));
            int32_t esi_6;
            int32_t edi_15;
            __builtin_memcpy(edi_15, esi_6, (((!i_3) - 1) & 3));
            *(arg3 + 8) = ((!i_3) - 1);
            *(*(arg3 + 4) + ((!i_3) - 1)) = 0;
        }
    }
    sub_412aa0(var_20);
    var_8_1 = 3;
    CString::~CString(&arg_8);
    if (lpMultiByteStr_2 != 0)
    {
        char* eax_22;
        eax_22 = lpMultiByteStr_2[0xffffffff];
        if ((eax_22 == 0 || eax_22 == 0xff))
        {
            operator delete(&lpMultiByteStr_2[0xffffffff]);
        }
        if ((eax_22 != 0 && eax_22 != 0xff))
        {
            eax_22 = (eax_22 - 1);
            lpMultiByteStr_2[0xffffffff] = eax_22;
        }
    }
    int32_t var_8_2 = 0;
    CString::~CString(&var_1c);
    int32_t var_8_3 = 0xffffffff;
    CString::~CString(&var_18);
    *fsbase = var_10;
    return 0;
}

int32_t sub_412ed3(void* arg1 @ ebp)
{
    sub_412aa0(*(arg1 - 0x1c));
    CException* ecx = *(arg1 - 0x38);
    int32_t esi = *(ecx + 8);
    CException::Delete(ecx);
    GetLastError();
    if (esi != 0x2ee2)
    {
        return 0x412f33;
    }
    return sub_412efa;
}

int32_t __stdcall sub_412efa(int32_t* arg1 @ ebp, int32_t arg2, int32_t arg3)
{
    arg1[-1] = 0;
    CString::~CString(&arg1[-6]);
    arg1[-1] = 0xffffffff;
    CString::~CString(&arg1[-5]);
    int32_t* fsbase;
    *fsbase = arg1[-3];
    *arg1;
    return 2;
}

int32_t __stdcall sub_412f70(void* arg1, int32_t arg2, int32_t arg3)
{
    int32_t var_4 = arg3;
    int32_t var_8 = arg2;
    void* ecx;
    return sub_412af0(ecx, &data_4337a4, arg1);
}

int32_t __stdcall sub_412f90(void* arg1, int32_t arg2, int32_t arg3)
{
    int32_t var_4 = arg3;
    int32_t var_8 = arg2;
    void* ecx;
    return sub_412af0(ecx, "POST", arg1);
}

int32_t __stdcall sub_412fb0(void* arg1)
{
    return operator delete(arg1);
}

int32_t* __fastcall sub_412fc0(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4289f9;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    CWnd::CWnd(arg1);
    *esi = 0x42aa40;
    int32_t var_4 = 0;
    CString::CString(&esi[0x17]);
    esi[0x19] = 0;
    esi[0x18] = 0x42b3c8;
    var_4 = 2;
    CToolTipCtrl::CToolTipCtrl(&esi[0x1b]);
    var_4 = 3;
    *esi = 0x42b308;
    esi[0x1a] = 0;
    esi[0x10] = 0xee0000;
    esi[0x11] = 0x8b1a55;
    esi[0x12] = GetSysColor(COLOR_HIGHLIGHT);
    esi[0x13] = 0;
    esi[0x14] = 0;
    esi[0x15] = 1;
    esi[0x16] = 1;
    CString::Empty(&esi[0x17]);
    *fsbase = var_c;
    return esi;
}

int32_t* __thiscall sub_413070(int32_t* arg1, char arg2)
{
    sub_413090(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_413090(int32_t* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428a41;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_14 = arg1;
    *arg1 = 0x42b308;
    int32_t var_4 = 3;
    CGdiObject::DeleteObject(&arg1[0x18]);
    var_4 = 2;
    CToolTipCtrl::~CToolTipCtrl(&arg1[0x1b]);
    void* var_10 = &arg1[0x18];
    arg1[0x18] = 0x42a6d0;
    var_4 = 4;
    CGdiObject::DeleteObject(&arg1[0x18]);
    arg1[0x18] = 0x42a6e4;
    var_4 = 0;
    CString::~CString(&arg1[0x17]);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CStatic::~CStatic(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t sub_413120() __pure
{
    return CWnd::messageMap;
}

int32_t sub_413130() __pure
{
    return &data_42b288;
}

int32_t __thiscall sub_413140(CWnd* arg1, struct tagMSG* arg2)
{
    SendMessageA(*(arg1 + 0x8c), 0x407, nullptr, arg2);
    return CWnd::PreTranslateMessage(arg1, arg2);
}

BOOL __fastcall sub_413170(void* arg1)
{
    int32_t esi;
    int32_t var_4 = esi;
    int32_t edi;
    int32_t var_8 = edi;
    HINSTANCE eax_1 = sub_413b80(*(arg1 + 0x5c), 5);
    int32_t eax_2;
    eax_2 = eax_1 > 0x20;
    *(arg1 + 0x50) = eax_2;
    if (eax_2 != 0)
    {
        return sub_413520(arg1, 1);
    }
    MessageBeep(0x30);
    HINSTANCE var_c = eax_1;
    return sub_413980(arg1);
}

HGDIOBJ __thiscall sub_4131b0(void* arg1, int32_t* arg2)
{
    int32_t* esi;
    if (*(arg1 + 0x4c) != 0)
    {
        esi = arg2;
        *(*esi + 0x38)(*(arg1 + 0x48));
    }
    else
    {
        esi = arg2;
        int32_t eax_2;
        if (*(arg1 + 0x50) == 0)
        {
            eax_2 = *(arg1 + 0x40);
        }
        else
        {
            eax_2 = *(arg1 + 0x44);
        }
        *(*esi + 0x38)(eax_2);
    }
    CDC::SetBkMode(esi, 1);
    return GetStockObject(HOLLOW_BRUSH);
}

BOOL __thiscall sub_413200(CWnd* arg1, int32_t arg2, int32_t arg3)
{
    CWnd::Default(arg1);
    BOOL eax_2;
    if (*(arg1 + 0x4c) == 0)
    {
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x4c) = 1;
        RedrawWindow(hWnd, nullptr, nullptr, RDW_INVALIDATE | RDW_ERASE | RDW_UPDATENOW);
        eax_2 = CWnd::FromHandle(SetCapture(*(arg1 + 0x20)));
    }
    else
    {
        void var_10;
        GetClientRect(*(arg1 + 0x20), &var_10);
        int32_t var_18_1 = arg3;
        eax_2 = PtInRect(&var_10, arg2);
        if (eax_2 == 0)
        {
            *(arg1 + 0x4c) = eax_2;
            ReleaseCapture();
            return RedrawWindow(*(arg1 + 0x20), nullptr, nullptr, RDW_INVALIDATE | RDW_ERASE | RDW_UPDATENOW);
        }
    }
    return eax_2;
}

int32_t __fastcall sub_413290(void* arg1)
{
    HCURSOR hCursor = *(arg1 + 0x68);
    if (hCursor == 0)
    {
        return 0;
    }
    SetCursor(hCursor);
    return 1;
}

int32_t __fastcall sub_4132b0(CWnd* arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_428a58;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    unsigned long dwNewLong = CWnd::GetStyle(arg1);
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    *dwNewLong[1] = (*dwNewLong[1] | 1);
    SetWindowLongA(hWnd, 0xfffffff0, dwNewLong);
    if (*(*(arg1 + 0x5c) - 8) == 0)
    {
        CWnd::GetWindowTextA(arg1, (arg1 + 0x5c));
    }
    void* var_5c;
    CString::CString(&var_5c);
    int32_t var_4_1 = 0;
    CWnd::GetWindowTextA(arg1, &var_5c);
    if (*(var_5c - 8) == 0)
    {
        CWnd::SetWindowTextA(arg1, *(arg1 + 0x5c));
    }
    void var_48;
    GetObjectA(*(CGdiObject::FromHandle(SendMessageA(*(arg1 + 0x20), 0x31, nullptr, nullptr)) + 4), 0x3c, &var_48);
    char var_33 = *(arg1 + 0x54);
    void* wParam = (arg1 + 0x60);
    CGdiObject::Attach(wParam, CreateFontIndirectA(&var_48));
    if (wParam != 0)
    {
        wParam = *(wParam + 4);
    }
    SendMessageA(*(arg1 + 0x20), 0x30, wParam, 1);
    sub_413690(arg1);
    sub_413850(arg1);
    struct tagRECT lpRect;
    GetClientRect(*(arg1 + 0x20), &lpRect);
    CToolTipCtrl::Create((arg1 + 0x6c), arg1, 0);
    CToolTipCtrl::AddTool((arg1 + 0x6c), arg1, *(arg1 + 0x5c), &lpRect, 1);
    CWnd::PreSubclassWindow(arg1);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_8 = CString::~CString(&var_5c);
    *fsbase = var_c;
    return eax_8;
}

int32_t __fastcall sub_413400(CWnd* arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_428a78;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_4_1 = 0;
    CString::operator=((arg1 + 0x5c), &arg_4);
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    if (IsWindow(hWnd) != 0)
    {
        sub_413690(arg1);
        CToolTipCtrl::UpdateTipText((arg1 + 0x6c), arg_4, arg1, 1);
    }
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_1 = CString::~CString(&arg_4);
    *fsbase = var_c;
    return eax_1;
}

CString* __thiscall sub_413480(void* arg1, CString* arg2)
{
    void* var_4 = arg1;
    CString::CString(arg2, (arg1 + 0x5c));
    return arg2;
}

BOOL __thiscall sub_4134a0(void* arg1, int32_t arg2, int32_t arg3, uint32_t arg4)
{
    *(arg1 + 0x40) = arg2;
    uint32_t eax = arg4;
    *(arg1 + 0x44) = arg3;
    if (eax == 0xffffffff)
    {
        eax = GetSysColor(COLOR_HIGHLIGHT);
    }
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x48) = eax;
    BOOL eax_1 = IsWindow(hWnd);
    if (eax_1 != 0)
    {
        eax_1 = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    return eax_1;
}

int32_t __fastcall sub_4134f0(void* arg1)
{
    return *(arg1 + 0x40);
}

int32_t __fastcall sub_413500(void* arg1)
{
    return *(arg1 + 0x44);
}

int32_t __fastcall sub_413510(void* arg1)
{
    return *(arg1 + 0x48);
}

BOOL __thiscall sub_413520(void* arg1, int32_t arg2)
{
    *(arg1 + 0x50) = arg2;
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    BOOL eax = IsWindow(hWnd);
    if (eax != 0)
    {
        eax = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    return eax;
}

int32_t __fastcall sub_413560(void* arg1)
{
    return *(arg1 + 0x50);
}

int32_t __thiscall sub_413570(PSTR arg1, int32_t arg2)
{
    int32_t eax = arg2;
    *(arg1 + 0x68) = eax;
    if (eax == 0)
    {
        eax = sub_413850(arg1);
    }
    return eax;
}

int32_t __fastcall sub_413590(void* arg1)
{
    return *(arg1 + 0x68);
}

BOOL __thiscall sub_4135a0(void* arg1, int32_t arg2)
{
    *(arg1 + 0x54) = arg2;
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    BOOL eax = IsWindow(hWnd);
    if (eax != 0)
    {
        void var_3c;
        GetObjectA(*(CGdiObject::FromHandle(SendMessageA(*(arg1 + 0x20), 0x31, nullptr, nullptr)) + 4), 0x3c, &var_3c);
        void* wParam = (arg1 + 0x60);
        char var_27_1 = *(arg1 + 0x54);
        CGdiObject::DeleteObject(wParam);
        CGdiObject::Attach(wParam, CreateFontIndirectA(&var_3c));
        if (wParam != 0)
        {
            wParam = *(wParam + 4);
        }
        SendMessageA(*(arg1 + 0x20), 0x30, wParam, 1);
        eax = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    return eax;
}

int32_t __fastcall sub_413640(void* arg1)
{
    return *(arg1 + 0x54);
}

BOOL __thiscall sub_413650(CWnd* arg1, int32_t arg2)
{
    *(arg1 + 0x58) = arg2;
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    BOOL eax = IsWindow(hWnd);
    if (eax != 0)
    {
        eax = sub_413690(arg1);
    }
    return eax;
}

int32_t __fastcall sub_413680(void* arg1)
{
    return *(arg1 + 0x58);
}

BOOL __fastcall sub_413690(CWnd* arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_428a98;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    HWND hWnd;
    if (arg1 != 0)
    {
        hWnd = *(arg1 + 0x20);
    }
    else
    {
        hWnd = nullptr;
    }
    BOOL eax = IsWindow(hWnd);
    if (eax != 0)
    {
        eax = *(arg1 + 0x58);
        if (eax != 0)
        {
            int32_t var_1c;
            GetWindowRect(*(arg1 + 0x20), &var_1c);
            class CWnd* eax_2 = CWnd::FromHandle(GetParent(*(arg1 + 0x20)));
            if (eax_2 != 0)
            {
                CWnd::ScreenToClient(eax_2, &var_1c);
            }
            uint8_t* lpString_1;
            CString::CString(&lpString_1);
            int32_t var_4_1 = 0;
            CWnd::GetWindowTextA(arg1, &lpString_1);
            class CDC* eax_5 = CDC::FromHandle(GetDC(*(arg1 + 0x20)));
            int32_t eax_7 = *(*eax_5 + 0x30)((arg1 + 0x60));
            uint8_t* lpString = lpString_1;
            int32_t psizl;
            GetTextExtentPoint32A(*(eax_5 + 8), lpString, *(lpString - 8), &psizl);
            *(*eax_5 + 0x30)(eax_7);
            ReleaseDC(*(arg1 + 0x20), *(eax_5 + 4));
            int16_t eax_10 = CWnd::GetStyle(arg1);
            int32_t var_18;
            int32_t var_10;
            int32_t edx_6;
            int32_t var_20;
            if ((*eax_10[1] & 2) == 0)
            {
                edx_6 = (var_20 + var_18);
                var_10 = edx_6;
            }
            else
            {
                int32_t eax_14;
                int32_t edx_5;
                edx_5 = HIGHD(((var_10 - var_20) - var_18));
                eax_14 = LOWD(((var_10 - var_20) - var_18));
                InflateRect(&var_1c, 0, (-((eax_14 - edx_5) >> 1)));
                edx_6 = var_10;
            }
            int32_t eax_26;
            int32_t ecx_12;
            int32_t var_14;
            if ((eax_10 & 1) != 0)
            {
                int32_t eax_22;
                int32_t edx_8;
                edx_8 = HIGHD(((var_14 - psizl) - var_1c));
                eax_22 = LOWD(((var_14 - psizl) - var_1c));
                InflateRect(&var_1c, (-((eax_22 - edx_8) >> 1)), 0);
                eax_26 = var_14;
                edx_6 = var_10;
                ecx_12 = var_1c;
            }
            else if ((eax_10 & 2) == 0)
            {
                ecx_12 = var_1c;
                eax_26 = (psizl + ecx_12);
                int32_t var_14_1 = eax_26;
            }
            else
            {
                eax_26 = var_14;
                ecx_12 = (eax_26 - psizl);
                var_1c = ecx_12;
            }
            CWnd::SetWindowPos(arg1, nullptr, ecx_12, var_18, (eax_26 - ecx_12), (edx_6 - var_18), 4);
            int32_t var_4_2 = 0xffffffff;
            eax = CString::~CString(&lpString_1);
        }
    }
    *fsbase = var_c;
    return eax;
}

int32_t __fastcall sub_413850(PSTR arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428ab8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    PSTR lpLibFileName = arg1;
    int32_t eax_1 = *(arg1 + 0x68);
    if (eax_1 == 0)
    {
        CString::CString(&lpLibFileName);
        int32_t var_4 = 0;
        GetWindowsDirectoryA(CString::GetBuffer(&lpLibFileName, 0x104), 0x104);
        CString::ReleaseBuffer(&lpLibFileName, 0xffffffff);
        CString::operator+=(&lpLibFileName, "\winhlp32.exe");
        HINSTANCE eax_4 = LoadLibraryA(lpLibFileName);
        if (eax_4 != 0)
        {
            HCURSOR hIcon = LoadCursorA(eax_4, 0x6a);
            if (hIcon != 0)
            {
                *(arg1 + 0x68) = CopyIcon(hIcon);
            }
        }
        FreeLibrary(eax_4);
        int32_t var_4_1 = 0xffffffff;
        eax_1 = CString::~CString(&lpLibFileName);
    }
    *fsbase = var_c;
    return eax_1;
}

enum WIN32_ERROR __stdcall sub_413910(HKEY arg1, PSTR arg2, PSTR arg3)
{
    HKEY hKey_1;
    enum WIN32_ERROR lpSubKey = RegOpenKeyExA(arg1, arg2, 0, KEY_QUERY_VALUE, &hKey_1);
    if (lpSubKey == NO_ERROR)
    {
        HKEY hKey = hKey_1;
        int32_t lpcbData = 0x104;
        void var_104;
        RegQueryValueA(hKey, lpSubKey, &var_104, &lpcbData);
        lstrcpyA(arg3, &var_104);
        RegCloseKey(hKey_1);
    }
    return lpSubKey;
}

int32_t __fastcall sub_413980(int32_t arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428ae0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_10 = arg1;
    char* esi;
    char* var_14 = esi;
    CString::CString(&var_10);
    void* esi_1 = arg_4;
    int32_t var_4 = 0;
    int32_t eax_1;
    if (esi_1 <= 0x20)
    {
        eax_1 = *(esi_1 + 0x413b54);
        switch (eax_1)
        {
            case 0:
            {
                CString::operator=(&var_10, "The operating system is out\nof …");
                break;
            }
            case 1:
            {
                CString::operator=(&var_10, "The specified file was not found…");
                break;
            }
            case 2:
            {
                CString::operator=(&var_10, "The specified path was not found…");
                break;
            }
            case 3:
            {
                CString::operator=(&var_10, "The operating system denied\nacc…");
                break;
            }
            case 4:
            {
                CString::operator=(&var_10, "There was not enough memory to c…");
                break;
            }
            case 5:
            {
                CString::operator=(&var_10, "The .EXE file is invalid\n(non-W…");
                break;
            }
            case 7:
            {
                CString::operator=(&var_10, "The filename association is\ninc…");
                break;
            }
            case 8:
            {
                CString::operator=(&var_10, "The DDE transaction could not\nb…");
                break;
            }
            case 9:
            {
                CString::operator=(&var_10, "The DDE transaction failed.");
                break;
            }
            case 0xa:
            {
                CString::operator=(&var_10, "The DDE transaction could not\nb…");
                break;
            }
            case 0xb:
            {
                CString::operator=(&var_10, "There is no application associat…");
                break;
            }
            case 0xc:
            {
                CString::operator=(&var_10, "The specified dynamic-link libra…");
                break;
            }
        }
        if (eax_1 == 6)
        {
            CString::operator=(&var_10, "A sharing violation occurred. ");
        }
    }
    if ((((esi_1 <= 0x20 && eax_1 == 6) || esi_1 > 0x20) || (esi_1 <= 0x20 && eax_1 == 0xd)))
    {
        void* var_18_1 = esi_1;
        CString::Format(&var_10, "Unknown Error (%d) occurred.");
    }
    int32_t* var_18_2 = &var_10;
    var_8 = 1;
    CString::operator=(&var_14, operator+(&arg_4, "Unable to open hyperlink:\n\n"));
    var_8 = 0;
    CString::~CString(&__return_addr);
    AfxMessageBox(var_14, 0x30, 0);
    int32_t var_8_1 = 0xffffffff;
    int32_t eax_3 = CString::~CString(&var_14);
    *fsbase = var_10;
    return eax_3;
}

HINSTANCE __stdcall sub_413b80(PSTR arg1, uint32_t arg2)
{
    HINSTANCE eax_1 = ShellExecuteA(nullptr, "open", arg1, nullptr, nullptr, arg2);
    void var_208;
    if ((eax_1 <= 0x20 && sub_413910(0x80000000, ".htm", &var_208) == NO_ERROR))
    {
        lstrcatA(&var_208, "\shell\open\command");
        if (sub_413910(0x80000000, &var_208, &var_208) == NO_ERROR)
        {
            uint8_t* lpString1 = _mbsstr(&var_208, ""%1"");
            if (lpString1 == 0)
            {
                strstr(&var_208, &data_433acc);
                int32_t __saved_edi;
                lpString1 = ((&__saved_edi + lstrlenA(&var_208)) + 0xf);
            }
            *lpString1 = 0;
            lstrcatA(lpString1, &data_433ac8);
            lstrcatA(lpString1, arg1);
            return WinExec(&var_208, arg2);
        }
    }
    return eax_1;
}

void* __thiscall sub_413c90(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_401ef0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t sub_413cb0() __pure
{
    return CWinApp::messageMap;
}

int32_t sub_413cc0() __pure
{
    return 0x42b3e0;
}

void*** __fastcall sub_413cd0(CWinApp* arg1)
{
    void*** esi = arg1;
    CWinApp::CWinApp(arg1, nullptr);
    *esi = &data_42b418;
    return esi;
}

CWinApp* __thiscall sub_413cf0(CWinApp* arg1, char arg2)
{
    sub_413d10(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void __thiscall sub_413d10(CWinApp* this)
{
    /* tailcall */
    return CWinApp::~CWinApp(this);
}

int32_t sub_413d20()
{
    sub_413d30();
    /* tailcall */
    return sub_413d40();
}

int32_t sub_413d30()
{
    /* tailcall */
    return sub_413cd0(&data_435ef8);
}

int32_t sub_413d40()
{
    return sub_426f6a(sub_413d50);
}

int32_t sub_413d50()
{
    /* tailcall */
    return sub_413d10(&data_435ef8);
}

int32_t __fastcall sub_413d60(CWinApp* arg1)
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_428b3d;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    AfxEnableControlContainer(nullptr);
    CWinApp::Enable3dControls(arg1);
    void var_224;
    sub_414120(&var_224, nullptr);
    int32_t var_4 = 0;
    Ordinal_SkinMagic_1(*(AfxGetModuleState() + 8), 0, 0, 0);
    Ordinal_SkinMagic_3("corona.smf");
    AfxEnableControlContainer(nullptr);
    *(arg1 + 0x20) = &var_224;
    CDialog::DoModal(&var_224);
    int32_t var_4_1 = 6;
    void var_14;
    CString::~CString(&var_14);
    var_4_1 = 5;
    void var_b0;
    sub_410170(&var_b0);
    var_4_1 = 4;
    void var_f0;
    CStatic::~CStatic(&var_f0);
    var_4_1 = 3;
    void var_130;
    CStatic::~CStatic(&var_130);
    var_4_1 = 2;
    void var_14c;
    CStdioFile::~CStdioFile(&var_14c);
    var_4_1 = 1;
    void var_18c;
    sub_416a80(&var_18c);
    int32_t var_4_2 = 0xffffffff;
    CDialog::~CDialog(&var_224);
    *fsbase = var_c;
    return 0;
}

int32_t __fastcall sub_413e90(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428b9b;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 5;
    CString::~CString((arg1 + 0x210));
    var_4 = 4;
    sub_410170((arg1 + 0x174));
    var_4 = 3;
    CStatic::~CStatic((arg1 + 0x134));
    var_4 = 2;
    CStatic::~CStatic((arg1 + 0xf4));
    var_4 = 1;
    CStdioFile::~CStdioFile((arg1 + 0xd8));
    var_4 = 0;
    sub_416a80((arg1 + 0x98));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __fastcall sub_413f30(void* arg1)
{
    /* tailcall */
    return sub_416a80((arg1 + 0x20));
}

int32_t __fastcall sub_413f40(CWinApp* arg1)
{
    Ordinal_SkinMagic_2();
    return CWinApp::ExitInstance(arg1);
}

int32_t sub_413f60()
{
    sub_413f70();
    /* tailcall */
    return sub_413f90();
}

int32_t sub_413f70()
{
    CString::CString(&data_4360f4, &data_435ef0);
    return CString::CString(&data_4360f0, &data_435ef0);
}

int32_t sub_413f90()
{
    return sub_426f6a(sub_413fa0);
}

int32_t sub_413fa0()
{
    CString::~CString(&data_4360f0);
    /* tailcall */
    return CString::~CString(&data_4360f4);
}

int32_t sub_413fc0()
{
    sub_413fd0();
    /* tailcall */
    return sub_413fe0();
}

int32_t sub_413fd0()
{
    /* tailcall */
    return sub_416590(&data_4360b0);
}

int32_t sub_413fe0()
{
    return sub_426f6a(sub_413ff0);
}

int32_t sub_413ff0()
{
    /* tailcall */
    return sub_416a80(&data_4360b0);
}

int32_t sub_414000()
{
    sub_414010();
    /* tailcall */
    return sub_414030();
}

int32_t sub_414010()
{
    CString::CString(&data_435fe8);
    CString::CString(&data_435fe4);
    /* tailcall */
    return CString::CString(&data_435fe0);
}

int32_t sub_414030()
{
    return sub_426f6a(sub_414040);
}

int32_t sub_414040()
{
    CString::~CString(&data_435fe0);
    CString::~CString(&data_435fe4);
    /* tailcall */
    return CString::~CString(&data_435fe8);
}

int32_t sub_414060()
{
    sub_414070();
    /* tailcall */
    return sub_414080();
}

void*** sub_414070()
{
    return sub_4129c0(&data_435fc0, "Mozilla/4.0 (compatible; MSIE 6.…");
}

int32_t sub_414080()
{
    return sub_426f6a(sub_414090);
}

int32_t sub_414090()
{
    /* tailcall */
    return sub_412a60(&data_435fc0);
}

void*** __fastcall sub_4140a0(CDialog* arg1)
{
    void*** esi = arg1;
    CDialog::CDialog(arg1, 0x64, nullptr);
    *esi = &data_42b758;
    return esi;
}

CDialog* __thiscall sub_4140c0(CDialog* arg1, char arg2)
{
    sub_4140e0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void __thiscall sub_4140e0(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

int32_t sub_4140f0() __pure
{
    return;
}

int32_t sub_414100() __pure
{
    return CDialog::messageMap;
}

int32_t sub_414110() __pure
{
    return 0x42b4c0;
}

void*** __thiscall sub_414120(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428c09;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x66, arg2);
    int32_t var_4 = 0;
    sub_416590(&esi[0x26]);
    var_4 = 1;
    CStdioFile::CStdioFile(&esi[0x36]);
    var_4 = 2;
    CWnd::CWnd(&esi[0x3d]);
    esi[0x3d] = 0x42aa40;
    var_4 = 3;
    CWnd::CWnd(&esi[0x4d]);
    esi[0x4d] = 0x42aa40;
    var_4 = 4;
    sub_410080(&esi[0x5d]);
    var_4 = 5;
    CString::CString(&esi[0x84]);
    var_4 = 6;
    *esi = &data_42b830;
    esi[0x83] = 0;
    CString::operator=(&esi[0x84], &data_435ef0);
    AfxGetModuleState();
    HICON eax_3 = LoadIconA(AfxFindResourceHandle(0x80, 0xe), 0x80);
    int32_t ecx_7 = var_c;
    esi[0x85] = eax_3;
    *fsbase = ecx_7;
    return esi;
}

CDialog* __thiscall sub_414220(CDialog* arg1, char arg2)
{
    sub_413e90(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __thiscall sub_414240(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x3fa, (arg1 + 0xf4));
    DDX_Control(arg2, 0x3f7, (arg1 + 0x134));
    DDX_Control(arg2, 0x3e8, (arg1 + 0x174));
    DDX_Check(arg2, 0x3ed, (arg1 + 0x20c));
    return DDX_Text(arg2, 0x562, (arg1 + 0x210));
}

int32_t sub_4142b0() __pure
{
    return CDialog::messageMap;
}

int32_t sub_4142c0() __pure
{
    return 0x42b4e0;
}

int32_t sub_4142d0(char* arg1, char arg2)
{
    int32_t j_1;
    int32_t j_2 = j_1;
    j_1 = arg2;
    int32_t eax = 0xffff;
    char edx = j_1;
    j_1 = (j_1 - 1);
    if (edx == 0)
    {
        eax = 0xffff;
        return 0xffff;
    }
    char* edx_1 = arg1;
    int32_t i_1 = (j_1 + 1);
    int32_t var_4;
    int32_t i;
    do
    {
        j_1 = *edx_1;
        edx_1 = &edx_1[1];
        j_1 = j_1;
        eax = (eax ^ j_1);
        j_1 = 8;
        var_4 = eax;
        int32_t j;
        do
        {
            if ((var_4 & 1) == 0)
            {
                var_4 = (var_4 >> 1);
                eax = var_4;
            }
            else
            {
                eax = var_4;
                eax = (eax >> 1);
                eax = (eax ^ 0xa001);
                var_4 = eax;
            }
            j = j_1;
            j_1 = (j_1 - 1);
        } while (j != 1);
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    eax = var_4;
    return eax;
}

int32_t sub_414350(char* arg1, char arg2)
{
    int32_t eax;
    eax = 0xcc;
    if (arg2 > 0)
    {
        char* esi_1 = arg1;
        uint32_t i_1 = arg2;
        uint32_t i;
        do
        {
            int32_t j_1;
            j_1 = *esi_1;
            eax = (eax ^ j_1);
            j_1 = 8;
            int32_t j;
            do
            {
                if ((eax & 0x80) == 0)
                {
                    eax = (eax << 1);
                }
                else
                {
                    eax = (eax << 1);
                    eax = (eax ^ 0x31);
                }
                j = j_1;
                j_1 = (j_1 - 1);
            } while (j != 1);
            esi_1 = &esi_1[1];
            i = i_1;
            i_1 = (i_1 - 1);
        } while (i != 1);
    }
    return eax;
}

int32_t __fastcall sub_414390(CDialog* arg1)
{
    int32_t var_4_14 = 0xffffffff;
    int32_t (* var_8)() = sub_428c84;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* ebp = arg1;
    CDialog::OnInitDialog(arg1);
    SendMessageA(*(ebp + 0x20), 0x80, 1, *(ebp + 0x214));
    SendMessageA(*(ebp + 0x20), 0x80, nullptr, *(ebp + 0x214));
    SendMessageA(*(CWnd::GetDlgItem(ebp, 0x3ee) + 0x20), 0xf1, 1, nullptr);
    data_435fd4 = 0;
    SendMessageA(*(CWnd::GetDlgItem(ebp, 0x3f1) + 0x20), 0xf1, 1, nullptr);
    data_43610a = 0;
    void* eax_7 = operator new(0x170);
    void* var_21c = eax_7;
    int32_t var_4 = 0;
    void*** eax_8;
    if (eax_7 == 0)
    {
        eax_8 = nullptr;
    }
    else
    {
        eax_8 = sub_416a90(eax_7, nullptr);
    }
    int32_t var_4_1 = 0xffffffff;
    *(ebp + 0x60) = eax_8;
    CDialog::Create(eax_8, 0x81, (ebp + 0x174));
    void* eax_9 = operator new(0x694);
    void* var_21c_1 = eax_9;
    int32_t var_4_2 = 1;
    void*** eax_10;
    if (eax_9 == 0)
    {
        eax_10 = nullptr;
    }
    else
    {
        eax_10 = sub_406c30(eax_9, nullptr);
    }
    int32_t var_4_3 = 0xffffffff;
    *(ebp + 0x64) = eax_10;
    CDialog::Create(eax_10, 0x82, (ebp + 0x174));
    void* eax_11 = operator new(0x190);
    void* var_21c_2 = eax_11;
    int32_t var_4_4 = 2;
    void*** eax_12;
    if (eax_11 == 0)
    {
        eax_12 = nullptr;
    }
    else
    {
        eax_12 = sub_401f40(eax_11, nullptr);
    }
    int32_t var_4_5 = 0xffffffff;
    *(ebp + 0x68) = eax_12;
    CDialog::Create(eax_12, 0x83, (ebp + 0x174));
    void* eax_13 = operator new(0x14c);
    void* var_21c_3 = eax_13;
    int32_t var_4_6 = 3;
    void*** eax_14;
    if (eax_13 == 0)
    {
        eax_14 = nullptr;
    }
    else
    {
        eax_14 = sub_425210(eax_13, nullptr);
    }
    int32_t var_4_7 = 0xffffffff;
    *(ebp + 0x6c) = eax_14;
    CDialog::Create(eax_14, 0x84, (ebp + 0x174));
    void* eax_15 = operator new(0x31034);
    void* var_21c_4 = eax_15;
    int32_t var_4_8 = 4;
    void*** eax_16;
    if (eax_15 == 0)
    {
        eax_16 = nullptr;
    }
    else
    {
        eax_16 = sub_418eb0(eax_15, nullptr);
    }
    int32_t var_4_9 = 0xffffffff;
    *(ebp + 0x70) = eax_16;
    CDialog::Create(eax_16, 0x85, (ebp + 0x174));
    void* eax_17 = operator new(0x1b0);
    void* var_21c_5 = eax_17;
    int32_t var_4_10 = 5;
    void*** eax_18;
    if (eax_17 == 0)
    {
        eax_18 = nullptr;
    }
    else
    {
        eax_18 = sub_41c1a0(eax_17, nullptr);
    }
    int32_t var_4_11 = 0xffffffff;
    *(ebp + 0x74) = eax_18;
    CDialog::Create(eax_18, 0xa3, (ebp + 0x174));
    sub_410a50((ebp + 0x174), *(ebp + 0x60), &data_433c3c, nullptr);
    sub_410a50((ebp + 0x174), *(ebp + 0x64), &data_433c30, 1);
    sub_410a50((ebp + 0x174), *(ebp + 0x68), &data_433c24, 2);
    sub_410a50((ebp + 0x174), *(ebp + 0x70), &data_433c18, 3);
    sub_410a50((ebp + 0x174), *(ebp + 0x74), &data_433c0c, 4);
    sub_410a50((ebp + 0x174), *(ebp + 0x6c), &data_433c00, 5);
    var_230;
    void lpFilename;
    void* eax_23 = ((&var_230 + GetModuleFileNameA(GetModuleHandleA(nullptr), &lpFilename, 0x104)) + 0x1c);
    if (eax_23 != 0)
    {
        while (*eax_23 != 0x5c)
        {
            void* temp0_1 = eax_23;
            eax_23 = (eax_23 - 1);
            if (temp0_1 == 1)
            {
                break;
            }
        }
    }
    *(eax_23 + 1) = 0;
    void* edi = &lpFilename;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:6_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:6_1))
        {
            break;
        }
    }
    int32_t ecx_23 = (!i);
    void var_110;
    __builtin_memcpy(&var_110, (edi - ecx_23), ((ecx_23 >> 2) << 2));
    int32_t esi_2;
    int32_t edi_2;
    __builtin_memcpy(edi_2, esi_2, (ecx_23 & 3));
    PSTR lpFileName;
    CString::CString(&lpFileName);
    void* var_234_6 = &var_110;
    int32_t var_4_12 = 6;
    CString::Format(&lpFileName, &data_433bfc);
    CString::operator+=(&lpFileName, "Comfig.ini");
    uint32_t eax_26 = GetPrivateProfileIntA("SerilSet", "CommPortNum", 0xffffffff, lpFileName);
    PSTR lpFileName_1 = lpFileName;
    data_433b0c = eax_26;
    uint32_t eax_27 = GetPrivateProfileIntA("SerilSet", "BaudRate", 0x2580, lpFileName_1);
    PSTR lpFileName_3 = lpFileName;
    data_433b10 = eax_27;
    data_4360f8 = GetPrivateProfileIntA("SerilSet", "ParityBit", 0, lpFileName_3);
    uint32_t eax_30 = GetPrivateProfileIntA("SerilSet", "DataBit", 8, lpFileName);
    PSTR lpFileName_2 = lpFileName;
    data_433b14 = eax_30;
    data_4360fc = GetPrivateProfileIntA("SerilSet", "StopBit", 0, lpFileName_2);
    char* var_218;
    CString::CString(&var_218);
    int32_t eax_32 = data_433b0c;
    var_4_12 = 7;
    if (eax_32 != 0xffffffff)
    {
        int32_t __saved_edi_2 = data_4360f8;
        int32_t var_234_13 = data_433b14;
        int32_t var_238_1 = data_433b10;
        int32_t var_23c_12 = (eax_32 + 1);
        CString::Format(&var_218, &data_433b74);
    }
    else
    {
        CString::Format(&var_218, &data_433ba4);
    }
    CWnd::SetDlgItemTextA(ebp, 0x3f6, var_218);
    SetTimer(*(ebp + 0x20), 1, 0x3e8, nullptr);
    CWnd::ShowWindow(CWnd::GetDlgItem(ebp, 0x3eb), 0);
    CWnd::SetDlgItemTextA(ebp, 0x3f8, &data_433b6c);
    MessageBeep(0xffffffff);
    var_4_12 = 6;
    CString::~CString(&var_218);
    int32_t var_4_13 = 0xffffffff;
    CString::~CString(&lpFileName);
    *fsbase = var_c;
    return 1;
}

long __stdcall sub_414820(int32_t arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_428c98;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    if ((arg1 & 0xfff0) != 0x10)
    {
        CWnd* ecx;
        long eax_3 = CWnd::Default(ecx);
        *fsbase = var_c;
        return eax_3;
    }
    void var_6c;
    sub_4140a0(&var_6c);
    int32_t var_4_1 = 0;
    CDialog::DoModal(&var_6c);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_2 = CDialog::~CDialog(&var_6c);
    *fsbase = var_c;
    return eax_2;
}

long __fastcall sub_4148a0(class CWnd* arg1)
{
    if (IsIconic(*(arg1 + 0x20)) == 0)
    {
        return CWnd::Default(arg1);
    }
    CPaintDC var_54;
    CPaintDC::CPaintDC(&var_54, arg1);
    int32_t eax_2 = (-&var_54);
    HDC hDC;
    SendMessageA(*(arg1 + 0x20), 0x27, ((eax_2 - eax_2) & hDC), nullptr);
    int32_t eax_5 = GetSystemMetrics(SM_CXICON);
    int32_t eax_6 = GetSystemMetrics(SM_CYICON);
    int32_t lpRect;
    GetClientRect(*(arg1 + 0x20), &lpRect);
    int32_t var_60;
    int32_t var_58;
    int32_t eax_12;
    int32_t edx;
    edx = HIGHD((((var_58 - var_60) - eax_6) + 1));
    eax_12 = LOWD((((var_58 - var_60) - eax_6) + 1));
    int32_t var_5c;
    int32_t eax_19;
    int32_t edx_2;
    edx_2 = HIGHD((((var_5c - lpRect) - eax_5) + 1));
    eax_19 = LOWD((((var_5c - lpRect) - eax_5) + 1));
    DrawIcon(hDC, ((eax_19 - edx_2) >> 1), ((eax_12 - edx) >> 1), *(arg1 + 0x214));
    return CPaintDC::~CPaintDC(&var_54);
}

int32_t __fastcall sub_414960(void* arg1)
{
    return *(arg1 + 0x214);
}

int32_t sub_414970()
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_428d08;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_3b8;
    sub_423320(&var_3b8, nullptr);
    int32_t var_4 = 0;
    PSTR lpString;
    CString::CString(&lpString);
    var_4 = 1;
    PSTR lpFileName;
    CString::CString(&lpFileName);
    var_4 = 2;
    void lpFilename;
    void* eax_3 = ((&lpString + GetModuleFileNameA(GetModuleHandleA(nullptr), &lpFilename, 0x104)) + 0x1ac);
    if (eax_3 != 0)
    {
        while (*eax_3 != 0x5c)
        {
            void* temp0_1 = eax_3;
            eax_3 = (eax_3 - 1);
            if (temp0_1 == 1)
            {
                break;
            }
        }
    }
    *(eax_3 + 1) = 0;
    void* edi = &lpFilename;
    int32_t i = 0xffffffff;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = (edi + 1);
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t ecx_3 = (!i);
    void var_110;
    __builtin_memcpy(&var_110, (edi - ecx_3), ((ecx_3 >> 2) << 2));
    int32_t esi_1;
    int32_t edi_2;
    __builtin_memcpy(edi_2, esi_1, (ecx_3 & 3));
    void* var_3cc_1 = &var_110;
    CString::Format(&lpFileName, &data_433bfc);
    CString::operator+=(&lpFileName, "Comfig.ini");
    if (CDialog::DoModal(&var_3b8) == 1)
    {
        WritePrivateProfileStringA("Communication", "CommPort", lpString, lpFileName);
        int32_t var_3cc_3 = data_433b0c;
        CString::Format(&lpString, &data_431074);
        WritePrivateProfileStringA("SerilSet", "CommPortNum", lpString, lpFileName);
        int32_t var_3cc_5 = data_433b10;
        CString::Format(&lpString, &data_433c48);
        WritePrivateProfileStringA("SerilSet", "BaudRate", lpString, lpFileName);
        int32_t var_3cc_7 = data_4360f8;
        CString::Format(&lpString, &data_431074);
        WritePrivateProfileStringA("SerilSet", "ParityBit", lpString, lpFileName);
        int32_t var_3cc_9 = data_433b14;
        CString::Format(&lpString, &data_431074);
        WritePrivateProfileStringA("SerilSet", "DataBit", lpString, lpFileName);
        int32_t var_3cc_11 = data_4360fc;
        CString::Format(&lpString, &data_431074);
        WritePrivateProfileStringA("SerilSet", "StopBit", lpString, lpFileName);
        sub_404a80();
    }
    var_4 = 1;
    CString::~CString(&lpFileName);
    var_4 = 0;
    CString::~CString(&lpString);
    int32_t var_4_1 = 7;
    void var_258;
    CComboBox::~CComboBox(&var_258);
    var_4_1 = 6;
    void var_298;
    CComboBox::~CComboBox(&var_298);
    var_4_1 = 5;
    void var_2d8;
    CComboBox::~CComboBox(&var_2d8);
    var_4_1 = 4;
    void var_318;
    CComboBox::~CComboBox(&var_318);
    var_4_1 = 3;
    void var_358;
    CComboBox::~CComboBox(&var_358);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_12 = CDialog::~CDialog(&var_3b8);
    *fsbase = var_c;
    return eax_12;
}

int32_t __fastcall sub_414c20(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428d5d;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 4;
    CComboBox::~CComboBox((arg1 + 0x160));
    var_4 = 3;
    CComboBox::~CComboBox((arg1 + 0x120));
    var_4 = 2;
    CComboBox::~CComboBox((arg1 + 0xe0));
    var_4 = 1;
    CComboBox::~CComboBox((arg1 + 0xa0));
    var_4 = 0;
    CComboBox::~CComboBox((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __fastcall sub_414cb0(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428d78;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_20;
    CString::CString(&var_20, &data_435ef0);
    int32_t var_4 = 0;
    int32_t lpSystemTime;
    GetLocalTime(&lpSystemTime);
    int32_t lpExitCode_1 = lpExitCode;
    if (lpExitCode_1 == 1)
    {
        int16_t __saved_esi_5;
        uint32_t __saved_esi_1 = __saved_esi_5;
        int16_t __saved_edi_4;
        uint32_t __saved_edi_1 = __saved_edi_4;
        int16_t var_14;
        uint32_t var_30_1 = var_14;
        int16_t var_16;
        uint32_t var_34_1 = var_16;
        int16_t var_1a;
        uint32_t var_38_1 = var_1a;
        uint32_t var_3c_1 = lpSystemTime;
        CString::Format(&var_20, "%04d-%02d-%02d %02d:%02d:%02d");
        CWnd::SetWindowTextA((arg1 + 0x134), var_20);
        char* __saved_esi_3;
        if (data_43610c != 0)
        {
            __saved_esi_3 = data_435fe4;
        }
        else if (data_435fd4 == 2)
        {
            __saved_esi_3 = "config name:";
        }
        else
        {
            __saved_esi_3 = &data_431e18;
        }
        CWnd::SetWindowTextA((arg1 + 0xf4), __saved_esi_3);
        if (data_436110 != 0)
        {
            CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x3e9), 1);
            CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3ea), 5);
            CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3eb), 0);
            KillTimer(*(arg1 + 0x20), 2);
            *(arg1 + 0xf0) = 1;
            data_436110 = 0;
        }
    }
    else if (lpExitCode_1 == 2)
    {
        HANDLE hThread = data_4360ec;
        lpExitCode = 0;
        GetExitCodeThread(hThread, &lpExitCode);
        if ((lpExitCode != 0x103 && sub_404a90() != 0))
        {
            sub_404a70();
            int32_t eax_12;
            if (arg1 != 0)
            {
                eax_12 = *(arg1 + 0x20);
            }
            else
            {
                eax_12 = 0;
            }
            *(arg1 + 0x88) = eax_12;
            *(arg1 + 0x94) = (arg1 + 0xd4);
            *(arg1 + 0x9c) = data_4360b4;
            *(arg1 + 0xa0) = data_4360b8;
            __builtin_memcpy((arg1 + 0xa4), 0x4360bc, 0x14);
            __builtin_memcpy((arg1 + 0xb8), 0x4360d0, 0x14);
            *(arg1 + 0xcc) = data_4360e4;
            *(arg1 + 0xd0) = data_4360e8;
            *(arg1 + 0x8c) = 0x435ff0;
            data_4360ec = AfxBeginThread(sub_41e8e0, (arg1 + 0x78), 0, 0, 0, nullptr);
        }
    }
    CWnd::Default(arg1);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_16 = CString::~CString(&var_20);
    *fsbase = var_c;
    return eax_16;
}

int32_t __stdcall sub_414f00(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

uint32_t* __fastcall sub_414f30(CWnd* arg1)
{
    uint32_t* eax;
    if (data_433b0c != 0xffffffff)
    {
        CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x3e9), 0);
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3ea), 0);
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3eb), 5);
        eax = SetTimer(*(arg1 + 0x20), 2, 0x3e8, nullptr);
        *(arg1 + 0xf0) = 0;
    }
    else
    {
        eax = data_435fd4;
        if (eax == 0)
        {
            int32_t eax_1 = CWnd::MessageBoxA(arg1, &data_433cf8, "Error", 0x10);
            data_436110 = 0;
            return eax_1;
        }
        if (eax == 1)
        {
            int32_t eax_2 = CWnd::MessageBoxA(arg1, &data_433cdc, "Error", 0x10);
            data_436110 = 0;
            return eax_2;
        }
        if (eax == 2)
        {
            int32_t eax_3 = CWnd::MessageBoxA(arg1, "There is no valid COM port. Plea…", "Error", 0x10);
            data_436110 = 0;
            return eax_3;
        }
    }
    data_436110 = 0;
    return eax;
}

BOOL __fastcall sub_415010(CWnd* arg1)
{
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x3e9), 1);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3ea), 5);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x3eb), 0);
    KillTimer(*(arg1 + 0x20), 2);
    BOOL eax_4;
    eax_4 = data_435fd4;
    char* var_c_1;
    if (eax_4 == 0)
    {
        var_c_1 = &data_433d2c;
    }
    if (eax_4 == 1)
    {
        var_c_1 = &data_433d20;
    }
    if (eax_4 == 2)
    {
        var_c_1 = "Scan stop!";
    }
    if (((eax_4 == 0 || eax_4 == 1) || eax_4 == 2))
    {
        eax_4 = CWnd::SetDlgItemTextA(arg1, 0x3f8, var_c_1);
    }
    *(arg1 + 0xf0) = 1;
    return eax_4;
}

int32_t __fastcall sub_4150a0(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428d98;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_10 = arg1;
    CString::CString(&var_10);
    class CString* eax_1 = *(arg1 + 0xd4);
    int32_t var_4 = 0;
    void* var_18_2;
    if (eax_1 == 1)
    {
        eax_1 = data_435fd4;
        char* var_18_1;
        if (eax_1 == 0)
        {
            var_18_1 = &data_433e40;
        }
        if (eax_1 == 1)
        {
            var_18_1 = &data_433e30;
        }
        if ((eax_1 == 0 || eax_1 == 1))
        {
            CString::operator=(&var_10, var_18_1);
        }
        if (data_435fd4 == 2)
        {
            var_18_2 = "Open Commport error";
            goto label_41519b;
        }
    }
    else
    {
        if ((eax_1 >= 0xa && eax_1 <= 0x1a))
        {
            eax_1 = data_435fd4;
            if (eax_1 == 0)
            {
                var_18_2 = &data_433e08;
            label_41519b:
                CString::operator=(&var_10, var_18_2);
            }
            else
            {
                if (eax_1 == 1)
                {
                    var_18_2 = &data_433df4;
                    goto label_41519b;
                }
                if (eax_1 == 2)
                {
                    var_18_2 = "Reading device....";
                    goto label_41519b;
                }
            }
        }
        if ((eax_1 < 0xa || (eax_1 >= 0xa && eax_1 > 0x1a)))
        {
            if ((eax_1 >= 0x28 && eax_1 <= 0x38))
            {
                eax_1 = data_435fd4;
                if (eax_1 == 0)
                {
                    var_18_2 = &data_433dcc;
                    goto label_41519b;
                }
                if (eax_1 == 1)
                {
                    var_18_2 = &data_433db8;
                    goto label_41519b;
                }
                if (eax_1 == 2)
                {
                    var_18_2 = "Read device successful....";
                    goto label_41519b;
                }
            }
            if (((eax_1 < 0x28 || (eax_1 >= 0x28 && eax_1 > 0x38)) && eax_1 >= 0x3c))
            {
                eax_1 = data_435fd4;
                if (eax_1 == 0)
                {
                    var_18_2 = &data_433d80;
                    goto label_41519b;
                }
                if (eax_1 == 1)
                {
                    var_18_2 = &data_433d64;
                    goto label_41519b;
                }
                if (eax_1 == 2)
                {
                    var_18_2 = "Read device successfully, data e…";
                    goto label_41519b;
                }
            }
        }
    }
    eax_1 = *(arg1 + 0xf0);
    if (eax_1 != 0)
    {
        eax_1 = data_435fd4;
        char* var_18_3;
        if (eax_1 == 0)
        {
            var_18_3 = &data_433d2c;
        }
        if (eax_1 == 1)
        {
            var_18_3 = &data_433d20;
        }
        if (eax_1 == 2)
        {
            var_18_3 = "Scan stop!";
        }
        if (((eax_1 == 0 || eax_1 == 1) || eax_1 == 2))
        {
            CString::operator=(&var_10, var_18_3);
        }
    }
    CWnd::SetDlgItemTextA(arg1, 0x3f8, var_10);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&var_10);
    *fsbase = var_c;
    return 0;
}

int32_t __fastcall sub_415210(void* arg1)
{
    if (*(arg1 + 0xd4) != 0xa)
    {
        sub_417400(*(arg1 + 0x60), &data_435ff0);
        sub_402600(*(arg1 + 0x68), 0x435ff0);
        if (data_436104 != 0)
        {
            sub_415670(arg1, &data_435ff0);
        }
    }
    return 0;
}

long __fastcall sub_415260(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_4152a0(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428e3f;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_280 = 0;
    int32_t ebp;
    int32_t var_284 = ebp;
    int32_t esi;
    int32_t var_288 = esi;
    int32_t edi;
    int32_t var_28c = edi;
    int32_t var_27c;
    CString::CString(&var_27c);
    int32_t var_4 = 0;
    struct __POSITION* var_270;
    CString::CString(&var_270);
    var_4 = 1;
    void var_254;
    CFileFind::CFileFind(&var_254);
    int32_t lpSystemTime = 1;
    void var_238;
    __builtin_memcpy(&var_238, "Data files(*.xls)|*.xls|All file…", 0x2c);
    var_4 = 2;
    char* esi_1;
    char* edi_1;
    *edi_1 = *esi_1;
    CWnd::UpdateData(arg1, lpSystemTime);
    int32_t* esp_1 = &var_28c;
    int32_t eax_8;
    int32_t eax_21;
    int32_t* esp_2;
    if (*(arg1 + 0x20c) == 0)
    {
        data_436104 = 0;
    }
    else
    {
        int32_t var_264;
        lpSystemTime = &var_264;
        GetLocalTime(lpSystemTime);
        int16_t eax_1 = var_264;
        int16_t lpSystemTime_1;
        lpSystemTime = lpSystemTime_1;
        int16_t var_262;
        uint32_t var_294 = var_262;
        uint32_t var_298_1 = eax_1;
        int32_t var_29c_1 = 0x433e68;
        CString::Format(&var_270, &data_433e68);
        struct __POSITION* eax_3 = var_270;
        lpSystemTime = 0;
        var_294 = &var_238;
        int32_t var_298_2 = 0x802006;
        void* var_2a0_2 = &data_433e64;
        int32_t var_2a4_1 = 0;
        void var_208;
        CFileDialog::CFileDialog(&var_208, 0, &data_433e64, eax_3, 0x802006, var_294, lpSystemTime);
        esp_1 = &var_28c;
        var_4 = 3;
        uint32_t eax_4 = GetVersion();
        int32_t var_1a8_1 = (((eax_4 - eax_4) & 0xc) + 0x4c);
        eax_8 = CFileDialog::DoModal(&var_208);
        if (eax_8 != 1)
        {
            data_436104 = 0;
            *(arg1 + 0x20c) = 0;
        }
        else
        {
            void var_274;
            lpSystemTime = &var_274;
            var_294 = CFileDialog::GetFileName(&var_208);
            var_8 = 4;
            CString::operator=(&var_280, var_294);
            esp_2 = &lpSystemTime;
            var_8 = 3;
            int32_t var_278;
            CString::~CString(&var_278);
            if (*(var_280 - 8) != 0)
            {
                var_294 = 0x435ef0;
                CString::CString(&var_27c, var_294);
                var_294 = &var_278;
                var_8 = 6;
                int32_t var_190;
                var_278 = var_190;
                CFileDialog var_20c;
                class CString* eax_11 = CFileDialog::GetNextPathName(&var_20c, &var_270);
                var_c = 7;
                CString::operator+=(&var_280, eax_11);
                uint32_t* esp_3 = &var_294;
                var_c = 6;
                CString::~CString(&var_274);
                if (var_27c != 0)
                {
                    do
                    {
                        *(esp_3 - 4) = &esp_3[6];
                        *(esp_3 - 8) = &esp_3[9];
                        *(esp_3 - 8) = CFileDialog::GetNextPathName(&esp_3[0x21]);
                        *(esp_3 - 0xc) = &data_431708;
                        *(esp_3 - 0x10) = &esp_3[7];
                        esp_3[0xa1] = 8;
                        *(esp_3 - 0xc) = operator+();
                        esp_3[0xa0] = 9;
                        CString::operator+=(&esp_3[3]);
                        esp_3 = (esp_3 - 8);
                        esp_3[0xa2] = 8;
                        CString::~CString(&esp_3[8]);
                        esp_3[0xa2] = 6;
                        CString::~CString(&esp_3[9]);
                    } while (esp_3[6] != 0);
                }
                *(esp_3 - 4) = (*(esp_3[5] - 8) - *(esp_3[4] - 8));
                *(esp_3 - 8) = &esp_3[9];
                *(esp_3 - 8) = CString::Left(&esp_3[5]);
                esp_3[0xa1] = 0xa;
                CString::operator=(0x4360f0);
                esp_3[0xa1] = 6;
                CString::~CString(&esp_3[8]);
                *(esp_3 - 8) = &esp_3[3];
                CString::operator=(0x4360f4);
                *(esp_3 - 8) = &esp_3[4];
                CString::operator=(&esp_3[3]);
                int32_t eax_20 = esp_3[3];
                int32_t edx_7 = *(arg1 + 0xd8);
                *(esp_3 - 8) = 0;
                *(esp_3 - 0xc) = 0x1002;
                *(esp_3 - 0x10) = eax_20;
                eax_21 = *(edx_7 + 0x28)();
                esp_1 = &esp_3[2];
                if (eax_21 != 0)
                {
                    data_436104 = 1;
                    *(*(arg1 + 0xd8) + 0x54)();
                    *(arg1 + 0xec) = 0;
                    data_436108 = 0;
                    esp_1[0xa2] = 3;
                    CString::~CString(&esp_1[5]);
                }
            }
        }
        if ((eax_8 != 1 || ((eax_8 == 1 && *(var_280 - 8) != 0) && eax_21 != 0)))
        {
            esp_1[0xa2] = 0xc;
            CString::~CString(&esp_1[0x4d]);
            esp_1[0xa2] = 2;
            CDialog::~CDialog(&esp_1[0x21]);
        }
    }
    if ((*(arg1 + 0x20c) == 0 || (*(arg1 + 0x20c) != 0 && (eax_8 != 1 || ((eax_8 == 1 && *(var_280 - 8) != 0) && eax_21 != 0)))))
    {
        *(esp_1 - 4) = 0;
        CWnd::UpdateData(arg1);
        esp_2 = esp_1;
    }
    if ((*(arg1 + 0x20c) != 0 && eax_8 == 1))
    {
        if ((*(var_280 - 8) != 0 && eax_21 == 0))
        {
            *(esp_1 - 4) = 0x10;
            *(esp_1 - 8) = "Error";
            *(esp_1 - 0xc) = "Open file error!";
            data_436104 = 0;
            CWnd::MessageBoxA(arg1);
            *(esp_1 - 4) = 0;
            *(arg1 + 0x20c) = 0;
            CWnd::UpdateData(arg1);
            esp_2 = esp_1;
            esp_2[0xa2] = 3;
            CString::~CString(&esp_2[5]);
            esp_2[0xa2] = 0xb;
        }
        if (*(var_280 - 8) == 0)
        {
            var_8 = 5;
        }
        if ((*(var_280 - 8) == 0 || (*(var_280 - 8) != 0 && eax_21 == 0)))
        {
            CString::~CString(&esp_2[0x4d]);
            esp_2[0xa2] = 2;
            CDialog::~CDialog(&esp_2[0x21]);
        }
    }
    esp_2[0xa2] = 1;
    CFileFind::~CFileFind(&esp_2[0xe]);
    esp_2[0xa2] = 0;
    CString::~CString(&esp_2[7]);
    esp_2[0xa2] = 0xffffffff;
    int32_t eax_22 = CString::~CString(&esp_2[4]);
    *esp_2;
    esp_2[1];
    esp_2[2];
    esp_2[3];
    *fsbase = esp_2[0xa0];
    return eax_22;
}

int32_t __thiscall sub_415670(void* arg1, int16_t* arg2)
{
    int32_t __saved_ebp_1;
    int32_t __saved_ebp = __saved_ebp_1;
    int32_t var_c = 0xffffffff;
    int32_t (* var_10)() = sub_428e68;
    int32_t* fsbase;
    int32_t var_14 = *fsbase;
    *fsbase = &var_14;
    void* const var_54 = 0;
    int32_t esi;
    int32_t var_58 = esi;
    int32_t edi;
    int32_t var_5c = edi;
    void* var_28 = arg1;
    void var_4c;
    CString::CString(&var_4c);
    int32_t var_c_1 = 0;
    void var_48;
    CString::CString(&var_48);
    var_c_1 = 1;
    if (*(arg1 + 0xec) > 0x3840)
    {
        *(arg1 + 0xec) = 0;
        data_436108 = (data_436108 + 1);
    }
    int32_t* esp_1;
    int32_t var_60;
    if (data_436108 != 0)
    {
        int32_t eax_3 = data_4360f0;
        uint32_t edx_2 = *data_436108;
        var_60 = data_4360f4;
        uint32_t var_64_2 = edx_2;
        int32_t var_68_1 = eax_3;
        void* var_6c_1 = "%s%d#-%s";
        CString::Format(&var_48, "%s%d#-%s");
        esp_1 = &var_5c;
    }
    else
    {
        var_60 = 0x4360f4;
        int32_t var_64 = 0x4360f0;
        var_10 = 2;
        void var_38;
        CString::operator=(&var_4c, operator+(&var_38, &data_4360f0));
        esp_1 = &var_60;
        var_10 = 1;
        void var_3c;
        CString::~CString(&var_3c);
    }
    int32_t eax_4 = esp_1[5];
    int32_t edx_3 = *(arg1 + 0xd8);
    *(esp_1 - 4) = 0;
    *(esp_1 - 8) = 0x3002;
    *(esp_1 - 0xc) = eax_4;
    void* esp_4 = (esp_1 - 0xc);
    if (*(edx_3 + 0x28)() != 0)
    {
        if (*(arg1 + 0xec) == 0)
        {
            CString::Empty((esp_4 + 0x10));
            *(esp_4 - 4) = 0x43405c;
            CString::operator=((esp_4 + 0x14));
            *(esp_4 - 4) = (esp_4 + 0x14);
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x434048;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x434038;
            CString::operator+=((esp_4 + 0x10));
            char eax_7 = arg2[0x28];
            *(esp_4 + 0x18) = 0;
            if (eax_7 > 0)
            {
                bool cond:1_1;
                do
                {
                    *(esp_4 - 4) = (*(esp_4 + 0x18) + 1);
                    *(esp_4 - 8) = "Cell%d\t";
                    *(esp_4 - 0xc) = (esp_4 + 0x14);
                    CString::Format();
                    *(esp_4 - 4) = (esp_4 + 0x14);
                    CString::operator+=((esp_4 + 0x10));
                    char eax_9 = (*(esp_4 + 0x18) + 1);
                    cond:1_1 = eax_9 < arg2[0x28];
                    *(esp_4 + 0x18) = eax_9;
                } while (cond:1_1);
            }
            *(esp_4 - 4) = 0x434018;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x434000;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433fec;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = "RSOC\t";
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433fcc;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433fbc;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433fa8;
            CString::operator+=((esp_4 + 0x10));
            char eax_10 = *(arg2 + 0x51);
            *(esp_4 + 0x18) = 0;
            if (eax_10 > 0)
            {
                bool cond:3_1;
                do
                {
                    *(esp_4 - 4) = (*(esp_4 + 0x18) + 1);
                    *(esp_4 - 8) = 0x433f98;
                    *(esp_4 - 0xc) = (esp_4 + 0x14);
                    CString::Format();
                    *(esp_4 - 4) = (esp_4 + 0x14);
                    CString::operator+=((esp_4 + 0x10));
                    char eax_12 = (*(esp_4 + 0x18) + 1);
                    cond:3_1 = eax_12 < *(arg2 + 0x51);
                    *(esp_4 + 0x18) = eax_12;
                } while (cond:3_1);
            }
            *(esp_4 - 4) = 0x433f80;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433f68;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = "ProtectStatus\t";
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = "BalanceStatus\t";
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433f3c;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = 0x433f2c;
            CString::operator+=((esp_4 + 0x10));
            *(esp_4 - 4) = &data_433f28;
            CString::operator+=((esp_4 + 0x10));
            int32_t edx_10 = *(arg1 + 0xd8);
            *(esp_4 - 4) = 2;
            *(esp_4 - 8) = 0;
            *(edx_10 + 0x30)();
            void* eax_13 = *(esp_4 + 0x10);
            int32_t edx_11 = *(arg1 + 0xd8);
            *(esp_4 - 4) = *(eax_13 - 8);
            *(esp_4 - 8) = eax_13;
            *(edx_11 + 0x40)();
            esp_4 = esp_4;
            *(arg1 + 0xec) = (*(arg1 + 0xec) + 1);
        }
        *(esp_4 - 4) = (esp_4 + 0x38);
        GetLocalTime();
        CString::Empty((esp_4 + 0x10));
        int16_t eax_15 = *(esp_4 + 0x40);
        uint32_t edx_13 = *(esp_4 + 0x42);
        *(esp_4 - 4) = *(esp_4 + 0x44);
        int16_t ecx_38 = *(esp_4 + 0x3e);
        *(esp_4 - 8) = edx_13;
        int16_t edx_14 = *(esp_4 + 0x3a);
        *(esp_4 - 0xc) = eax_15;
        int16_t eax_17 = *(esp_4 + 0x38);
        *(esp_4 - 0x10) = ecx_38;
        *(esp_4 - 0x14) = edx_14;
        *(esp_4 - 0x18) = eax_17;
        *(esp_4 - 0x1c) = "%04d-%02d-%02d\t%02d:%02d:%02d\t";
        *(esp_4 - 0x20) = (esp_4 + 0x14);
        CString::Format();
        *(esp_4 - 4) = (esp_4 + 0x14);
        CString::operator+=((esp_4 + 0x10));
        int32_t eax_19 = *(arg2 + 0x54);
        *(esp_4 + 0x30) = 0;
        *(esp_4 + 0x2c) = eax_19;
        *(esp_4 - 8) = (*(esp_4 + 0x2c) * 0.00999999978f);
        *(esp_4 - 0xc) = "%0.2fV\t";
        *(esp_4 - 0x10) = (esp_4 + 0x14);
        CString::Format();
        *(esp_4 - 4) = (esp_4 + 0x14);
        CString::operator+=((esp_4 + 0x10));
        int32_t eax_20 = *(arg2 + 0x58);
        *(esp_4 + 0x20) = eax_20;
        long double x87_r7_3 = *(esp_4 + 0x20);
        void* esp_77;
        if ((*eax_20[1] & 0x80) == 0)
        {
            *(esp_4 - 8) = (x87_r7_3 * 0.00999999978f);
            *(esp_4 - 0xc) = "%0.2fA\t";
            *(esp_4 - 0x10) = (esp_4 + 0x14);
            esp_77 = (esp_4 - 0x10);
        }
        else
        {
            *(esp_4 - 8) = ((65536f - x87_r7_3) * 0.00999999978f);
            *(esp_4 - 0xc) = "-%0.2fA\t";
            *(esp_4 - 0x10) = (esp_4 + 0x14);
            esp_77 = (esp_4 - 0x10);
        }
        CString::Format();
        *(esp_77 + 0xc) = (esp_77 + 0x24);
        CString::operator+=((esp_77 + 0x20));
        void* esp_82 = (esp_77 + 0x10);
        char eax_22 = arg2[0x28];
        int32_t edi_2;
        edi_2 = *arg2;
        *(esp_82 + 0x1c) = 0;
        *(esp_82 + 0x20) = edi_2;
        *(esp_82 + 0x18) = 0;
        if (eax_22 > 0)
        {
            int32_t eax_27;
            int32_t ecx_50;
            do
            {
                uint32_t eax_24 = *(esp_82 + 0x18);
                int32_t ecx_46;
                ecx_46 = arg2[eax_24];
                *(esp_82 + 0x28) = ecx_46;
                *(esp_82 + 0x2c) = &arg2[eax_24];
                *(esp_82 - 8) = (*(esp_82 + 0x28) * 0.00100000005f);
                *(esp_82 - 0xc) = "%0.3f V\t";
                *(esp_82 - 0x10) = (esp_82 + 0x14);
                CString::Format();
                *(esp_82 - 4) = (esp_82 + 0x14);
                CString::operator+=((esp_82 + 0x10));
                eax_27 = **(esp_82 + 0x2c);
                if (edi_2 > eax_27)
                {
                    edi_2 = eax_27;
                }
                if (*(esp_82 + 0x20) < eax_27)
                {
                    *(esp_82 + 0x20) = eax_27;
                }
                ecx_50 = (*(esp_82 + 0x1c) + eax_27);
                eax_27 = *(esp_82 + 0x18);
                *(esp_82 + 0x1c) = ecx_50;
                ecx_50 = arg2[0x28];
                eax_27 = (eax_27 + 1);
                *(esp_82 + 0x18) = eax_27;
            } while (eax_27 < ecx_50);
        }
        int32_t ecx_51;
        ecx_51 = arg2[0x28];
        uint32_t temp0_1 = (COMBINE(0, *(esp_82 + 0x1c)) / ecx_51);
        *(esp_82 + 0x30) = 0;
        *(esp_82 + 0x2c) = temp0_1;
        *(esp_82 - 8) = (*(esp_82 + 0x2c) * 0.00100000005f);
        *(esp_82 - 0xc) = "%0.3f V\t";
        *(esp_82 - 0x10) = (esp_82 + 0x14);
        CString::Format();
        *(esp_82 - 4) = (esp_82 + 0x14);
        CString::operator+=((esp_82 + 0x10));
        int32_t ecx_53 = *(esp_82 + 0x20);
        *(esp_82 + 0x30) = 0;
        *(esp_82 + 0x2c) = ecx_53;
        *(esp_82 - 8) = (*(esp_82 + 0x2c) * 0.00100000005f);
        *(esp_82 - 0xc) = "%0.3f V\t";
        *(esp_82 - 0x10) = (esp_82 + 0x14);
        CString::Format();
        *(esp_82 - 4) = (esp_82 + 0x14);
        CString::operator+=((esp_82 + 0x10));
        *(esp_82 + 0x2c) = edi_2;
        *(esp_82 + 0x30) = 0;
        *(esp_82 - 8) = (*(esp_82 + 0x2c) * 0.00100000005f);
        *(esp_82 - 0xc) = "%0.3f V\t";
        *(esp_82 - 0x10) = (esp_82 + 0x14);
        CString::Format();
        *(esp_82 - 4) = (esp_82 + 0x14);
        CString::operator+=((esp_82 + 0x10));
        int32_t eax_32;
        eax_32 = arg2[0x38];
        *(esp_82 - 4) = eax_32;
        void* esp_103;
        *(esp_103 - 8) = "%d%%\t";
        *(esp_103 - 0xc) = (esp_82 + 0x14);
        CString::Format();
        *(esp_103 - 4) = (esp_103 + 0x14);
        CString::operator+=((esp_103 + 0x10));
        *(esp_103 - 4) = (*(arg2 + 0x5c) * 0xa);
        *(esp_103 - 8) = "%dmAH\t";
        *(esp_103 - 0xc) = (esp_103 + 0x14);
        CString::Format();
        *(esp_103 - 4) = (esp_103 + 0x14);
        CString::operator+=((esp_103 + 0x10));
        *(esp_103 - 4) = (*(arg2 + 0x60) * 0xa);
        *(esp_103 - 8) = "%dmAH\t";
        void* esp_119 = (esp_103 - 8);
        *(esp_119 - 4) = (esp_119 + 0x1c);
        CString::Format();
        *(esp_119 + 4) = (esp_119 + 0x1c);
        CString::operator+=((esp_119 + 0x18));
        *(esp_119 + 4) = *(arg2 + 0x74);
        *esp_119 = &data_433ecc;
        *(esp_119 - 4) = (esp_119 + 0x1c);
        CString::Format();
        *(esp_119 + 4) = (esp_119 + 0x1c);
        CString::operator+=((esp_119 + 0x18));
        void* esp_129 = (esp_119 + 8);
        char eax_40 = *(arg2 + 0x51);
        *(esp_129 + 0x18) = 0;
        if (eax_40 > 0)
        {
            bool cond:4_1;
            do
            {
                int32_t ecx_65;
                ecx_65 = arg2[(*(esp_129 + 0x18) + 0x20)];
                *(esp_129 + 0x2c) = ecx_65;
                *(esp_129 - 8) = ((*(esp_129 + 0x2c) - 2731f) * 0.100000001f);
                *(esp_129 - 0xc) = "%0.1f\t";
                *(esp_129 - 0x10) = (esp_129 + 0x14);
                CString::Format();
                *(esp_129 - 4) = (esp_129 + 0x14);
                CString::operator+=((esp_129 + 0x10));
                char eax_44 = (*(esp_129 + 0x18) + 1);
                cond:4_1 = eax_44 < *(arg2 + 0x51);
                *(esp_129 + 0x18) = eax_44;
            } while (cond:4_1);
        }
        void* esp_135;
        if ((arg2[0x46] & 1) == 0)
        {
            *(esp_129 - 4) = "OFF\t";
            esp_135 = (esp_129 - 4);
        }
        else
        {
            *(esp_129 - 4) = &data_433ec0;
            esp_135 = (esp_129 - 4);
        }
        CString::operator+=((esp_135 + 0x14));
        void* esp_137;
        if ((arg2[0x46] & 2) == 0)
        {
            *esp_135 = "OFF\t";
            esp_137 = esp_135;
        }
        else
        {
            *esp_135 = &data_433ec0;
            esp_137 = esp_135;
        }
        CString::operator+=((esp_137 + 0x14));
        int32_t ecx_70;
        ecx_70 = arg2[0x40];
        *esp_137 = ecx_70;
        *(esp_137 - 4) = &data_433eb4;
        *(esp_137 - 8) = (esp_137 + 0x18);
        CString::Format();
        *esp_137 = (esp_137 + 0x18);
        CString::operator+=((esp_137 + 0x14));
        *esp_137 = *(arg2 + 0x88);
        *(esp_137 - 4) = &data_433eb4;
        *(esp_137 - 8) = (esp_137 + 0x18);
        CString::Format();
        *esp_137 = (esp_137 + 0x18);
        CString::operator+=((esp_137 + 0x14));
        int32_t eax_47 = *(arg2 + 0x68);
        void* esp_153;
        if (eax_47 == 0)
        {
            *esp_137 = (*(arg2 + 0x60) * 0xa);
            *(esp_137 - 4) = "%dmAH\t";
            *(esp_137 - 8) = (esp_137 + 0x18);
            esp_153 = (esp_137 - 8);
        }
        else
        {
            *esp_137 = (eax_47 * 0xa);
            *(esp_137 - 4) = "%dmAH\t";
            *(esp_137 - 8) = (esp_137 + 0x18);
            esp_153 = (esp_137 - 8);
        }
        CString::Format();
        *(esp_153 + 8) = (esp_153 + 0x20);
        CString::operator+=((esp_153 + 0x1c));
        *(esp_153 + 8) = (*(arg2 + 0x64) * 0xa);
        *(esp_153 + 4) = "%dmAH\t";
        *esp_153 = (esp_153 + 0x20);
        CString::Format();
        *(esp_153 + 8) = (esp_153 + 0x20);
        CString::operator+=((esp_153 + 0x1c));
        *(esp_153 + 8) = &data_433f28;
        CString::operator+=((esp_153 + 0x1c));
        int32_t eax_53 = *(arg1 + 0xd8);
        *(esp_153 + 8) = 2;
        *(esp_153 + 4) = 0;
        *(eax_53 + 0x30)();
        void* eax_54 = *(esp_153 + 0x1c);
        int32_t edx_34 = *(arg1 + 0xd8);
        *(esp_153 + 8) = *(eax_54 - 8);
        *(esp_153 + 4) = eax_54;
        *(edx_34 + 0x40)();
        esp_4 = (esp_153 + 0xc);
        *(*(arg1 + 0xd8) + 0x54)();
        void* eax_56 = *(esp_4 + 0x34);
        *(eax_56 + 0xec) = (*(eax_56 + 0xec) + 1);
    }
    *(esp_4 + 0x50) = 0;
    CString::~CString((esp_4 + 0x14));
    *(esp_4 + 0x50) = 0xffffffff;
    int32_t eax_57 = CString::~CString((esp_4 + 0x10));
    *esp_4;
    *(esp_4 + 4);
    *fsbase = *(esp_4 + 0x48);
    *(esp_4 + 8);
    return eax_57;
}

int32_t __stdcall sub_415e00(int32_t arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_428ed5;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    sub_426ed0(0x23208);
    sub_405b60(&var_c, nullptr);
    arg_23204 = 0;
    CDialog::DoModal(&var_c);
    arg_23204 = 7;
    CString::~CString(&arg_231f8);
    arg_23204 = 6;
    sub_426160(&arg_2318c);
    arg_23204 = 5;
    CStatic::~CStatic(&arg_2314c);
    arg_23204 = 4;
    CComboBox::~CComboBox(&arg_2310c);
    arg_23204 = 3;
    CComboBox::~CComboBox(&arg_230cc);
    arg_23204 = 2;
    sub_416a80(&arg_2307c);
    arg_23204 = 1;
    sub_411840(&arg_54);
    arg_23204 = 0xffffffff;
    int32_t eax = CDialog::~CDialog(&var_c);
    *fsbase = arg1;
    return eax;
}

int32_t sub_415f00()
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_428f01;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_138;
    sub_411490(&var_138, nullptr);
    int32_t var_4 = 0;
    CDialog::DoModal(&var_138);
    int32_t var_4_1 = 2;
    void var_10;
    CString::~CString(&var_10);
    var_4_1 = 1;
    void var_d8;
    sub_413090(&var_d8);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(&var_138);
    *fsbase = var_c;
    return eax_1;
}

int32_t* __stdcall sub_415f90(int32_t* arg1)
{
    *arg1 = 0;
    return arg1;
}

int32_t sub_415fa0()
{
    data_435fd4 = 0;
    CWnd* ecx;
    /* tailcall */
    return sub_415fd0(ecx);
}

int32_t sub_415fb0()
{
    data_435fd4 = 1;
    CWnd* ecx;
    /* tailcall */
    return sub_415fd0(ecx);
}

int32_t sub_415fc0()
{
    data_435fd4 = 2;
    CWnd* ecx;
    /* tailcall */
    return sub_415fd0(ecx);
}

int32_t __fastcall sub_415fd0(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_428f18;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_10 = arg1;
    CString::CString(&var_10);
    int32_t ecx_1 = data_433b0c;
    char eax_1 = data_435fd4;
    int32_t var_4 = 0;
    if (ecx_1 != 0xffffffff)
    {
        char** var_2c_1;
        char* var_28_1;
        if (eax_1 == 0)
        {
            int32_t var_1c_1 = data_433b14;
            int32_t var_20_4 = data_433b10;
            int32_t var_24_1 = (ecx_1 + 1);
            var_28_1 = &data_4341e0;
            var_2c_1 = &var_10;
        }
        if (eax_1 == 1)
        {
            int32_t var_1c_2 = data_433b14;
            int32_t var_20_5 = data_433b10;
            int32_t var_24_2 = (ecx_1 + 1);
            var_28_1 = &data_4341bc;
        }
        if (eax_1 == 2)
        {
            int32_t var_1c_3 = data_433b14;
            int32_t var_20_6 = data_433b10;
            int32_t var_24_3 = (ecx_1 + 1);
            var_28_1 = "ComPort:COM%d,Baudrate:%ld,data …";
        }
        if ((eax_1 == 1 || eax_1 == 2))
        {
            var_2c_1 = &var_10;
        }
        if (((eax_1 == 0 || eax_1 == 1) || eax_1 == 2))
        {
            CString::Format(var_2c_1, var_28_1);
        }
    }
    else if (eax_1 == 0)
    {
        CString::Format(&var_10, &data_433ba4);
    }
    else if (eax_1 == 1)
    {
        CString::Format(&var_10, &data_43421c);
    }
    else if (eax_1 == 2)
    {
        CString::Format(&var_10, "Invalid serial port!");
    }
    CWnd::SetDlgItemTextA(arg1, 0x3f6, var_10);
    char eax_5 = data_435fd4;
    char* var_1c_5;
    if (eax_5 == 0)
    {
        var_1c_5 = &data_433b6c;
    }
    if (eax_5 == 1)
    {
        var_1c_5 = &data_434188;
    }
    if (eax_5 == 2)
    {
        var_1c_5 = "Not connected!";
    }
    if (((eax_5 == 0 || eax_5 == 1) || eax_5 == 2))
    {
        CWnd::SetDlgItemTextA(arg1, 0x3f8, var_1c_5);
    }
    sub_410cb0((arg1 + 0x174));
    char eax_6 = data_435fd4;
    char* var_1c_6;
    if (eax_6 == 0)
    {
        sub_410a50((arg1 + 0x174), *(arg1 + 0x60), &data_433c3c, nullptr);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x64), &data_433c30, 1);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x68), &data_433c24, 2);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x74), &data_43416c, 3);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x70), &data_433c18, 4);
        CWnd::SetDlgItemTextA(arg1, 0x3e9, &data_434160);
        CWnd::SetDlgItemTextA(arg1, 0x3ea, &data_434158);
        CWnd::SetDlgItemTextA(arg1, 0x3eb, &data_434150);
        CWnd::SetDlgItemTextA(arg1, 0x3ec, &data_434148);
        CWnd::SetDlgItemTextA(arg1, 0x4ae, &data_434140);
        var_1c_6 = &data_434134;
    }
    if (eax_6 == 1)
    {
        sub_410a50((arg1 + 0x174), *(arg1 + 0x60), &data_434128, nullptr);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x64), &data_43411c, 1);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x68), &data_434110, 2);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x74), &data_43416c, 3);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x70), &data_433c18, 4);
        CWnd::SetDlgItemTextA(arg1, 0x3e9, &data_434104);
        CWnd::SetDlgItemTextA(arg1, 0x3ea, &data_4340fc);
        CWnd::SetDlgItemTextA(arg1, 0x3eb, &data_434150);
        CWnd::SetDlgItemTextA(arg1, 0x3ec, &data_4340f4);
        CWnd::SetDlgItemTextA(arg1, 0x4ae, &data_4340ec);
        var_1c_6 = &data_4340e0;
    }
    if (eax_6 == 2)
    {
        sub_410a50((arg1 + 0x174), *(arg1 + 0x60), "PackInfo", nullptr);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x64), "Parameter", 1);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x68), "Calibration ", 2);
        sub_410a50((arg1 + 0x174), *(arg1 + 0x74), "RTC DATA ", 3);
        CWnd::SetDlgItemTextA(arg1, 0x3e9, "CommPort");
        CWnd::SetDlgItemTextA(arg1, 0x3ea, "Start");
        CWnd::SetDlgItemTextA(arg1, 0x3eb, "Stop");
        CWnd::SetDlgItemTextA(arg1, 0x3ec, "Upgrade");
        CWnd::SetDlgItemTextA(arg1, 0x4ae, "Help");
        var_1c_6 = "Save Data";
    }
    if (((eax_6 == 0 || eax_6 == 1) || eax_6 == 2))
    {
        CWnd::SetDlgItemTextA(arg1, 0x3ed, var_1c_6);
    }
    sub_417f10(*(arg1 + 0x60));
    sub_40bc00(*(arg1 + 0x64));
    sub_404570(*(arg1 + 0x68));
    sub_41b870(*(arg1 + 0x70));
    sub_41e2f0(*(arg1 + 0x74));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_12 = CString::~CString(&var_10);
    *fsbase = var_c;
    return eax_12;
}

class CString* __fastcall sub_416390(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    return CString::operator=(&data_435fe0, (arg1 + 0x210));
}

int32_t __fastcall sub_4163b0(void* arg1)
{
    data_43610a = 0;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_4163c0(void* arg1)
{
    data_43610a = 1;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_4163d0(void* arg1)
{
    data_43610a = 2;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_4163e0(void* arg1)
{
    data_43610a = 3;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_4163f0(void* arg1)
{
    data_43610a = 4;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_416400(void* arg1)
{
    data_43610a = 5;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

int32_t __fastcall sub_416410(void* arg1)
{
    data_43610a = 6;
    /* tailcall */
    return sub_40e750(*(arg1 + 0x64));
}

void*** __fastcall sub_416420(void*** arg1)
{
    arg1[1] = 0;
    arg1[2] = 0;
    *arg1 = &data_42b914;
    return arg1;
}

void*** __thiscall sub_416440(void*** arg1, char arg2)
{
    sub_416460(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_416460(void*** arg1)
{
    *arg1 = &data_42b914;
    /* tailcall */
    return sub_416470(arg1);
}

void* __fastcall sub_416470(void* arg1)
{
    void* eax = *(arg1 + 4);
    if (eax != 0)
    {
        operator delete(eax);
        *(arg1 + 4) = 0;
    }
    void* eax_1 = *(arg1 + 8);
    if (eax_1 != 0)
    {
        eax_1 = operator delete(eax_1);
        *(arg1 + 8) = 0;
    }
    return eax_1;
}

int32_t __thiscall sub_4164b0(void* arg1, char* arg2)
{
    sub_416470(arg1);
    int32_t cbMultiByte = WideCharToMultiByte(0, 0, arg2, wcslen(arg2), nullptr, 0, nullptr, nullptr);
    void* lpMultiByteStr = operator new((cbMultiByte + 1));
    *(arg1 + 4) = lpMultiByteStr;
    WideCharToMultiByte(0, 0, arg2, wcslen(arg2), lpMultiByteStr, cbMultiByte, nullptr, nullptr);
    *(arg1 + 4)[cbMultiByte] = 0;
    return *(arg1 + 4);
}

int32_t __thiscall sub_416520(void* arg1, uint8_t* arg2)
{
    sub_416470(arg1);
    int32_t i = 0xffffffff;
    uint8_t* edi = arg2;
    while (i != 0)
    {
        bool cond:0_1 = 0 != *edi;
        edi = &edi[1];
        i = (i - 1);
        if ((!cond:0_1))
        {
            break;
        }
    }
    int32_t cchWideChar = MultiByteToWideChar(0, 0, arg2, ((!i) - 1), nullptr, 0);
    void* lpWideCharStr = operator new(((cchWideChar * 2) + 2));
    *(arg1 + 8) = lpWideCharStr;
    uint8_t* edi_1 = arg2;
    int32_t i_1 = 0xffffffff;
    while (i_1 != 0)
    {
        bool cond:1_1 = 0 != *edi_1;
        edi_1 = &edi_1[1];
        i_1 = (i_1 - 1);
        if ((!cond:1_1))
        {
            break;
        }
    }
    MultiByteToWideChar(0, 0, arg2, ((!i_1) - 1), lpWideCharStr, cchWideChar);
    *(*(arg1 + 8) + (cchWideChar << 1)) = 0;
    return *(arg1 + 8);
}

int32_t* __fastcall sub_416590(int32_t* arg1)
{
    *arg1 = 0x42b918;
    arg1[2] = 0;
    arg1[0xd] = 0x1000;
    arg1[0xe] = 0x1000;
    arg1[1] = 0;
    return arg1;
}

int32_t* __thiscall sub_4165b0(int32_t* arg1, char arg2)
{
    sub_416a80(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __thiscall sub_4165d0(void* arg1, int32_t arg2, int32_t arg3)
{
    *(arg1 + 0x34) = arg2;
    *(arg1 + 0x38) = arg3;
    return arg2;
}

HANDLE __thiscall sub_4165f0(void* arg1, int32_t arg2, int32_t arg3, BOOL arg4)
{
    if (*(arg1 + 8) != 0)
    {
        return 1;
    }
    int32_t var_68 = arg2;
    int32_t param0;
    wsprintfA(&param0, "\\.\COM%d");
    BOOL var_6c = arg4;
    int32_t var_70_1 = arg3;
    void param0_1;
    wsprintfA(&param0_1, "%d,n,8,%d");
    void lpFileName;
    HANDLE eax_3 = CreateFileA(&lpFileName, 0xc0000000, FILE_SHARE_NONE, nullptr, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, nullptr);
    *(arg1 + 4) = eax_3;
    if (eax_3 != 0xffffffff)
    {
        __builtin_memset((arg1 + 0xc), 0, 0x14);
        __builtin_memset((arg1 + 0x20), 0, 0x14);
        *(arg1 + 0x1c) = CreateEventA(nullptr, 1, 0, nullptr);
        *(arg1 + 0x30) = CreateEventA(nullptr, 1, 0, nullptr);
        int32_t eax_6;
        int32_t edx_2;
        edx_2 = HIGHD(0x3840);
        eax_6 = LOWD(0x3840);
        uint32_t dwInQueue = *(arg1 + 0x34);
        int32_t var_18_1 = 0x3e8;
        int32_t var_10_1 = 0x14;
        int32_t var_1c_1 = ((COMBINE(edx_2, eax_6) / arg3) + 1);
        int32_t var_14_1 = ((COMBINE(edx_2, eax_6) / arg3) + 1);
        uint32_t dwOutQueue = *(arg1 + 0x38);
        int32_t lpCommTimeouts = ((COMBINE(edx_2, eax_6) / arg3) + 0x15);
        BOOL eax_9 = SetupComm(*(arg1 + 4), dwInQueue, dwOutQueue);
        BOOL eax_10 = SetCommTimeouts(*(arg1 + 4), &lpCommTimeouts);
        void lpDCB;
        if (GetCommState(*(arg1 + 4), &lpDCB) == 0)
        {
            CloseHandle(*(arg1 + 4));
        }
        int32_t var_4;
        int32_t edx_6;
        *edx_6[1] = (*(var_4 & 0xffffdfb3)[1] | 0x10);
        int32_t var_4_1 = edx_6;
        int32_t var_8_1 = arg3;
        arg_8 = arg4;
        *arg2[2] = 8;
        if (SetCommMask(*(arg1 + 4), EV_TXEMPTY) == 0)
        {
            CloseHandle(*(arg1 + 4));
        }
        SetCommMask(*(arg1 + 4), EV_CTS | EV_RXCHAR | EV_TXEMPTY);
        PurgeComm(*(arg1 + 4), PURGE_RXCLEAR | PURGE_TXCLEAR);
        int32_t ecx_4 = 1;
        int32_t var_44;
        if (SetCommState(*(arg1 + 4), &lpDCB) == 0)
        {
            ecx_4 = var_44;
        }
        HANDLE hObject = *(arg1 + 0x1c);
        if (hObject != 0)
        {
            if ((*(arg1 + 0x30) != 0 && (eax_10 != 0 && (ecx_4 != 0 && eax_9 != 0))))
            {
                *(arg1 + 8) = 1;
                return hObject;
            }
            if (hObject != 0)
            {
                CloseHandle(hObject);
            }
        }
        HANDLE hObject_1 = *(arg1 + 0x30);
        if (hObject_1 != 0)
        {
            CloseHandle(hObject_1);
        }
        CloseHandle(*(arg1 + 4));
    }
    return 0;
}

BOOL __thiscall sub_4167f0(void* arg1, int32_t arg2, char arg3)
{
    void lpDCB;
    GetCommState(*(arg1 + 4), &lpDCB);
    int32_t var_18 = arg2;
    char var_a = 8;
    char var_9 = 0;
    char var_8 = arg3;
    BOOL eax_1 = SetCommState(*(arg1 + 4), &lpDCB);
    if (eax_1 == 0)
    {
        CloseHandle(*(arg1 + 4));
        return 0;
    }
    *(arg1 + 8) = 1;
    return eax_1;
}

BOOL __thiscall sub_416860(void* arg1, uint32_t arg2, uint32_t arg3)
{
    HANDLE hFile = *(arg1 + 4);
    if (hFile != 0)
    {
        *(arg1 + 0x34) = arg2;
        *(arg1 + 0x38) = arg3;
        return SetupComm(hFile, arg2, arg3);
    }
    return 0;
}

HANDLE __thiscall sub_416890(void* arg1, char arg2)
{
    HANDLE hFile = *(arg1 + 4);
    if (hFile == 0)
    {
        return hFile;
    }
    int32_t lpDCB = 0x1c;
    BOOL eax = GetCommState(hFile, &lpDCB);
    if (eax == 0)
    {
        return eax;
    }
    void* eax_3 = (tolower(arg2) - 0x65);
    int32_t ecx;
    if (eax_3 <= 0xe)
    {
        ecx = *(eax_3 + 0x41692c);
        switch (ecx)
        {
            case 0:
            {
                eax_3 = 2;
                break;
            }
            case 1:
            {
                eax_3 = 3;
                break;
            }
            case 2:
            {
                eax_3 = 1;
                break;
            }
            case 3:
            {
                eax_3 = 4;
                break;
            }
        }
    }
    if ((eax_3 > 0xe || (eax_3 <= 0xe && ecx == 4)))
    {
        eax_3 = 0;
    }
    char var_9 = eax_3;
    return SetCommState(*(arg1 + 4), &lpDCB);
}

int32_t __thiscall sub_416940(void* arg1, void* arg2, uint32_t arg3)
{
    if (*(arg1 + 8) != 0)
    {
        HANDLE hFile = *(arg1 + 4);
        if (hFile != 0)
        {
            uint32_t nNumberOfBytesToWrite = arg3;
            if (WriteFile(hFile, arg2, nNumberOfBytesToWrite, &arg3, (arg1 + 0x20)) != 0)
            {
                return 1;
            }
            if (GetLastError() == ERROR_IO_PENDING)
            {
                GetOverlappedResult(*(arg1 + 4), (arg1 + 0x20), &arg3, 1);
                int32_t eax_4;
                eax_4 = nNumberOfBytesToWrite == arg3;
                return eax_4;
            }
        }
    }
    return 0;
}

uint32_t __thiscall sub_4169c0(void* arg1, void* arg2, uint32_t arg3)
{
    if (*(arg1 + 8) != 0)
    {
        HANDLE hFile = *(arg1 + 4);
        if (hFile != 0)
        {
            if (ReadFile(hFile, arg2, arg3, &arg3, (arg1 + 0xc)) != 0)
            {
                return arg3;
            }
            if (GetLastError() == ERROR_IO_PENDING)
            {
                uint32_t bWait = WaitForSingleObject(*(arg1 + 0x1c), 0xffffffff);
                if (bWait == 0)
                {
                    BOOL eax_4 = GetOverlappedResult(*(arg1 + 4), (arg1 + 0xc), &arg3, bWait);
                    int32_t eax_5 = (-eax_4);
                    return ((eax_5 - eax_5) & arg3);
                }
            }
        }
    }
    return 0;
}

BOOL __fastcall sub_416a40(void* arg1)
{
    HANDLE hObject = *(arg1 + 0x1c);
    if (hObject != 0)
    {
        CloseHandle(hObject);
    }
    HANDLE hObject_1 = *(arg1 + 0x30);
    if (hObject_1 != 0)
    {
        CloseHandle(hObject_1);
    }
    BOOL hObject_2 = *(arg1 + 4);
    if (hObject_2 != 0)
    {
        hObject_2 = CloseHandle(hObject_2);
    }
    *(arg1 + 8) = 0;
    return hObject_2;
}

int32_t __fastcall sub_416a80(int32_t* arg1)
{
    *arg1 = 0x42b918;
    /* tailcall */
    return sub_416a40(arg1);
}

void*** __thiscall sub_416a90(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_428ff9;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x81, arg2);
    int32_t var_4 = 0;
    sub_423e30(&esi[0x18]);
    var_4 = 1;
    CWnd::CWnd(&esi[0x32]);
    esi[0x32] = 0x42ba5c;
    var_4 = 2;
    CString::CString(&esi[0x42]);
    var_4 = 3;
    CString::CString(&esi[0x46]);
    var_4 = 4;
    CString::CString(&esi[0x47]);
    var_4 = 5;
    CString::CString(&esi[0x48]);
    var_4 = 6;
    CString::CString(&esi[0x4a]);
    var_4 = 7;
    CString::CString(&esi[0x4b]);
    var_4 = 8;
    CString::CString(&esi[0x4c]);
    var_4 = 9;
    CString::CString(&esi[0x4d]);
    esi[0x52] = 0;
    esi[0x51] = 0x42b3c8;
    esi[0x54] = 0;
    esi[0x53] = 0x42ba48;
    esi[0x56] = 0;
    esi[0x55] = 0x42ba48;
    esi[0x58] = 0;
    esi[0x57] = 0x42ba48;
    var_4 = 0xe;
    *esi = &data_42b970;
    CString::operator=(&esi[0x42], &data_434240);
    esi[0x43] = 0;
    esi[0x44] = 0;
    esi[0x45] = 0;
    CString::operator=(&esi[0x46], &data_434240);
    CString::operator=(&esi[0x47], &data_434240);
    CString::operator=(&esi[0x48], &data_434240);
    esi[0x49] = 0;
    CString::operator=(&esi[0x4a], &data_434240);
    CString::operator=(&esi[0x4b], &data_435ef0);
    CString::operator=(&esi[0x4c], "2016-01-01");
    CString::operator=(&esi[0x4d], &data_435ef0);
    int32_t ecx_18 = var_c;
    esi[0x4e] = 0;
    esi[0x4f] = 0;
    esi[0x50] = 0;
    *fsbase = ecx_18;
    return esi;
}

CDialog* __thiscall sub_416c70(CDialog* arg1, char arg2)
{
    sub_416c90(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_416c90(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4290eb;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_14 = arg1;
    int32_t var_4 = 0;
    int32_t* var_10 = (arg1 + 0x15c);
    *(arg1 + 0x15c) = 0x42a6d0;
    var_4 = 0xe;
    CGdiObject::DeleteObject((arg1 + 0x15c));
    *(arg1 + 0x15c) = 0x42a6e4;
    int32_t* var_10_1 = (arg1 + 0x154);
    *(arg1 + 0x154) = 0x42a6d0;
    var_4 = 0xf;
    CGdiObject::DeleteObject((arg1 + 0x154));
    *(arg1 + 0x154) = 0x42a6e4;
    int32_t* var_10_2 = (arg1 + 0x14c);
    *(arg1 + 0x14c) = 0x42a6d0;
    var_4 = 0x10;
    CGdiObject::DeleteObject((arg1 + 0x14c));
    *(arg1 + 0x14c) = 0x42a6e4;
    int32_t* var_10_3 = (arg1 + 0x144);
    *(arg1 + 0x144) = 0x42a6d0;
    var_4 = 0x11;
    CGdiObject::DeleteObject((arg1 + 0x144));
    *(arg1 + 0x144) = 0x42a6e4;
    var_4 = 9;
    CString::~CString((arg1 + 0x134));
    var_4 = 8;
    CString::~CString((arg1 + 0x130));
    var_4 = 7;
    CString::~CString((arg1 + 0x12c));
    var_4 = 6;
    CString::~CString((arg1 + 0x128));
    var_4 = 5;
    CString::~CString((arg1 + 0x120));
    var_4 = 4;
    CString::~CString((arg1 + 0x11c));
    var_4 = 3;
    CString::~CString((arg1 + 0x118));
    var_4 = 2;
    CString::~CString((arg1 + 0x108));
    var_4 = 1;
    CListCtrl::~CListCtrl((arg1 + 0xc8));
    var_4 = 0;
    sub_423ee0((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_416e00(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x407, (arg1 + 0x60));
    DDX_Control(arg2, 0x3f9, (arg1 + 0xc8));
    DDX_Text(arg2, 0x3fb, (arg1 + 0x108));
    DDX_Text(arg2, 0x406, (arg1 + 0x10c));
    DDX_Text(arg2, 0x3fe, (arg1 + 0x110));
    DDX_Text(arg2, 0x3ff, (arg1 + 0x114));
    DDX_Text(arg2, 0x3fc, (arg1 + 0x118));
    DDX_Text(arg2, 0x3fd, (arg1 + 0x11c));
    DDX_Text(arg2, 0x405, (arg1 + 0x120));
    DDX_Text(arg2, 0x400, (arg1 + 0x124));
    DDX_Text(arg2, 0x3fa, (arg1 + 0x128));
    DDX_Text(arg2, 0x401, (arg1 + 0x12c));
    DDX_Text(arg2, 0x402, (arg1 + 0x130));
    DDX_Text(arg2, 0x49a, (arg1 + 0x134));
    DDX_Text(arg2, 0x55f, (arg1 + 0x138));
    DDX_Text(arg2, 0x403, (arg1 + 0x13c));
    return DDX_Text(arg2, 0x47e, (arg1 + 0x140));
}

int32_t sub_416f40() __pure
{
    return CDialog::messageMap;
}

int32_t sub_416f50() __pure
{
    return &data_42b920;
}

int32_t __fastcall sub_416f60(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_42910b;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog::OnInitDialog(arg1);
    void var_88;
    CString::CString(&var_88);
    int32_t i = 0;
    int32_t var_4 = 0;
    CGdiObject::Attach((arg1 + 0x14c), CreateSolidBrush(0xff));
    SendMessageA(*(arg1 + 0xe8), 0x1036, nullptr, 0x21);
    do
    {
        int32_t var_a0_1 = (i + 1);
        CString::Format(&var_88, &data_431074);
        CListCtrl::InsertItem((arg1 + 0xc8), 1, i, &data_435ef0, 0, 0, 0, 0);
        i = (i + 1);
    } while (i < 0xf);
    if (data_435fd4 == 0)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_4342a8, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, &data_43429c, 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, &data_434290, 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, &data_434284, 2, 0x6e, 3);
    }
    if (data_435fd4 == 1)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_432a6c, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, &data_434278, 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, &data_434290, 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, &data_43426c, 2, 0x6e, 3);
    }
    if (data_435fd4 == 2)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_434268, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, "Voltage)", 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, "Balance", 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, "Temp(C)", 2, 0x6e, 3);
    }
    *(*(arg1 + 0x60) + 0xc0)();
    *(*(arg1 + 0x60) + 0xd0)(0xc8c8c8);
    *(*(arg1 + 0x60) + 0xc8)(0x64);
    int32_t i_1 = 0;
    do
    {
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, (i_1 + 0x468)), 0);
        i_1 = (i_1 + 1);
    } while (i_1 < 0xc);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x474), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x476), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x475), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x477), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x478), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x416), 5);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x417), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x418), 5);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x415), 0);
    int32_t var_48;
    GetObjectA(*(CGdiObject::FromHandle(SendMessageA(*(arg1 + 0xe8), 0x31, nullptr, nullptr)) + 4), 0x3c, &var_48);
    int32_t ecx_39 = var_48;
    uint32_t eax_21;
    eax_21 = data_436120;
    var_48 = (ecx_39 + (ecx_39 / 3));
    if ((eax_21 & 1) == 0)
    {
        int32_t edx_3;
        edx_3 = eax_21;
        edx_3 = (edx_3 | 1);
        data_43611c = 0;
        data_436120 = edx_3;
        data_436118 = 0x42b3c8;
        sub_426f6a(sub_4173c0);
    }
    CGdiObject::Attach(&data_436118, CreateFontIndirectA(&var_48));
    SendMessageA(*(arg1 + 0xe8), 0x30, ((0xffbc9ee8 - 0xffbc9ee8) & data_43611c), 1);
    CGdiObject::Detach(&data_436118);
    CFont::CreatePointFont((arg1 + 0x144), 0x8c, &data_434244, nullptr);
    int32_t var_84;
    __builtin_memcpy(&var_84, "\xfa\x03\x00\x00\xfb\x03\x00\x00\x05\x04\x00\x00\xfc\x03\x00\x00\xfd\x03\x00\x00\xfe\x03\x00\x00\x06\x04\x00\x00\xff\x03\x00\x00\xff\x03\x00\x00\x00\x04\x00\x00\x01\x04\x00\x00\x02\x04\x00\x00\x9a\x04\x00\x00\x03\x04\x00\x00\x7e\x04\x00\x00", 0x3c);
    int32_t* edi_3 = &var_84;
    int32_t var_8c = 0xf;
    bool cond:1_1;
    do
    {
        class CWnd* eax_26 = CWnd::GetDlgItem(arg1, *edi_3);
        WPARAM wParam;
        if (arg1 != 0xfffffebc)
        {
            wParam = *(arg1 + 0x148);
        }
        else
        {
            wParam = nullptr;
        }
        SendMessageA(*(eax_26 + 0x20), 0x30, wParam, 1);
        edi_3 = &edi_3[1];
        cond:1_1 = var_8c != 1;
        var_8c = (var_8c - 1);
    } while (cond:1_1);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&var_88);
    *fsbase = var_c;
    return 1;
}

int32_t sub_4173c0()
{
    /* tailcall */
    return sub_401ef0(&data_436118);
}

int32_t __stdcall sub_4173d0(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __thiscall sub_417400(CWnd* arg1, int16_t* arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429128;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t __saved_ebp_1;
    int32_t __saved_ebp = __saved_ebp_1;
    int32_t __saved_esi_1;
    int32_t __saved_esi = __saved_esi_1;
    char* var_24;
    CString::CString(&var_24);
    int16_t* esi = arg2;
    int32_t var_4 = 0;
    double var_34 = (*(esi + 0x54) * 0.00999999978f);
    void* var_38 = "%0.2f";
    CString::Format((arg1 + 0x128), "%0.2f");
    int32_t eax_2 = *(esi + 0x58);
    if ((*eax_2[1] & 0x80) != 0)
    {
        eax_2 = (eax_2 - 0x10000);
    }
    int32_t var_18 = eax_2;
    int32_t var_34_1 = (var_18 * 0.00999999978f);
    void* var_38_1 = "%0.2f";
    CString::Format((arg1 + 0x108), "%0.2f");
    *(arg1 + 0x124) = (*(esi + 0x64) * 0xa);
    *(arg1 + 0x114) = (*(esi + 0x60) * 0xa);
    int32_t ecx_2;
    ecx_2 = esi[0x42];
    *(arg1 + 0x140) = ecx_2;
    int32_t eax_7 = *(esi + 0x68);
    if (eax_7 == 0)
    {
        *(arg1 + 0x13c) = (*(esi + 0x60) * 0xa);
    }
    else
    {
        *(arg1 + 0x13c) = (eax_7 * 0xa);
    }
    *(arg1 + 0x10c) = *(esi + 0x74);
    int32_t edx_4;
    edx_4 = esi[0x3e];
    var_34_1 = 0;
    int32_t edi;
    var_34_1 = edi;
    int32_t var_38_2 = edx_4;
    void* var_3c_2 = "%02X";
    CString::Format((arg1 + 0x12c), "%02X");
    int32_t eax_12;
    eax_12 = esi[0x3f];
    int32_t var_44 = (eax_12 & 0x1f);
    int32_t var_48 = ((eax_12 >> 5) & 0xf);
    int32_t var_4c = ((eax_12 >> 9) + 0x7d0);
    void* var_50 = "%d-%02d-%02d";
    CString::Format((arg1 + 0x130), "%d-%02d-%02d");
    int32_t eax_16;
    eax_16 = esi[0x38];
    *(*(arg1 + 0x60) + 0xc8)(eax_16);
    int32_t var_38_4 = 0x435ef0;
    CString::operator=((arg1 + 0x134), &data_435ef0);
    char i = 0;
    arg2 = 0;
    if (*(esi + 0x8d) > 0)
    {
        do
        {
            int32_t edx_10;
            edx_10 = *((arg2 + esi) + 0x8e);
            int32_t var_38_5 = edx_10;
            void* var_3c_3 = &data_431f38;
            CString::Format(&var_24, &data_431f38);
            CString::operator+=((arg1 + 0x134), &var_24);
            i = (i + 1);
            arg2 = i;
        } while (i < *(esi + 0x8d));
    }
    char eax_17 = esi[0x28];
    int32_t var_40_25;
    char* var_38_26;
    void* ecx_46;
    if ((data_436121 != eax_17 || (data_436121 == eax_17 && data_436122 != *(esi + 0x51))))
    {
        data_436121 = eax_17;
        data_436122 = *(esi + 0x51);
        int32_t var_38_27 = 0;
        int32_t var_3c_22 = 0;
        int32_t var_40_26 = 0x1009;
        SendMessageA(*(arg1 + 0xe8), 0x1009, nullptr, nullptr);
        int32_t ebx_11;
        ebx_11 = *esi;
        arg2 = 0;
        int32_t var_20_1 = ebx_11;
        int32_t var_1c_1 = ebx_11;
        if (esi[0x28] > 0)
        {
            bool cond:10_1;
            do
            {
                int32_t edi_4 = arg2;
                int32_t var_38_28 = (edi_4 + 1);
                void* var_3c_23 = &data_431074;
                CString::Format(&var_24, &data_431074);
                int32_t var_38_29 = 0;
                int32_t var_3c_24 = 0;
                int32_t var_40_28 = 0;
                int32_t var_44_9 = 0;
                int32_t var_48_3 = 0x435ef0;
                int32_t var_50_1 = 1;
                CListCtrl::InsertItem((arg1 + 0xc8), 1, edi_4, &data_435ef0, 0, 0, 0, 0);
                int32_t var_3c_25 = 0;
                CListCtrl::SetItemText((arg1 + 0xc8), edi_4, 0, var_24);
                int32_t eax_46;
                eax_46 = esi[edi_4];
                if (var_20_1 < eax_46)
                {
                    var_20_1 = eax_46;
                }
                if (var_1c_1 > eax_46)
                {
                    var_1c_1 = eax_46;
                }
                var_3c_25 = (eax_46 * 0.00100000005f);
                void* var_40_30 = "%0.3f";
                CString::Format(&var_24, "%0.3f");
                int32_t var_3c_26 = 1;
                CListCtrl::SetItemText((arg1 + 0xc8), edi_4, 1, var_24);
                char* var_38_32;
                if ((*(esi + 0x88) & (1 << edi_4)) == 0)
                {
                    var_38_32 = &data_435ef0;
                }
                else
                {
                    var_38_32 = &data_4342e0;
                }
                var_3c_22 = 2;
                CListCtrl::SetItemText((arg1 + 0xc8), edi_4, 2, var_38_32);
                cond:10_1 = (arg2 + 1) < esi[0x28];
                arg2 = (arg2 + 1);
            } while (cond:10_1);
            ebx_11 = var_20_1;
        }
        if (esi[0x28] < 0xa)
        {
            int32_t var_38_33 = 0;
            int32_t var_3c_27 = 0;
            int32_t var_40_33 = 0;
            int32_t var_44_11 = 0;
            int32_t var_48_4 = 0x435ef0;
            int32_t var_4c_2 = 4;
            int32_t var_50_2 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 4, &data_435ef0, 0, 0, 0, 0);
            int32_t var_38_34 = 0;
            int32_t var_3c_28 = 0;
            int32_t var_40_34 = 0;
            int32_t var_44_12 = 0;
            int32_t var_48_5 = 0x435ef0;
            int32_t var_4c_3 = 5;
            int32_t var_50_3 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 5, &data_435ef0, 0, 0, 0, 0);
            int32_t var_38_35 = 0;
            int32_t var_3c_29 = 0;
            int32_t var_40_35 = 0;
            int32_t var_44_13 = 0;
            int32_t var_48_6 = 0x435ef0;
            int32_t var_4c_4 = 6;
            int32_t var_50_4 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 6, &data_435ef0, 0, 0, 0, 0);
            int32_t var_38_36 = 0;
            int32_t var_3c_30 = 0;
            int32_t var_40_36 = 0;
            int32_t var_44_14 = 0;
            int32_t var_48_7 = 0x435ef0;
            int32_t var_4c_5 = 7;
            int32_t var_50_5 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 7, &data_435ef0, 0, 0, 0, 0);
            int32_t var_38_37 = 0;
            int32_t var_3c_31 = 0;
            int32_t var_40_37 = 0;
            int32_t var_44_15 = 0;
            int32_t var_48_8 = 0x435ef0;
            int32_t var_4c_6 = 8;
            int32_t var_50_6 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 8, &data_435ef0, 0, 0, 0, 0);
            int32_t var_38_38 = 0;
            var_3c_22 = 0;
            int32_t var_40_38 = 0;
            int32_t var_44_16 = 0;
            int32_t var_48_9 = 0x435ef0;
            int32_t var_4c_7 = 9;
            int32_t var_50_7 = 1;
            CListCtrl::InsertItem((arg1 + 0xc8), 1, 9, &data_435ef0, 0, 0, 0, 0);
        }
        int32_t var_10_2 = 0;
        var_3c_22 = (ebx_11 * 0.00100000005f);
        void* var_40_39 = "%0.3f";
        CString::Format((arg1 + 0x118), "%0.3f");
        int32_t var_10_3 = 0;
        var_3c_22 = (var_1c_1 * 0.00100000005f);
        void* var_40_40 = "%0.3f";
        CString::Format((arg1 + 0x11c), "%0.3f");
        int32_t ebx_13 = (ebx_11 - var_1c_1);
        *(arg1 + 0x110) = ebx_13;
        int32_t var_38_39;
        if (ebx_13 <= 8)
        {
            var_38_39 = 0;
        }
        else
        {
            var_38_39 = 5;
        }
        int32_t var_3c_32 = 0x478;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x478), var_38_39);
        char ecx_64 = esi[0x28];
        if (ecx_64 != 0)
        {
            var_18 = (COMBINE(0, (*(esi + 0x54) * 0xa)) / ecx_64);
        }
        var_3c_32 = (var_18 * 0.00100000005f);
        void* var_40_41 = "%0.3f";
        CString::Format((arg1 + 0x120), "%0.3f");
        ebx_13 = 0;
        arg2 = 0;
        if (*(esi + 0x51) > 0)
        {
            do
            {
                int32_t edi_8 = arg2;
                int32_t ecx_66;
                ecx_66 = esi[(edi_8 + 0x20)];
                var_3c_32 = ((ecx_66 - 0xaab) * 0.100000001f);
                void* var_40_42 = "%0.1f";
                CString::Format(&var_24, "%0.1f");
                var_3c_32 = 3;
                CListCtrl::SetItemText((arg1 + 0xc8), edi_8, 3, var_24);
                ebx_13 = (ebx_13 + 1);
                arg2 = ebx_13;
            } while (ebx_13 < *(esi + 0x51));
        }
        void* ebx_14;
        uint32_t edi_10;
        if (data_435fd0 == 0)
        {
            int32_t var_38_45 = 0x435ef0;
            edi_10 = arg2;
            ebx_14 = (arg1 + 0xc8);
            int32_t var_3c_37 = 3;
            CListCtrl::SetItemText(ebx_14, (edi_10 + 1), 3, &data_435ef0);
            int32_t var_38_46 = 0x435ef0;
            int32_t var_3c_38 = 3;
            CListCtrl::SetItemText(ebx_14, (edi_10 + 2), 3, &data_435ef0);
            var_38_26 = &data_435ef0;
        }
        else
        {
            int32_t ecx_69;
            ecx_69 = *(esi + 0xb3);
            int32_t edx_25;
            edx_25 = esi[0x5a];
            int32_t var_38_41 = ecx_69;
            int32_t eax_59;
            eax_59 = *(esi + 0xb5);
            int32_t var_3c_33 = edx_25;
            int32_t var_40_44 = eax_59;
            void* var_44_21 = "20%02hx-%02hx-%02hx";
            CString::Format(&var_24, "20%02hx-%02hx-%02hx");
            edi_10 = arg2;
            ebx_14 = (arg1 + 0xc8);
            int32_t var_38_42 = 0x4342c4;
            int32_t var_3c_34 = 3;
            CListCtrl::SetItemText(ebx_14, (edi_10 + 1), 3, &data_4342c4);
            int32_t var_3c_35 = 3;
            CListCtrl::SetItemText(ebx_14, (edi_10 + 2), 3, var_24);
            int32_t ecx_73;
            ecx_73 = esi[0x59];
            int32_t edx_27;
            edx_27 = esi[0x58];
            int32_t eax_61;
            eax_61 = *(esi + 0xb1);
            int32_t var_38_44 = edx_27;
            int32_t var_3c_36 = eax_61;
            int32_t var_40_47 = (ecx_73 & 0x3f);
            void* var_44_22 = "%02hx:%02hx:%02hx";
            CString::Format(&var_24, "%02hx:%02hx:%02hx");
            var_38_26 = var_24;
        }
        int32_t var_3c_39 = 3;
        var_40_25 = (edi_10 + 3);
        ecx_46 = ebx_14;
    }
    if ((data_436121 == eax_17 && data_436122 == *(esi + 0x51)))
    {
        arg2 = 0;
        int32_t ecx_12;
        ecx_12 = *esi;
        int32_t var_20 = ecx_12;
        int32_t var_1c = ecx_12;
        int32_t var_3c_7;
        char i_1;
        void* edi_2;
        if (eax_17 > 0)
        {
            edi_2 = (arg1 + 0xc8);
            do
            {
                uint32_t ebx_1 = arg2;
                int32_t var_38_7 = (ebx_1 + 1);
                void* var_3c_4 = &data_431074;
                CString::Format(&var_24, &data_431074);
                int32_t var_3c_5 = 0;
                CListCtrl::SetItemText(edi_2, ebx_1, 0, var_24);
                int32_t eax_19;
                eax_19 = esi[ebx_1];
                if (var_20 < eax_19)
                {
                    var_20 = eax_19;
                }
                if (var_1c > eax_19)
                {
                    var_1c = eax_19;
                }
                var_3c_5 = (eax_19 * 0.00100000005f);
                void* var_40_4 = "%0.3f";
                CString::Format(&var_24, "%0.3f");
                int32_t var_3c_6 = 1;
                CListCtrl::SetItemText(edi_2, ebx_1, 1, var_24);
                char* var_38_10;
                if ((*(esi + 0x88) & (1 << ebx_1)) == 0)
                {
                    var_38_10 = &data_435ef0;
                }
                else
                {
                    var_38_10 = &data_4342e0;
                }
                var_3c_7 = 2;
                CListCtrl::SetItemText(edi_2, ebx_1, 2, var_38_10);
                i_1 = (arg2 + 1);
                arg2 = i_1;
            } while (i_1 < esi[0x28]);
        }
        if ((eax_17 <= 0 || (eax_17 > 0 && i_1 < 0x14)))
        {
            uint32_t ebx_3 = arg2;
            edi_2 = (arg1 + 0xc8);
            int32_t var_14_2 = (0x14 - ebx_3);
            bool cond:5_1;
            do
            {
                int32_t var_38_11 = 0x435ef0;
                int32_t var_3c_8 = 0;
                CListCtrl::SetItemText(edi_2, ebx_3, 0, &data_435ef0);
                int32_t var_38_12 = 0x435ef0;
                int32_t var_3c_9 = 1;
                CListCtrl::SetItemText(edi_2, ebx_3, 1, &data_435ef0);
                int32_t var_38_13 = 0x435ef0;
                var_3c_7 = 2;
                CListCtrl::SetItemText(edi_2, ebx_3, 2, &data_435ef0);
                ebx_3 = (ebx_3 + 1);
                cond:5_1 = var_14_2 != 1;
                var_14_2 = (var_14_2 - 1);
            } while (cond:5_1);
        }
        int32_t var_10 = 0;
        var_3c_7 = (var_20 * 0.00100000005f);
        void* var_40_10 = "%0.3f";
        CString::Format((arg1 + 0x118), "%0.3f");
        int32_t var_10_1 = 0;
        var_3c_7 = (var_1c * 0.00100000005f);
        void* var_40_11 = "%0.3f";
        CString::Format((arg1 + 0x11c), "%0.3f");
        int32_t eax_26 = (var_20 - var_1c);
        *(arg1 + 0x110) = eax_26;
        int32_t var_38_14;
        if (eax_26 <= 0x32)
        {
            var_38_14 = 0;
        }
        else
        {
            var_38_14 = 5;
        }
        int32_t var_3c_10 = 0x478;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x478), var_38_14);
        char ecx_26 = esi[0x28];
        if (ecx_26 != 0)
        {
            var_18 = (COMBINE(0, (*(esi + 0x54) * 0xa)) / ecx_26);
        }
        var_3c_10 = (var_18 * 0.00100000005f);
        void* var_40_12 = "%0.3f";
        CString::Format((arg1 + 0x120), "%0.3f");
        arg2 = 0;
        if (*(esi + 0x51) > 0)
        {
            bool cond:12_1;
            do
            {
                uint32_t ebx_6 = arg2;
                int32_t ecx_28;
                ecx_28 = esi[(ebx_6 + 0x20)];
                var_3c_10 = ((ecx_28 - 0xaab) * 0.100000001f);
                void* var_40_13 = "%0.1f";
                CString::Format(&var_24, "%0.1f");
                var_3c_10 = 3;
                CListCtrl::SetItemText(edi_2, ebx_6, 3, var_24);
                cond:12_1 = (arg2 + 1) < *(esi + 0x51);
                arg2 = (arg2 + 1);
            } while (cond:12_1);
        }
        char* var_38_20;
        uint32_t ebx_8;
        if (data_435fd0 == 0)
        {
            int32_t var_38_21 = 0x435ef0;
            ebx_8 = arg2;
            int32_t var_3c_15 = 3;
            CListCtrl::SetItemText(edi_2, (ebx_8 + 1), 3, &data_435ef0);
            int32_t var_38_22 = 0x435ef0;
            int32_t var_3c_16 = 3;
            CListCtrl::SetItemText(edi_2, (ebx_8 + 2), 3, &data_435ef0);
            var_38_20 = &data_435ef0;
        }
        else
        {
            int32_t ecx_32;
            ecx_32 = *(esi + 0xb3);
            int32_t edx_16;
            edx_16 = esi[0x5a];
            int32_t var_38_16 = ecx_32;
            int32_t eax_37;
            eax_37 = *(esi + 0xb5);
            int32_t var_3c_11 = edx_16;
            int32_t var_40_15 = eax_37;
            void* var_44_6 = "20%02hx-%02hx-%02hx";
            CString::Format(&var_24, "20%02hx-%02hx-%02hx");
            ebx_8 = arg2;
            int32_t var_38_17 = 0x4342c4;
            int32_t var_3c_12 = 3;
            CListCtrl::SetItemText(edi_2, (ebx_8 + 1), 3, &data_4342c4);
            int32_t var_3c_13 = 3;
            CListCtrl::SetItemText(edi_2, (ebx_8 + 2), 3, var_24);
            int32_t ecx_36;
            ecx_36 = esi[0x59];
            int32_t edx_18;
            edx_18 = esi[0x58];
            int32_t eax_39;
            eax_39 = *(esi + 0xb1);
            int32_t var_38_19 = edx_18;
            int32_t var_3c_14 = eax_39;
            int32_t var_40_18 = (ecx_36 & 0x3f);
            void* var_44_7 = "%02hx:%02hx:%02hx";
            CString::Format(&var_24, "%02hx:%02hx:%02hx");
            var_38_20 = var_24;
        }
        int32_t var_3c_17 = 3;
        CListCtrl::SetItemText(edi_2, (ebx_8 + 3), 3, var_38_20);
        int32_t var_38_23 = 0x435ef0;
        int32_t var_3c_18 = 3;
        CListCtrl::SetItemText(edi_2, (ebx_8 + 4), 3, &data_435ef0);
        int32_t var_38_24 = 0x435ef0;
        int32_t var_3c_19 = 3;
        CListCtrl::SetItemText(edi_2, (ebx_8 + 5), 3, &data_435ef0);
        int32_t var_38_25 = 0x435ef0;
        int32_t var_3c_20 = 3;
        CListCtrl::SetItemText(edi_2, (ebx_8 + 6), 3, &data_435ef0);
        var_38_26 = &data_435ef0;
        int32_t var_3c_21 = 3;
        var_40_25 = (ebx_8 + 7);
        ecx_46 = edi_2;
    }
    CListCtrl::SetItemText(ecx_46, var_40_25, 3, var_38_26);
    int32_t var_38_48;
    if ((esi[0x46] & 1) == 0)
    {
        int32_t var_38_49 = 5;
        int32_t var_3c_41 = 0x416;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x416), 5);
        var_38_48 = 0;
    }
    else
    {
        int32_t var_38_47 = 0;
        int32_t var_3c_40 = 0x416;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x416), 0);
        var_38_48 = 5;
    }
    int32_t var_3c_42 = 0x417;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x417), var_38_48);
    int32_t var_38_51;
    if ((esi[0x46] & 2) == 0)
    {
        int32_t var_38_52 = 5;
        int32_t var_3c_44 = 0x418;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x418), 5);
        var_38_51 = 0;
    }
    else
    {
        int32_t var_38_50 = 0;
        int32_t var_3c_43 = 0x418;
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x418), 0);
        var_38_51 = 5;
    }
    int32_t var_3c_45 = 0x415;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x415), var_38_51);
    int32_t edi_13 = 0x468;
    int32_t i_3 = 0xc;
    int32_t i_2;
    do
    {
        int32_t ecx_91;
        ecx_91 = esi[0x40];
        int32_t var_38_53;
        if ((ecx_91 & (1 << (edi_13 - 0x68))) == 0)
        {
            var_38_53 = 0;
        }
        else
        {
            var_38_53 = 5;
        }
        CWnd::ShowWindow(CWnd::GetDlgItem(arg1, edi_13), var_38_53);
        edi_13 = (edi_13 + 1);
        i_2 = i_3;
        i_3 = (i_3 - 1);
    } while (i_2 != 1);
    if ((*(esi + 0x81) & 0x10) == 0)
    {
        var_34_1 = 0;
    }
    else
    {
        var_34_1 = 5;
    }
    var_34_1 = 0x474;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x474));
    if ((*(esi + 0x81) & 0x20) == 0)
    {
        var_34_1 = 0;
    }
    else
    {
        var_34_1 = 5;
    }
    var_34_1 = 0x475;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x475));
    if ((*(esi + 0x81) & 0x40) == 0)
    {
        var_34_1 = 0;
    }
    else
    {
        var_34_1 = 5;
    }
    var_34_1 = 0x476;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x476));
    if ((*(esi + 0x81) & 0x80) == 0)
    {
        var_34_1 = 0;
    }
    else
    {
        var_34_1 = 5;
    }
    var_34_1 = 0x477;
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x477));
    var_34_1 = 0;
    int32_t edx_29;
    edx_29 = esi[0x41];
    *(arg1 + 0x138) = edx_29;
    CWnd::UpdateData(arg1);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_75 = CString::~CString(&var_24);
    *fsbase = var_c;
    return eax_75;
}

long __fastcall sub_417ed0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

LRESULT __fastcall sub_417f10(CWnd* arg1)
{
    SendMessageA(*(arg1 + 0xe8), 0x101c, 3, nullptr);
    SendMessageA(*(arg1 + 0xe8), 0x101c, 2, nullptr);
    SendMessageA(*(arg1 + 0xe8), 0x101c, 1, nullptr);
    SendMessageA(*(arg1 + 0xe8), 0x101c, nullptr, nullptr);
    LRESULT eax_2;
    eax_2 = data_435fd4;
    if (eax_2 == 0)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_4342a8, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, &data_43429c, 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, &data_434290, 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, &data_434284, 2, 0x6e, 3);
        CWnd::SetDlgItemTextA(arg1, 0x4c0, &data_434774);
        CWnd::SetDlgItemTextA(arg1, 0x4c1, &data_43476c);
        CWnd::SetDlgItemTextA(arg1, 0x4c2, &data_434760);
        CWnd::SetDlgItemTextA(arg1, 0x4c3, &data_434754);
        CWnd::SetDlgItemTextA(arg1, 0x4c4, &data_434748);
        CWnd::SetDlgItemTextA(arg1, 0x4c5, &data_434740);
        CWnd::SetDlgItemTextA(arg1, 0x4c6, &data_434734);
        CWnd::SetDlgItemTextA(arg1, 0x4c7, &data_434728);
        CWnd::SetDlgItemTextA(arg1, 0x4c8, &data_43471c);
        CWnd::SetDlgItemTextA(arg1, 0x4c9, &data_434710);
        CWnd::SetDlgItemTextA(arg1, 0x4ca, &data_434704);
        CWnd::SetDlgItemTextA(arg1, 0x4cb, &data_4346f8);
        CWnd::SetDlgItemTextA(arg1, 0x4cc, &data_4346ec);
        CWnd::SetDlgItemTextA(arg1, 0x4cd, &data_4346e0);
        CWnd::SetDlgItemTextA(arg1, 0x409, &data_4346d0);
        CWnd::SetDlgItemTextA(arg1, 0x40a, &data_4346c0);
        CWnd::SetDlgItemTextA(arg1, 0x40b, &data_4346b0);
        CWnd::SetDlgItemTextA(arg1, 0x40c, &data_4346a0);
        CWnd::SetDlgItemTextA(arg1, 0x40d, &data_434690);
        CWnd::SetDlgItemTextA(arg1, 0x40e, &data_434680);
        CWnd::SetDlgItemTextA(arg1, 0x40f, &data_434670);
        CWnd::SetDlgItemTextA(arg1, 0x410, &data_434660);
        CWnd::SetDlgItemTextA(arg1, 0x411, &data_434650);
        CWnd::SetDlgItemTextA(arg1, 0x412, &data_434640);
        CWnd::SetDlgItemTextA(arg1, 0x413, &data_434634);
        CWnd::SetDlgItemTextA(arg1, 0x414, &data_434624);
        CWnd::SetDlgItemTextA(arg1, 0x419, &data_434618);
        CWnd::SetDlgItemTextA(arg1, 0x41a, &data_434608);
        eax_2 = CWnd::SetDlgItemTextA(arg1, 0x41b, &data_4345f8);
    }
    if (data_435fd4 == 1)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_432a6c, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, &data_434278, 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, &data_434290, 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, &data_43426c, 2, 0x6e, 3);
        CWnd::SetDlgItemTextA(arg1, 0x4c0, &data_4345f0);
        CWnd::SetDlgItemTextA(arg1, 0x4c1, &data_4345e8);
        CWnd::SetDlgItemTextA(arg1, 0x4c2, &data_4345dc);
        CWnd::SetDlgItemTextA(arg1, 0x4c3, &data_4345d0);
        CWnd::SetDlgItemTextA(arg1, 0x4c4, &data_4345c4);
        CWnd::SetDlgItemTextA(arg1, 0x4c5, &data_4345bc);
        CWnd::SetDlgItemTextA(arg1, 0x4c6, &data_4345b0);
        CWnd::SetDlgItemTextA(arg1, 0x4c7, &data_4345a4);
        CWnd::SetDlgItemTextA(arg1, 0x4c8, &data_434598);
        CWnd::SetDlgItemTextA(arg1, 0x4c9, &data_43458c);
        CWnd::SetDlgItemTextA(arg1, 0x4ca, &data_434580);
        CWnd::SetDlgItemTextA(arg1, 0x4cb, &data_434574);
        CWnd::SetDlgItemTextA(arg1, 0x4cc, &data_434568);
        CWnd::SetDlgItemTextA(arg1, 0x4cd, &data_43455c);
        CWnd::SetDlgItemTextA(arg1, 0x409, &data_43454c);
        CWnd::SetDlgItemTextA(arg1, 0x40a, &data_43453c);
        CWnd::SetDlgItemTextA(arg1, 0x40b, &data_43452c);
        CWnd::SetDlgItemTextA(arg1, 0x40c, &data_43451c);
        CWnd::SetDlgItemTextA(arg1, 0x40d, &data_43450c);
        CWnd::SetDlgItemTextA(arg1, 0x40e, &data_4344fc);
        CWnd::SetDlgItemTextA(arg1, 0x40f, &data_4344ec);
        CWnd::SetDlgItemTextA(arg1, 0x410, &data_4344dc);
        CWnd::SetDlgItemTextA(arg1, 0x411, &data_4344cc);
        CWnd::SetDlgItemTextA(arg1, 0x412, &data_4344bc);
        CWnd::SetDlgItemTextA(arg1, 0x413, &data_4344b0);
        CWnd::SetDlgItemTextA(arg1, 0x414, &data_4344a0);
        CWnd::SetDlgItemTextA(arg1, 0x419, &data_434494);
        CWnd::SetDlgItemTextA(arg1, 0x41a, &data_434484);
        eax_2 = CWnd::SetDlgItemTextA(arg1, 0x41b, &data_434474);
    }
    if (data_435fd4 == 2)
    {
        CListCtrl::InsertColumn((arg1 + 0xc8), 0, &data_434268, 2, 0x28, 0);
        CListCtrl::InsertColumn((arg1 + 0xc8), 1, "Voltage)", 2, 0x78, 1);
        CListCtrl::InsertColumn((arg1 + 0xc8), 2, "Balance", 2, 0x78, 2);
        CListCtrl::InsertColumn((arg1 + 0xc8), 3, "Temp(C)", 2, 0x6e, 3);
        CWnd::SetDlgItemTextA(arg1, 0x4c0, "Voltage:");
        CWnd::SetDlgItemTextA(arg1, 0x4c1, "Current:");
        CWnd::SetDlgItemTextA(arg1, 0x4c2, "Avg Cell:");
        CWnd::SetDlgItemTextA(arg1, 0x4c3, "Max Cell:");
        CWnd::SetDlgItemTextA(arg1, 0x4c4, "Min Cell:");
        CWnd::SetDlgItemTextA(arg1, 0x4c5, "Diff Voltage:");
        CWnd::SetDlgItemTextA(arg1, 0x4c6, "CycleCount:");
        CWnd::SetDlgItemTextA(arg1, 0x4c7, "FCC:");
        CWnd::SetDlgItemTextA(arg1, 0x4c8, "RemainCap:");
        CWnd::SetDlgItemTextA(arg1, 0x4c9, "Version:");
        CWnd::SetDlgItemTextA(arg1, 0x4ca, "Date:");
        CWnd::SetDlgItemTextA(arg1, 0x4cb, "HardwareInfo:");
        CWnd::SetDlgItemTextA(arg1, 0x4cc, "CHG_FET:");
        CWnd::SetDlgItemTextA(arg1, 0x4cd, "DSG_FET:");
        CWnd::SetDlgItemTextA(arg1, 0x409, "CELL OVP:");
        CWnd::SetDlgItemTextA(arg1, 0x40a, "CELL UVP:");
        CWnd::SetDlgItemTextA(arg1, 0x40b, "PACK OVP:");
        CWnd::SetDlgItemTextA(arg1, 0x40c, "PACK UVP:");
        CWnd::SetDlgItemTextA(arg1, 0x40d, "CHG OTP:");
        CWnd::SetDlgItemTextA(arg1, 0x40e, "CHG UTP:");
        CWnd::SetDlgItemTextA(arg1, 0x40f, "DSG OTP:");
        CWnd::SetDlgItemTextA(arg1, 0x410, "DSG UVP:");
        CWnd::SetDlgItemTextA(arg1, 0x411, "CHG OCP:");
        CWnd::SetDlgItemTextA(arg1, 0x412, "DSG OCP:");
        CWnd::SetDlgItemTextA(arg1, 0x413, "SHORT Circuit:");
        CWnd::SetDlgItemTextA(arg1, 0x414, "AFE ERROR:");
        CWnd::SetDlgItemTextA(arg1, 0x419, "SOFT LOCK:");
        CWnd::SetDlgItemTextA(arg1, 0x41a, "CHGOVERTIME:");
        eax_2 = CWnd::SetDlgItemTextA(arg1, 0x41b, "DSGOVERTIME:");
    }
    return eax_2;
}

struct HBRUSH__* __thiscall sub_418660(CDialog* arg1, int32_t* arg2, CWnd* arg3, int32_t arg4)
{
    struct HBRUSH__* eax = CDialog::OnCtlColor(arg1, arg2, arg3, arg4);
    if ((arg4 == 1 && CWnd::GetDlgCtrlID(arg3) == 0x3fe))
    {
        *(*arg2 + 0x38)(0xff);
        *(*arg2 + 0x34)(0xffff);
        CDC::SetBkMode(arg2, arg4);
        if (arg1 != 0xfffffeb4)
        {
            return *(arg1 + 0x150);
        }
        return (arg1 + 0x14c);
    }
    return eax;
}

void* __thiscall sub_4186e0(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_418700(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t __fastcall sub_418700(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429148;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

CListCtrl* __thiscall sub_418750(CListCtrl* arg1, char arg2)
{
    CListCtrl::~CListCtrl(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

void*** __thiscall sub_418770(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429168;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0xa4, arg2);
    int32_t var_4 = 0;
    CWnd::CWnd(&esi[0x18]);
    int32_t ecx_1 = var_c;
    esi[0x18] = 0x42ab00;
    *esi = &data_42bb40;
    *fsbase = ecx_1;
    return esi;
}

CDialog* __thiscall sub_4187d0(CDialog* arg1, char arg2)
{
    sub_4187f0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_4187f0(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429188;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 0;
    CComboBox::~CComboBox((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_418840(void* arg1, class CDataExchange* arg2)
{
    return DDX_Control(arg2, 0x54b, (arg1 + 0x60));
}

int32_t sub_418860() __pure
{
    return CDialog::messageMap;
}

int32_t sub_418870() __pure
{
    return 0x42bb20;
}

int32_t __fastcall sub_418880(CDialog* arg1)
{
    CDialog::OnInitDialog(arg1);
    int32_t var_c;
    int32_t var_8;
    EnumPrintersA(6, 0, 4, 0, 0, &var_c, &var_8);
    void* edi = operator new((var_c * 0xc));
    void* var_4 = edi;
    EnumPrintersA(6, 0, 4, edi, var_c, &var_c, &var_8);
    int32_t esi = 0;
    if (var_8 > 0)
    {
        do
        {
            SendMessageA(*(arg1 + 0x80), 0x143, nullptr, *edi);
            esi = (esi + 1);
            edi = (edi + 0xc);
        } while (esi < var_8);
        edi = var_4;
    }
    operator delete(edi);
    return 1;
}

int32_t __fastcall sub_418930(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429203;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_120 = 0;
    int32_t ebp;
    int32_t var_124 = ebp;
    int32_t esi;
    int32_t var_128 = esi;
    int32_t edi;
    int32_t var_12c = edi;
    int32_t hdc_3 = arg1;
    int32_t hdc_2 = 1;
    int32_t hdc_4 = hdc_3;
    CWnd::UpdateData(arg1, hdc_2);
    hdc_2 = &data_4347b0;
    void var_11c;
    CString::CString(&var_11c, hdc_2);
    int32_t var_4 = 0;
    class CDC var_118;
    CString::CString(&var_118);
    hdc_2 = &data_431f34;
    var_4 = 1;
    CString::operator+=(&var_11c, hdc_2);
    hdc_2 = &var_118;
    int32_t var_134 = 0x54b;
    CWnd::GetWindowTextA(CWnd::GetDlgItem(hdc_3, 0x54b), hdc_2);
    hdc_2 = hdc_3;
    int32_t var_134_1 = 0x140008;
    int32_t var_138 = 0;
    void var_b4;
    CPrintDialog::CPrintDialog(&var_b4, 0, 0x140008, hdc_2);
    void* var_100;
    hdc_2 = &var_100;
    int32_t var_138_1 = 0;
    var_4 = 2;
    var_100 = nullptr;
    void* var_104 = nullptr;
    if (sub_418d00(CString::GetBuffer(&var_118, 0), &var_104, hdc_2) == 0)
    {
        hdc_2 = 0;
        int32_t var_134_4 = 0;
        void* var_138_4 = "Failed to select custom printer";
        AfxMessageBox("Failed to select custom printer", 0, hdc_2);
    }
    else
    {
        class AFX_MODULE_STATE* eax_4 = AfxGetModuleState();
        void* ecx_8 = var_100;
        CWinApp* eax_5 = *(eax_4 + 4);
        void* edx_1 = var_104;
        hdc_2 = 1;
        CWinApp::SelectPrinter(eax_5, edx_1, ecx_8, hdc_2);
    }
    hdc_2 = 0xffffffff;
    CString::ReleaseBuffer(&var_118, hdc_2);
    void* var_54;
    *(var_54 + 8) = var_100;
    *(var_54 + 0xc) = var_104;
    CDC var_114;
    CDC::CDC(&var_114);
    var_4 = 3;
    hdc_2 = CPrintDialog::CreatePrinterDC(&var_b4);
    CDC::Attach(&var_114, hdc_2);
    int32_t var_c8;
    hdc_2 = &var_c8;
    var_c8 = 0x14;
    int32_t var_c4 = 0x434780;
    int32_t var_bc = 0;
    int32_t var_c0 = 0;
    int32_t var_b8 = 0;
    int32_t hdc;
    StartDocA(hdc, hdc_2);
    hdc_2 = hdc;
    StartPage(hdc_2);
    hdc_2 = 1;
    CDC::SetMapMode(&var_114, hdc_2);
    hdc_2 = 0x5a;
    HDC hdc_1;
    int32_t eax_10 = GetDeviceCaps(hdc_1, hdc_2);
    hdc_2 = 0x58;
    int32_t var_d0 = GetDeviceCaps(hdc_1, hdc_2);
    hdc_2 = 2;
    int32_t lppt = 0;
    int32_t var_d4 = 0;
    int32_t var_cc = eax_10;
    DPtoLP(hdc_1, &lppt, hdc_2);
    hdc_2 = 0;
    int32_t var_134_9 = 0;
    void var_e0;
    CDC::SetWindowOrg(&var_114, &var_e0, 0);
    int32_t var_f8 = 0;
    int32_t var_fc = 0x42b3c8;
    int32_t var_138_7 = 0x434244;
    int32_t var_13c = 0x78;
    var_8 = 4;
    CFont::CreatePointFont(&var_fc, 0x78, &data_434244, &var_118);
    int32_t var_134_12 = 0;
    class CFont* var_e4 = CDC::SelectObject(&var_118, &var_fc);
    CDC::SetTextAlign(&var_118, 0);
    CString::CString(&var_100);
    int32_t var_138_8 = 2;
    void* var_13c_1 = &data_43477c;
    var_8 = 5;
    int32_t edi_2 = 0x32;
    void psizl;
    GetTextExtentPoint32A(hdc, &data_43477c, 2, &psizl);
    void* var_134_14 = &data_431f34;
    int32_t* esp_1 = &hdc_2;
    int32_t i = CString::Find(&var_120, &data_431f34);
    if (i > 0xffffffff)
    {
        do
        {
            *(esp_1 - 4) = i;
            *(esp_1 - 8) = &esp_1[0x12];
            *(esp_1 - 8) = CString::Left(&esp_1[4]);
            esp_1[0x49] = 6;
            CString::operator=(&esp_1[0xb]);
            esp_1[0x49] = 5;
            CString::~CString(&esp_1[0x11]);
            *(esp_1 - 8) = (i + 2);
            *(esp_1 - 0xc) = &esp_1[0xe];
            *(esp_1 - 0xc) = CString::Mid(&esp_1[3]);
            esp_1[0x48] = 7;
            CString::operator=(&esp_1[2]);
            esp_1[0x48] = 5;
            CString::~CString(&esp_1[0xd]);
            void* eax_17 = esp_1[0xa];
            *(esp_1 - 0xc) = *(eax_17 - 8);
            *(esp_1 - 0x10) = eax_17;
            int32_t eax_18 = esp_1[4];
            *(esp_1 - 0x14) = edi_2;
            *(esp_1 - 0x18) = 0x32;
            *(eax_18 + 0x64)();
            *esp_1 = &data_431f34;
            void* esp_17 = esp_1;
            int32_t var_f0;
            edi_2 = (edi_2 + var_f0);
            esp_1 = (esp_17 + 4);
            i = CString::Find((esp_17 + 0x14));
        } while (i > 0xffffffff);
        hdc_3 = esp_1[0x11];
    }
    *(esp_1 - 4) = esp_1[0x13];
    CDC::SelectObject(&esp_1[6]);
    CGdiObject::DeleteObject(&esp_1[0xd]);
    *(esp_1 - 4) = esp_1[7];
    EndPage();
    *(esp_1 - 4) = esp_1[7];
    EndDoc();
    *(esp_1 - 4) = CDC::Detach(&esp_1[6]);
    DeleteDC();
    CDialog::OnOK(hdc_3);
    esp_1[0x4a] = 4;
    CString::~CString(&esp_1[0xc]);
    esp_1[0xd] = 0x42a6d0;
    esp_1[0x4a] = 8;
    CGdiObject::DeleteObject(&esp_1[0xd]);
    esp_1[0xd] = 0x42a6e4;
    esp_1[0x4a] = 2;
    CDC::~CDC(&esp_1[6]);
    esp_1[0x4a] = 1;
    CDialog::~CDialog(&esp_1[0x1e]);
    esp_1[0x4a] = 0;
    CString::~CString(&esp_1[5]);
    esp_1[0x4a] = 0xffffffff;
    int32_t eax_22 = CString::~CString(&esp_1[4]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    esp_1[3];
    *fsbase = esp_1[0x48];
    return eax_22;
}

void __thiscall sub_418cf0(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

int32_t __stdcall sub_418d00(int32_t arg1, int32_t** arg2, int32_t** arg3)
{
    if (((arg3 != 0 && arg2 != 0) && OpenPrinterA(arg1, &arg1, 0) != 0))
    {
        uint32_t* dwBytes;
        GetPrinterA(arg1, 2, 0, 0, &dwBytes);
        int32_t* hMem = GlobalAlloc(GMEM_ZEROINIT, dwBytes);
        void var_4;
        if (GetPrinterA(arg1, 2, hMem, dwBytes, &var_4) != 0)
        {
            ClosePrinter(arg1);
            void* edx_2;
            edx_2 = *(hMem[7] + 0x26);
            int32_t* hMem_1 = GlobalAlloc(GHND, (edx_2 + 0x94));
            void* eax_7 = GlobalLock(hMem_1);
            void* esi = hMem[7];
            int32_t ecx_5;
            ecx_5 = *(esi + 0x26);
            __builtin_memcpy(eax_7, esi, (((ecx_5 + 0x94) >> 2) << 2));
            int32_t esi_1;
            int32_t edi_1;
            __builtin_memcpy(edi_1, esi_1, ((ecx_5 + 0x94) & 3));
            GlobalUnlock(hMem_1);
            int32_t eax_9 = lstrlenA(hMem[4]);
            int32_t eax_10 = lstrlenA(hMem[1]);
            int32_t eax_13 = (lstrlenA(hMem[3]) + 1);
            int32_t* hMem_2 = GlobalAlloc(GHND, (((eax_13 + (eax_10 + 1)) + (eax_9 + 1)) + 8));
            void* eax_15 = GlobalLock(hMem_2);
            *eax_15 = 8;
            __builtin_memcpy((eax_15 + 8), hMem[4], (((eax_9 + 1) >> 2) << 2));
            int32_t esi_5;
            int32_t edi_3;
            __builtin_memcpy(edi_3, esi_5, ((eax_9 + 1) & 3));
            *(eax_15 + 2) = (eax_9 + 9);
            __builtin_memcpy((eax_15 + (eax_9 + 9)), hMem[1], (((eax_10 + 1) >> 2) << 2));
            int32_t esi_7;
            int32_t edi_5;
            __builtin_memcpy(edi_5, esi_7, ((eax_10 + 1) & 3));
            int32_t ebp_4 = ((eax_9 + 9) + (eax_10 + 1));
            *(eax_15 + 4) = ebp_4;
            __builtin_memcpy((eax_15 + ebp_4), hMem[3], ((eax_13 >> 2) << 2));
            int32_t esi_9;
            int32_t edi_7;
            __builtin_memcpy(edi_7, esi_9, (eax_13 & 3));
            *(eax_15 + 6) = 0;
            GlobalUnlock(hMem_2);
            GlobalFree(hMem);
            *arg3 = hMem_1;
            *arg2 = hMem_2;
            return 1;
        }
        GlobalFree(hMem);
        ClosePrinter(arg1);
    }
    return 0;
}

void*** __thiscall sub_418eb0(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429288;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x85, arg2);
    int32_t var_4 = 0;
    CWnd::CWnd(&esi[0xc3d6]);
    esi[0xc3d6] = 0x42ab00;
    var_4 = 1;
    CWnd::CWnd(&esi[0xc3e6]);
    esi[0xc3e6] = 0x42ab00;
    var_4 = 2;
    CString::CString(&esi[0xc3fc]);
    var_4 = 3;
    CString::CString(&esi[0xc3fd]);
    var_4 = 4;
    CString::CString(&esi[0xc3ff]);
    var_4 = 5;
    CString::CString(&esi[0xc400]);
    var_4 = 6;
    CString::CString(&esi[0xc406]);
    var_4 = 7;
    CString::CString(&esi[0xc407]);
    var_4 = 8;
    *esi = &data_42bf80;
    esi[0xc3f6] = 0;
    esi[0xc3f7] = 0;
    esi[0xc3f8] = 0;
    esi[0xc3f9] = 3;
    esi[0xc3fa] = 0;
    esi[0xc3fb] = 3;
    CString::operator=(&esi[0xc3fc], &data_435ef0);
    CString::operator=(&esi[0xc3fd], &data_435ef0);
    esi[0xc3fe] = 1;
    CString::operator=(&esi[0xc3ff], &data_435ef0);
    CString::operator=(&esi[0xc400], &data_435ef0);
    esi[0xc401] = 0xf;
    esi[0xc402] = 0;
    esi[0xc403] = 0;
    esi[0xc404] = 0;
    esi[0xc405] = 0;
    CString::operator=(&esi[0xc406], &data_435ef0);
    CString::operator=(&esi[0xc407], &data_435ef0);
    int32_t ecx_14 = var_c;
    __builtin_memset(&esi[0xc408], 0, 0x14);
    *fsbase = ecx_14;
    return esi;
}

CDialog* __thiscall sub_419070(CDialog* arg1, char arg2)
{
    sub_419090(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_419090(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_42930a;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 7;
    CString::~CString((arg1 + 0x3101c));
    var_4 = 6;
    CString::~CString((arg1 + 0x31018));
    var_4 = 5;
    CString::~CString((arg1 + 0x31000));
    var_4 = 4;
    CString::~CString((arg1 + 0x30ffc));
    var_4 = 3;
    CString::~CString((arg1 + 0x30ff4));
    var_4 = 2;
    CString::~CString((arg1 + 0x30ff0));
    var_4 = 1;
    CComboBox::~CComboBox((arg1 + 0x30f98));
    var_4 = 0;
    CComboBox::~CComboBox((arg1 + 0x30f58));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_419150(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x537, (arg1 + 0x30f58));
    DDX_Control(arg2, 0x536, (arg1 + 0x30f98));
    DDX_Text(arg2, 0x400, (arg1 + 0x30fd8));
    DDX_Check(arg2, 0x480, (arg1 + 0x30fdc));
    DDX_Check(arg2, 0x481, (arg1 + 0x30fe0));
    DDX_Text(arg2, 0x49c, (arg1 + 0x30fe4));
    DDX_Text(arg2, 0x49e, (arg1 + 0x30fe8));
    DDX_Text(arg2, 0x49d, (arg1 + 0x30fec));
    DDX_Text(arg2, 0x4a1, (arg1 + 0x30ff0));
    DDX_Text(arg2, 0x4a0, (arg1 + 0x30ff4));
    DDX_Text(arg2, 0x49f, (arg1 + 0x30ff8));
    DDX_Text(arg2, 0x53d, (arg1 + 0x30ffc));
    DDX_Text(arg2, 0x53e, (arg1 + 0x31000));
    DDX_Text(arg2, 0x551, (arg1 + 0x31004));
    DDX_Text(arg2, 0x52f, (arg1 + 0x31008));
    DDX_Text(arg2, 0x530, (arg1 + 0x3100c));
    DDX_Text(arg2, 0x531, (arg1 + 0x31010));
    DDX_Check(arg2, 0x554, (arg1 + 0x31014));
    DDX_Text(arg2, 0x53f, (arg1 + 0x31018));
    DDX_Text(arg2, 0x540, (arg1 + 0x3101c));
    DDX_Text(arg2, 0x565, (arg1 + 0x31020));
    DDX_Text(arg2, 0x566, (arg1 + 0x31024));
    DDX_Text(arg2, 0x567, (arg1 + 0x31028));
    DDX_Text(arg2, 0x401, (arg1 + 0x3102c));
    return DDX_Check(arg2, 0x555, (arg1 + 0x31030));
}

int32_t sub_419320() __pure
{
    return CDialog::messageMap;
}

int32_t sub_419330() __pure
{
    return 0x42bc18;
}

int32_t __fastcall sub_419340(CDialog* arg1)
{
    CDialog::OnInitDialog(arg1);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x536), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x537), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x538), 0);
    CWnd::ShowWindow(CWnd::GetDlgItem(arg1, 0x539), 0);
    *(arg1 + 0x30f54) = 0;
    return 1;
}

long __fastcall sub_4193b0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __stdcall sub_4193f0(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

int32_t __fastcall sub_419420(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax;
    if (*(arg1 + 0x30fd8) <= 0x9fff6)
    {
        *(arg1 + 0x60) = GetTickCount();
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x68) = 0;
        eax = SetTimer(hWnd, 1, 0x14, nullptr);
    }
    else
    {
        eax = data_435fd4;
        if (eax == 0)
        {
            eax = CWnd::MessageBoxA(arg1, &data_434814, "Error", 0x10);
        }
        if (data_435fd4 == 1)
        {
            eax = CWnd::MessageBoxA(arg1, &data_4347f4, "Error", 0x10);
        }
        if (data_435fd4 == 2)
        {
            return CWnd::MessageBoxA(arg1, "The remaining capacity value exc…", "Error", 0x10);
        }
    }
    return eax;
}

uint32_t* __fastcall sub_4194b0(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 1;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

uint32_t* __fastcall sub_4194e0(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 2;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

uint32_t* __fastcall sub_419510(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 3;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

uint32_t* __fastcall sub_419540(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 5;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

uint32_t* __fastcall sub_419570(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 4;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

int32_t __thiscall sub_4195a0(CWnd* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429336;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_f8;
    CString::CString(&var_f8);
    int32_t var_4 = 0;
    int32_t var_e0 = 1;
    char var_f0 = 0;
    class CString var_ec;
    CString::CString(&var_ec);
    var_4 = 1;
    char* var_114_2;
    void* var_110_3;
    HWND hWnd;
    uint32_t var_10c_6;
    uint32_t* uIDEvent;
    char* var_10c_54;
    int32_t var_e8;
    char var_d4;
    uint8_t var_d3;
    char var_d2;
    uint8_t var_cf;
    switch (arg2)
    {
        case 1:
        {
            if (sub_404a90() == 0)
            {
                if ((GetTickCount() - *(arg1 + 0x60)) > 0x1388)
                {
                    KillTimer(*(arg1 + 0x20), 1);
                    if (data_435fd4 == 0)
                    {
                        CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
                    }
                    if (data_435fd4 == 1)
                    {
                        CWnd::MessageBoxA(arg1, &data_4312a0, "Error", 0x10);
                    }
                    if (data_435fd4 == 2)
                    {
                        var_10c_6 = 0x10;
                        var_110_3 = "Error";
                        var_114_2 = "The serial port is already occup…";
                        goto label_41b644;
                    }
                }
            }
            else
            {
                sub_404a70();
                KillTimer(*(arg1 + 0x20), 1);
                HANDLE eax_4;
                int32_t edi_1;
                eax_4 = sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0);
                if (eax_4 != 0)
                {
                    int32_t eax_5 = data_4360f8;
                    char var_10c_1;
                    if (eax_5 == 0)
                    {
                        var_10c_1 = 0x4e;
                    }
                    if (eax_5 == 1)
                    {
                        var_10c_1 = 0x4f;
                    }
                    if (eax_5 == 2)
                    {
                        var_10c_1 = 0x45;
                    }
                    if (((eax_5 == 0 || eax_5 == 1) || eax_5 == 2))
                    {
                        sub_416890(&data_4360b0, var_10c_1);
                    }
                    sub_41edb0(arg1, &data_4360b0, 0, 0x5678);
                    int32_t eax_6 = *(arg1 + 0x68);
                    if (eax_6 > 6)
                    {
                        goto label_419b07;
                    }
                    bool cond:1_1;
                    if (eax_6 == 2)
                    {
                        cond:1_1 = sub_41edb0(arg1, &data_4360b0, 0xe2, 1) != 0;
                        int32_t eax_10;
                        eax_10 = data_435fd4;
                        if (cond:1_1)
                        {
                            if (eax_10 == 0)
                            {
                                CString::operator=(&var_f8, &data_434f38);
                            }
                        }
                        else if (eax_10 == 0)
                        {
                            CString::operator=(&var_f8, &data_434f48);
                        }
                    }
                    int32_t eax_11;
                    bool cond:2_1;
                    if (eax_6 == 3)
                    {
                        cond:2_1 = sub_41edb0(arg1, &data_4360b0, 0xe2, 2) != 0;
                        eax_11 = data_435fd4;
                        if ((cond:2_1 && eax_11 == 0))
                        {
                            CString::operator=(&var_f8, &data_434f38);
                        }
                    }
                    if ((((eax_6 == 2 && cond:1_1) && data_435fd4 == 1) || ((eax_6 == 3 && cond:2_1) && data_435fd4 == 1)))
                    {
                        CString::operator=(&var_f8, &data_434f28);
                    }
                    if (((((((eax_6 == 2 && cond:1_1) && data_435fd4 == 1) || ((eax_6 == 3 && cond:2_1) && data_435fd4 == 1)) || ((eax_6 == 2 && cond:1_1) && data_435fd4 != 1)) || ((eax_6 == 3 && cond:2_1) && data_435fd4 != 1)) && data_435fd4 == 2))
                    {
                        CString::operator=(&var_f8, "Open balanced success");
                    }
                    if (((eax_6 == 3 && (!cond:2_1)) && eax_11 == 0))
                    {
                        CString::operator=(&var_f8, &data_434f48);
                    }
                    if ((((eax_6 == 2 && (!cond:1_1)) && data_435fd4 == 1) || ((eax_6 == 3 && (!cond:2_1)) && data_435fd4 == 1)))
                    {
                        CString::operator=(&var_f8, &data_434f00);
                    }
                    if (((((((eax_6 == 2 && (!cond:1_1)) && data_435fd4 == 1) || ((eax_6 == 3 && (!cond:2_1)) && data_435fd4 == 1)) || ((eax_6 == 2 && (!cond:1_1)) && data_435fd4 != 1)) || ((eax_6 == 3 && (!cond:2_1)) && data_435fd4 != 1)) && data_435fd4 == 2))
                    {
                        CString::operator=(&var_f8, "Open balance failure");
                    }
                    int32_t eax_9;
                    int32_t eax_19;
                    bool cond:6_1;
                    bool cond:8_1;
                    switch (eax_6)
                    {
                        case 1:
                        {
                            if (*(arg1 + 0x30fdc) != 0)
                            {
                                edi_1 = 1;
                            }
                            if (*(arg1 + 0x30fe0) != 0)
                            {
                                edi_1 = (edi_1 | 2);
                            }
                            cond:6_1 = sub_41edb0(arg1, &data_4360b0, 0xe1, edi_1) != 0;
                            eax_9 = data_435fd4;
                            break;
                        }
                        case 4:
                        {
                            bool cond:3_1 = sub_41edb0(arg1, &data_4360b0, 0xe2, 3) != 0;
                            int32_t eax_12;
                            eax_12 = data_435fd4;
                            if (cond:3_1)
                            {
                                if (eax_12 == 0)
                                {
                                    CString::operator=(&var_f8, &data_434e9c);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_f8, &data_434e8c);
                                }
                                if (data_435fd4 == 2)
                                {
                                    CString::operator=(&var_f8, "Shutdown balance success");
                                }
                            }
                            else
                            {
                                if (eax_12 == 0)
                                {
                                    CString::operator=(&var_f8, &data_434ed8);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_f8, &data_434ec8);
                                }
                                if (data_435fd4 == 2)
                                {
                                    CString::operator=(&var_f8, "Shutdown balance failure");
                                }
                            }
                            break;
                        }
                        case 5:
                        {
                            bool cond:4_1 = sub_41edb0(arg1, &data_4360b0, 1, 0) != 0;
                            int32_t eax_13;
                            eax_13 = data_435fd4;
                            if (cond:4_1)
                            {
                                if (eax_13 == 0)
                                {
                                    CString::operator=(&var_f8, &data_434e40);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_f8, &data_434e40);
                                }
                                if (data_435fd4 == 2)
                                {
                                    CString::operator=(&var_f8, "Exit success");
                                }
                            }
                            else
                            {
                                if (eax_13 == 0)
                                {
                                    CString::operator=(&var_f8, &data_434e64);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_f8, &data_434e58);
                                }
                                if (data_435fd4 == 2)
                                {
                                    CString::operator=(&var_f8, "Exit failed");
                                }
                            }
                            break;
                        }
                        case 6:
                        {
                            int32_t eax_14 = *(arg1 + 0x30fdc);
                            int32_t ecx_31 = *(arg1 + 0x30fe0);
                            int16_t eax_15;
                            if ((eax_14 == 0 && ecx_31 != 0))
                            {
                                eax_15 = 1;
                            }
                            if ((eax_14 != 0 && ecx_31 != 0))
                            {
                                eax_15 = 0xa01;
                            }
                            if (((eax_14 == 0 && ecx_31 == 0) || (eax_14 != 0 && ecx_31 == 0)))
                            {
                                int32_t eax_16 = (-eax_14);
                                eax_15 = (((eax_16 - eax_16) & 0xf701) + 0xa00);
                            }
                            cond:8_1 = sub_41edb0(arg1, &data_4360b0, 0xfb, eax_15) != 0;
                            eax_19 = data_435fd4;
                            break;
                        }
                    }
                    if (eax_6 == 6)
                    {
                        if (cond:8_1)
                        {
                            if (eax_19 == 0)
                            {
                                CString::operator=(&var_f8, &data_434f58);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_f8, &data_434f58);
                            }
                            if (data_435fd4 != 2)
                            {
                                goto label_419b07;
                            }
                        }
                        else if (eax_19 == 0)
                        {
                            CString::operator=(&var_f8, &data_434fb0);
                        }
                    }
                    if (((eax_6 == 1 && (!cond:6_1)) && eax_9 == 0))
                    {
                        CString::operator=(&var_f8, &data_434fb0);
                    }
                    if ((((eax_6 == 6 && (!cond:8_1)) && data_435fd4 == 1) || ((eax_6 == 1 && (!cond:6_1)) && data_435fd4 == 1)))
                    {
                        CString::operator=(&var_f8, &data_434f98);
                    }
                    void* var_10c_3;
                    if ((((((eax_6 == 6 && (!cond:8_1)) && data_435fd4 == 1) || ((eax_6 == 1 && (!cond:6_1)) && data_435fd4 == 1)) || ((eax_6 == 6 && (!cond:8_1)) && data_435fd4 != 1)) || ((eax_6 == 1 && (!cond:6_1)) && data_435fd4 != 1)))
                    {
                        if (data_435fd4 != 2)
                        {
                            goto label_419b07;
                        }
                        var_10c_3 = "Failed to control the MOSFET. Pl…";
                        goto label_419afa;
                    }
                    if ((eax_6 == 1 && cond:6_1))
                    {
                        if (eax_9 == 0)
                        {
                            CString::operator=(&var_f8, &data_434f58);
                        }
                        if (data_435fd4 == 1)
                        {
                            CString::operator=(&var_f8, &data_434f58);
                        }
                        if (data_435fd4 != 2)
                        {
                            goto label_419b07;
                        }
                    }
                    if (((eax_6 == 6 && cond:8_1) || (eax_6 == 1 && cond:6_1)))
                    {
                        var_10c_3 = "Control the success of the MOSFE…";
                        goto label_419afa;
                    }
                    if (eax_6 == 0)
                    {
                        int32_t eax_7;
                        int32_t edx_3;
                        edx_3 = HIGHD((0xcccccccd * *(arg1 + 0x30fd8)));
                        eax_7 = LOWD((0xcccccccd * *(arg1 + 0x30fd8)));
                        bool cond:0_1 = sub_41edb0(arg1, &data_4360b0, 0xe0, (edx_3 >> 3)) != 0;
                        int32_t eax_8;
                        eax_8 = data_435fd4;
                        if ((!cond:0_1))
                        {
                            if (eax_8 == 0)
                            {
                                CString::operator=(&var_f8, &data_43502c);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_f8, &data_43501c);
                            }
                            if (data_435fd4 != 2)
                            {
                                goto label_419b07;
                            }
                            var_10c_3 = "Edit capacity error!";
                            goto label_419afa;
                        }
                        if (eax_8 == 0)
                        {
                            CString::operator=(&var_f8, &data_434ff4);
                        }
                        if (data_435fd4 == 1)
                        {
                            CString::operator=(&var_f8, &data_434fe4);
                        }
                        if (data_435fd4 != 2)
                        {
                            goto label_419b07;
                        }
                        var_10c_3 = "Edit capacity successfully";
                    label_419afa:
                        CString::operator=(&var_f8, var_10c_3);
                    label_419b07:
                        sub_41edb0(arg1, &data_4360b0, 1, 0);
                    }
                    goto label_41b3de;
                }
                var_10c_6 = 0x10;
                var_110_3 = "Error";
                var_114_2 = &data_434df4;
            label_41b644:
                CWnd::MessageBoxA(arg1, var_114_2, var_110_3, var_10c_6);
            }
            break;
        }
        case 2:
        {
            if (sub_404a90() == 0)
            {
                if ((GetTickCount() - *(arg1 + 0x60)) > 0x7d0)
                {
                    uIDEvent = 2;
                    hWnd = *(arg1 + 0x20);
                label_41b630:
                    KillTimer(hWnd, uIDEvent);
                    var_10c_6 = 0x10;
                    var_110_3 = "Error";
                    var_114_2 = &data_4312e8;
                    goto label_41b644;
                }
            }
            else
            {
                KillTimer(*(arg1 + 0x20), 2);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                label_41b538:
                    CWnd::MessageBoxA(arg1, &data_434df4, "Error", 0x10);
                    sub_404a80();
                }
                else
                {
                    int32_t eax_26 = data_4360f8;
                    char var_10c_7;
                    if (eax_26 == 0)
                    {
                        var_10c_7 = 0x4e;
                    }
                    if (eax_26 == 1)
                    {
                        var_10c_7 = 0x4f;
                    }
                    if (eax_26 == 2)
                    {
                        var_10c_7 = 0x45;
                    }
                    if (((eax_26 == 0 || eax_26 == 1) || eax_26 == 2))
                    {
                        sub_416890(&data_4360b0, var_10c_7);
                    }
                    int32_t eax_27 = sub_416940(&data_4360b0, (arg1 + 0x6c), 8);
                    char* var_10c_16;
                    uint32_t j_2;
                    int32_t edi_6;
                    if (eax_27 == 0)
                    {
                        var_10c_16 = &data_434ce4;
                    }
                    else
                    {
                        *(arg1 + 0x60) = GetTickCount();
                        int32_t i;
                        do
                        {
                            uint32_t edi_3 = var_f0;
                            char j_4;
                            j_4 = sub_4169c0(&data_4360b0, &var_d4, (4 - edi_3));
                            if (j_4 > 0)
                            {
                                char* edx_7 = &var_d4;
                                void* edi_4 = ((edi_3 + arg1) + 0x80);
                                j_2 = j_4;
                                uint32_t j;
                                do
                                {
                                    char ebx = *edx_7;
                                    edx_7 = &edx_7[1];
                                    *edi_4 = ebx;
                                    edi_4 = (edi_4 + 1);
                                    j = j_2;
                                    j_2 = (j_2 - 1);
                                } while (j != 1);
                            }
                            j_2 = var_f0;
                            j_2 = (j_2 + j_4);
                            var_f0 = j_2;
                            if (j_2 == 4)
                            {
                                break;
                            }
                            i = (GetTickCount() - *(arg1 + 0x60));
                        } while (i < 0x64);
                        if (j_2 == 4)
                        {
                            void* edi_5 = (arg1 + 0x80);
                            if (*(arg1 + 0x80) != 0x83)
                            {
                                int32_t var_dc_1 = 0;
                                *(arg1 + 0x60) = GetTickCount();
                                uint32_t eax_32;
                                eax_32 = *(arg1 + 0x82);
                                char var_f0_1 = 0;
                                char var_e4_1 = 0xc8;
                                if (eax_32 <= 0xc8)
                                {
                                    var_e4_1 = eax_32;
                                }
                                uint32_t edi_7 = 0;
                                uint32_t ebx_3 = var_e4_1;
                                uint32_t var_d8_1 = ebx_3;
                                int32_t i_1;
                                do
                                {
                                    char j_5;
                                    char* edx_12;
                                    j_5 = sub_4169c0(&data_4360b0, &var_d4, ((ebx_3 - edi_7) + 1));
                                    if (j_5 > 0)
                                    {
                                        edx_12 = &var_d4;
                                        void* edi_8 = ((edi_7 + arg1) + 0x84);
                                        uint32_t j_3 = j_5;
                                        uint32_t j_1;
                                        do
                                        {
                                            ebx_3 = *edx_12;
                                            edx_12 = &edx_12[1];
                                            *edi_8 = ebx_3;
                                            edi_8 = (edi_8 + 1);
                                            j_1 = j_3;
                                            j_3 = (j_3 - 1);
                                        } while (j_1 != 1);
                                        ebx_3 = var_d8_1;
                                    }
                                    edx_12 = var_f0_1;
                                    edx_12 = (edx_12 + j_5);
                                    var_f0_1 = edx_12;
                                    edi_7 = var_f0_1;
                                    if (edi_7 == (ebx_3 + 1))
                                    {
                                        var_dc_1 = 1;
                                        break;
                                    }
                                    i_1 = (GetTickCount() - *(arg1 + 0x60));
                                } while (i_1 < 0x64);
                                CString::operator=((arg1 + 0x30ff0), &data_435ef0);
                                char i_11 = 0;
                                if ((var_f0_1 + 4) > 0)
                                {
                                    uint32_t i_2 = 0;
                                    do
                                    {
                                        int32_t edx_13;
                                        edx_13 = *((i_2 + arg1) + 0x80);
                                        int32_t var_10c_12 = edx_13;
                                        CString::Format(&var_ec, "%02X  ");
                                        CString::operator+=((arg1 + 0x30ff0), &var_ec);
                                        i_11 = (i_11 + 1);
                                        i_2 = i_11;
                                    } while (i_2 < (var_f0_1 + 4));
                                }
                                char* var_10c_15;
                                int16_t eax_37;
                                int32_t edi_12;
                                int32_t eax_35;
                                if (var_dc_1 != 0)
                                {
                                    eax_35 = var_e4_1;
                                    eax_35 = (eax_35 + 3);
                                    eax_37 = sub_41b7f0((arg1 + 0x80), eax_35);
                                    int32_t edx_14;
                                    *edx_14[1] = *((ebx_3 + arg1) + 0x84);
                                    var_e8 = edx_14;
                                    int32_t ecx_53;
                                    ecx_53 = *((ebx_3 + arg1) + 0x83);
                                    edi_12 = (edx_14 + ecx_53);
                                    var_e8 = edi_12;
                                    if (eax_37 != edi_12)
                                    {
                                        uint32_t eax_38;
                                        eax_38 = data_435fd4;
                                        if (eax_38 == 0)
                                        {
                                            CString::operator=(&var_f8, &data_434da4);
                                        }
                                        if (data_435fd4 == 1)
                                        {
                                            CString::operator=(&var_f8, &data_434d90);
                                        }
                                        if (data_435fd4 != 2)
                                        {
                                            goto label_419f0e;
                                        }
                                        var_10c_15 = "CrC checksum error, please confi…";
                                    }
                                }
                                else
                                {
                                    eax_35 = data_435fd4;
                                    if (eax_35 == 0)
                                    {
                                        CString::operator=(&var_f8, &data_434d54);
                                    }
                                    if (data_435fd4 == 1)
                                    {
                                        CString::operator=(&var_f8, &data_434d3c);
                                    }
                                    if (data_435fd4 != 2)
                                    {
                                        goto label_419f0e;
                                    }
                                    var_10c_15 = "Failed to read data. Please try …";
                                }
                                if ((var_dc_1 == 0 || (var_dc_1 != 0 && eax_37 != edi_12)))
                                {
                                    CString::operator=(&var_f8, var_10c_15);
                                label_419f0e:
                                    var_e0 = 0;
                                }
                                CWnd::UpdateData(arg1, 0);
                                edi_6 = var_e0;
                            }
                            else
                            {
                                CString::operator=((arg1 + 0x30ff0), &data_435ef0);
                                int32_t i_12 = 4;
                                int32_t i_3;
                                do
                                {
                                    int32_t edx_8;
                                    edx_8 = *edi_5;
                                    int32_t var_10c_9 = edx_8;
                                    CString::Format(&var_ec, "%02X");
                                    CString::operator+=((arg1 + 0x30ff0), &var_ec);
                                    edi_5 = (edi_5 + 1);
                                    i_3 = i_12;
                                    i_12 = (i_12 - 1);
                                } while (i_3 != 1);
                                if (data_435fd4 == 0)
                                {
                                    CString::operator=(&var_f8, &data_434de4);
                                }
                                if (data_435fd4 == 1)
                                {
                                    CString::operator=(&var_f8, &data_434dd4);
                                }
                                if (data_435fd4 == 2)
                                {
                                    CString::operator=(&var_f8, "Error code returned");
                                }
                                edi_6 = 0;
                                CWnd::UpdateData(arg1, 0);
                            }
                        }
                        else
                        {
                            i = data_435fd4;
                            if (i == 0)
                            {
                                CString::operator=(&var_f8, &data_434cfc);
                            }
                            if (data_435fd4 == 1)
                            {
                                CString::operator=(&var_f8, &data_434cfc);
                            }
                            if (data_435fd4 != 2)
                            {
                                goto label_419f6c;
                            }
                            var_10c_16 = &data_434cfc;
                        }
                    }
                    if ((eax_27 == 0 || (eax_27 != 0 && j_2 != 4)))
                    {
                        CString::operator=(&var_f8, var_10c_16);
                    label_419f6c:
                        edi_6 = 0;
                    }
                    sub_416a40(&data_4360b0);
                    sub_404a80();
                    if (edi_6 == 0)
                    {
                        var_10c_6 = 0x40;
                        var_110_3 = "Prompt";
                        var_114_2 = var_f8;
                        goto label_41b644;
                    }
                }
            }
            break;
        }
        case 3:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 3);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_46 = data_4360f8;
                char var_10c_17;
                if (eax_46 == 0)
                {
                    var_10c_17 = 0x4e;
                }
                if (eax_46 == 1)
                {
                    var_10c_17 = 0x4f;
                }
                if (eax_46 == 2)
                {
                    var_10c_17 = 0x45;
                }
                if (((eax_46 == 0 || eax_46 == 1) || eax_46 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_17);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xb, 0x1881) == 0)
                {
                    CString::operator=(&var_f8, &data_434cc4);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434cd4);
                }
            label_41b602:
                sub_416a40(&data_4360b0);
                sub_404a80();
                var_10c_6 = 0x40;
                var_110_3 = "Prompt";
                var_114_2 = var_f8;
                goto label_41b644;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 3;
            label_41b62f:
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 4:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 4);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_53 = data_4360f8;
                char var_10c_18;
                if (eax_53 == 0)
                {
                    var_10c_18 = 0x4e;
                }
                if (eax_53 == 1)
                {
                    var_10c_18 = 0x4f;
                }
                if (eax_53 == 2)
                {
                    var_10c_18 = 0x45;
                }
                if (((eax_53 == 0 || eax_53 == 1) || eax_53 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_18);
                }
                int32_t eax_54;
                eax_54 = *(arg1 + 0x30f55) != 0;
                var_e8 = (eax_54 + 1);
                if (sub_41edb0(arg1, &data_4360b0, 0xc, (eax_54 + 1)) == 0)
                {
                    CString::operator=(&var_f8, &data_434c84);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434ca4);
                }
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 4;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 5:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 5);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_62 = data_4360f8;
                char var_10c_20;
                if (eax_62 == 0)
                {
                    var_10c_20 = 0x4e;
                }
                if (eax_62 == 1)
                {
                    var_10c_20 = 0x4f;
                }
                if (eax_62 == 2)
                {
                    var_10c_20 = 0x45;
                }
                if (((eax_62 == 0 || eax_62 == 1) || eax_62 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_20);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xd, *(arg1 + 0x31004)) == 0)
                {
                    CString::operator=(&var_f8, &data_434c58);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434c6c);
                }
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 5;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 7:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 7);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_69 = data_4360f8;
                char var_10c_22;
                if (eax_69 == 0)
                {
                    var_10c_22 = 0x4e;
                }
                if (eax_69 == 1)
                {
                    var_10c_22 = 0x4f;
                }
                if (eax_69 == 2)
                {
                    var_10c_22 = 0x45;
                }
                if (((eax_69 == 0 || eax_69 == 1) || eax_69 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_22);
                }
                int32_t edx_23 = *(arg1 + 0x30ffc);
                var_d4 = 7;
                var_d3 = 6;
                char* ecx_77 = &var_d2;
                int32_t i_13 = 6;
                int32_t i_4;
                do
                {
                    *ecx_77 = (*((edx_23 - &var_d2) + ecx_77) - 0x30);
                    ecx_77 = &ecx_77[1];
                    i_4 = i_13;
                    i_13 = (i_13 - 1);
                } while (i_4 != 1);
                if (sub_41f3b0(&data_4360b0, 6, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_434c38);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434c4c);
                }
            label_41b50f:
                sub_416a40(&data_4360b0);
            label_41b514:
                sub_404a80();
                var_10c_6 = 0x40;
                var_110_3 = "Prompt";
                var_114_2 = var_f8;
                goto label_41b644;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 7;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 8:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 8);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_79 = data_4360f8;
                char var_10c_24;
                if (eax_79 == 0)
                {
                    var_10c_24 = 0x4e;
                }
                if (eax_79 == 1)
                {
                    var_10c_24 = 0x4f;
                }
                if (eax_79 == 2)
                {
                    var_10c_24 = 0x45;
                }
                if (((eax_79 == 0 || eax_79 == 1) || eax_79 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_24);
                }
                int32_t edx_26 = *(arg1 + 0x30ffc);
                var_d4 = 0xd;
                var_d3 = 0xc;
                char* ecx_81 = &var_d2;
                int32_t i_14 = 6;
                int32_t i_5;
                do
                {
                    *ecx_81 = (*(ecx_81 + (edx_26 - &var_d2)) - 0x30);
                    ecx_81 = &ecx_81[1];
                    i_5 = i_14;
                    i_14 = (i_14 - 1);
                } while (i_5 != 1);
                void var_cc;
                void* ecx_82 = &var_cc;
                void* edx_29 = (*(arg1 + 0x31000) - &var_cc);
                int32_t i_15 = 6;
                int32_t i_6;
                do
                {
                    *ecx_82 = (*(edx_29 + ecx_82) - 0x30);
                    ecx_82 = (ecx_82 + 1);
                    i_6 = i_15;
                    i_15 = (i_15 - 1);
                } while (i_6 != 1);
                if (sub_41f3b0(&data_4360b0, 7, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_434c10);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434c28);
                }
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 8;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 9:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 9);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_90 = data_4360f8;
                char var_10c_26;
                if (eax_90 == 0)
                {
                    var_10c_26 = 0x4e;
                }
                if (eax_90 == 1)
                {
                    var_10c_26 = 0x4f;
                }
                if (eax_90 == 2)
                {
                    var_10c_26 = 0x45;
                }
                if (((eax_90 == 0 || eax_90 == 1) || eax_90 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_26);
                }
                var_d4 = 7;
                var_d3 = 6;
                __builtin_strncpy(&var_d2, "J1B2D4", 6);
                if (sub_41f3b0(&data_4360b0, 9, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_434be8);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434c00);
                }
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 9;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0xa:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xa);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_99 = data_4360f8;
                char var_10c_28;
                if (eax_99 == 0)
                {
                    var_10c_28 = 0x4e;
                }
                if (eax_99 == 1)
                {
                    var_10c_28 = 0x4f;
                }
                if (eax_99 == 2)
                {
                    var_10c_28 = 0x45;
                }
                if (((eax_99 == 0 || eax_99 == 1) || eax_99 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_28);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xe3, 0x1881) == 0)
                {
                    CString::operator=(&var_f8, &data_434bc4);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434bd4);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xa;
                goto label_41b62f;
            }
            break;
        }
        case 0xb:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xb);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_106 = data_4360f8;
                char var_10c_29;
                if (eax_106 == 0)
                {
                    var_10c_29 = 0x4e;
                }
                if (eax_106 == 1)
                {
                    var_10c_29 = 0x4f;
                }
                if (eax_106 == 2)
                {
                    var_10c_29 = 0x45;
                }
                if (((eax_106 == 0 || eax_106 == 1) || eax_106 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_29);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xa, 0x1881) == 0)
                {
                    CString::operator=(&var_f8, &data_434b9c);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434bb0);
                }
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xb;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0xc:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xc);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_113 = data_4360f8;
                char var_10c_30;
                if (eax_113 == 0)
                {
                    var_10c_30 = 0x4e;
                }
                if (eax_113 == 1)
                {
                    var_10c_30 = 0x4f;
                }
                if (eax_113 == 2)
                {
                    var_10c_30 = 0x45;
                }
                if (((eax_113 == 0 || eax_113 == 1) || eax_113 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_30);
                }
                if (sub_41ef70(&data_4360b0, 0xc, &var_e8) == 0)
                {
                    CString::operator=(&var_f8, &data_434a9c);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434b88);
                    uint32_t eax_116 = var_e8;
                    char* var_10c_32;
                    if (eax_116 == 0)
                    {
                        var_10c_32 = &data_434b74;
                    }
                    else if (eax_116 == 1)
                    {
                        var_10c_32 = &data_434b60;
                    }
                    else if (eax_116 == 2)
                    {
                        var_10c_32 = &data_434b4c;
                    }
                    else if (eax_116 != 3)
                    {
                        var_10c_32 = &data_434b1c;
                    }
                    else
                    {
                        var_10c_32 = &data_434b34;
                    }
                    CString::operator+=(&var_f8, var_10c_32);
                    int32_t eax_118 = (var_e8 & 0xff00);
                    if (eax_118 == 0)
                    {
                        CString::operator+=(&var_f8, &data_434b08);
                    }
                    else if (eax_118 == 0x100)
                    {
                        CString::operator+=(&var_f8, &data_434af4);
                    }
                    else if (eax_118 == 0x200)
                    {
                        CString::operator+=(&var_f8, &data_434ae0);
                    }
                    else if (eax_118 != 0x300)
                    {
                        CString::operator+=(&var_f8, &data_434ab0);
                    }
                    else
                    {
                        CString::operator+=(&var_f8, &data_434ac8);
                    }
                }
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xc;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0xd:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xd);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_124 = data_4360f8;
                char var_10c_33;
                if (eax_124 == 0)
                {
                    var_10c_33 = 0x4e;
                }
                if (eax_124 == 1)
                {
                    var_10c_33 = 0x4f;
                }
                if (eax_124 == 2)
                {
                    var_10c_33 = 0x45;
                }
                if (((eax_124 == 0 || eax_124 == 1) || eax_124 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_33);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xe, 0x8118) == 0)
                {
                    CString::operator=(&var_f8, &data_434a64);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434a84);
                }
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xd;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0xe:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xe);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_133 = data_4360f8;
                char var_10c_34;
                if (eax_133 == 0)
                {
                    var_10c_34 = 0x4e;
                }
                if (eax_133 == 1)
                {
                    var_10c_34 = 0x4f;
                }
                if (eax_133 == 2)
                {
                    var_10c_34 = 0x45;
                }
                if (((eax_133 == 0 || eax_133 == 1) || eax_133 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_34);
                }
                int32_t ecx_111 = *(arg1 + 0x31008);
                int32_t eax_134 = *(arg1 + 0x3100c);
                var_d2 = *(arg1 + 0x31008);
                int32_t edx_38 = *(arg1 + 0x31010);
                var_d4 = 6;
                var_d3 = (ecx_111 >> 8);
                uint8_t var_d0_1 = *(arg1 + 0x3100c);
                uint8_t var_d1_1 = (eax_134 >> 8);
                uint8_t eax_135 = *(arg1 + 0x31010);
                var_cf = (edx_38 >> 8);
                uint8_t var_ce_1 = eax_135;
                if (sub_41f3b0(&data_4360b0, 0xf0, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_434a3c);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434a50);
                }
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xe;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0xf:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0xe);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_144 = data_4360f8;
                char var_10c_36;
                if (eax_144 == 0)
                {
                    var_10c_36 = 0x4e;
                }
                if (eax_144 == 1)
                {
                    var_10c_36 = 0x4f;
                }
                if (eax_144 == 2)
                {
                    var_10c_36 = 0x45;
                }
                if (((eax_144 == 0 || eax_144 == 1) || eax_144 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_36);
                }
                char* var_10c_38;
                if (sub_41f150(arg1, &data_4360b0, 0xf0, &var_d4) == 0)
                {
                    var_10c_38 = &data_434a18;
                }
                else
                {
                    var_10c_38 = &data_434a2c;
                }
                CString::operator=(&var_f8, var_10c_38);
                sub_416a40(&data_4360b0);
                char eax_148 = var_cf;
                *(arg1 + 0x31008) = ((var_d3 << 8) + var_d2);
                char var_d1;
                char var_d0;
                *(arg1 + 0x3100c) = ((var_d1 << 8) + var_d0);
                char var_ce;
                *(arg1 + 0x31010) = ((eax_148 << 8) + var_ce);
                CWnd::UpdateData(arg1, 0);
                goto label_41b514;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0xf;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x10:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x10);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_159 = data_4360f8;
                char var_10c_39;
                if (eax_159 == 0)
                {
                    var_10c_39 = 0x4e;
                }
                if (eax_159 == 1)
                {
                    var_10c_39 = 0x4f;
                }
                if (eax_159 == 2)
                {
                    var_10c_39 = 0x45;
                }
                if (((eax_159 == 0 || eax_159 == 1) || eax_159 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_39);
                }
                int32_t eax_161 = (*(arg1 + 0x31014) - 1);
                int32_t eax_162 = (-eax_161);
                if (sub_41edb0(arg1, &data_4360b0, 0xf1, ((eax_162 - eax_162) + 0x1801)) == 0)
                {
                    CString::operator=(&var_f8, &data_4349f0);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434a04);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x10;
                goto label_41b62f;
            }
            break;
        }
        case 0x11:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x11);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_171 = data_4360f8;
                char var_10c_41;
                if (eax_171 == 0)
                {
                    var_10c_41 = 0x4e;
                }
                if (eax_171 == 1)
                {
                    var_10c_41 = 0x4f;
                }
                if (eax_171 == 2)
                {
                    var_10c_41 = 0x45;
                }
                if (((eax_171 == 0 || eax_171 == 1) || eax_171 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_41);
                }
                int32_t ecx_128 = *(arg1 + 0x31018);
                var_d4 = 4;
                uint8_t* eax_172 = &var_d3;
                int32_t i_16 = 6;
                int32_t i_7;
                do
                {
                    *eax_172 = *((ecx_128 - &var_d3) + eax_172);
                    eax_172 = &eax_172[1];
                    i_7 = i_16;
                    i_16 = (i_16 - 1);
                } while (i_7 != 1);
                if (sub_41f3b0(&data_4360b0, 6, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_4349c8);
                }
                else
                {
                    CString::operator=(&var_f8, &data_4349e0);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x11;
                goto label_41b62f;
            }
            break;
        }
        case 0x12:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x12);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_179 = data_4360f8;
                char var_10c_43;
                if (eax_179 == 0)
                {
                    var_10c_43 = 0x4e;
                }
                if (eax_179 == 1)
                {
                    var_10c_43 = 0x4f;
                }
                if (eax_179 == 2)
                {
                    var_10c_43 = 0x45;
                }
                if (((eax_179 == 0 || eax_179 == 1) || eax_179 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_43);
                }
                int32_t ecx_133 = *(arg1 + 0x31018);
                var_d4 = 8;
                char* eax_180 = &var_d3;
                int32_t i_17 = 4;
                int32_t i_8;
                do
                {
                    *eax_180 = *(eax_180 + (ecx_133 - &var_d3));
                    eax_180 = &eax_180[1];
                    i_8 = i_17;
                    i_17 = (i_17 - 1);
                } while (i_8 != 1);
                uint8_t* eax_181 = &var_cf;
                void* ecx_136 = (*(arg1 + 0x3101c) - &var_cf);
                int32_t i_18 = 4;
                int32_t i_9;
                do
                {
                    *eax_181 = *(ecx_136 + eax_181);
                    eax_181 = &eax_181[1];
                    i_9 = i_18;
                    i_18 = (i_18 - 1);
                } while (i_9 != 1);
                if (sub_41f3b0(&data_4360b0, 7, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_4349a0);
                }
                else
                {
                    CString::operator=(&var_f8, &data_4349b8);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x12;
                goto label_41b62f;
            }
            break;
        }
        case 0x13:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x13);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_188 = data_4360f8;
                char var_10c_45;
                if (eax_188 == 0)
                {
                    var_10c_45 = 0x4e;
                }
                if (eax_188 == 1)
                {
                    var_10c_45 = 0x4f;
                }
                if (eax_188 == 2)
                {
                    var_10c_45 = 0x45;
                }
                if (((eax_188 == 0 || eax_188 == 1) || eax_188 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_45);
                }
                int32_t ecx_140 = *(arg1 + 0x31018);
                var_d4 = 4;
                char* eax_189 = &var_d3;
                int32_t i_19 = 4;
                int32_t i_10;
                do
                {
                    *eax_189 = *(eax_189 + (ecx_140 - &var_d3));
                    eax_189 = &eax_189[1];
                    i_10 = i_19;
                    i_19 = (i_19 - 1);
                } while (i_10 != 1);
                if (sub_41f3b0(&data_4360b0, 8, &var_d4) == 0)
                {
                    CString::operator=(&var_f8, &data_434978);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434990);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x13;
                goto label_41b62f;
            }
            break;
        }
        case 0x14:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x14);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_196 = data_4360f8;
                char var_10c_47;
                if (eax_196 == 0)
                {
                    var_10c_47 = 0x4e;
                }
                if (eax_196 == 1)
                {
                    var_10c_47 = 0x4f;
                }
                if (eax_196 == 2)
                {
                    var_10c_47 = 0x45;
                }
                if (((eax_196 == 0 || eax_196 == 1) || eax_196 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_47);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xf4, 1) == 0)
                {
                    CString::operator=(&var_f8, &data_434940);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434960);
                }
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x14;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x15:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x15);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_203 = data_4360f8;
                char var_10c_48;
                if (eax_203 == 0)
                {
                    var_10c_48 = 0x4e;
                }
                if (eax_203 == 1)
                {
                    var_10c_48 = 0x4f;
                }
                if (eax_203 == 2)
                {
                    var_10c_48 = 0x45;
                }
                if (((eax_203 == 0 || eax_203 == 1) || eax_203 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_48);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xf4, 0) == 0)
                {
                    CString::operator=(&var_f8, &data_434908);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434928);
                }
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x15;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x16:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x16);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_212 = data_4360f8;
                char var_10c_49;
                if (eax_212 == 0)
                {
                    var_10c_49 = 0x4e;
                }
                if (eax_212 == 1)
                {
                    var_10c_49 = 0x4f;
                }
                if (eax_212 == 2)
                {
                    var_10c_49 = 0x45;
                }
                if (((eax_212 == 0 || eax_212 == 1) || eax_212 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_49);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0xe4, 0x1881) == 0)
                {
                    CString::operator=(&var_f8, &data_4348e0);
                }
                else
                {
                    CString::operator=(&var_f8, &data_4348f8);
                }
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x16;
                goto label_41b62f;
            }
            break;
        }
        case 0x17:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x17);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_219 = data_4360f8;
                char var_10c_50;
                if (eax_219 == 0)
                {
                    var_10c_50 = 0x4e;
                }
                if (eax_219 == 1)
                {
                    var_10c_50 = 0x4f;
                }
                if (eax_219 == 2)
                {
                    var_10c_50 = 0x45;
                }
                if (((eax_219 == 0 || eax_219 == 1) || eax_219 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_50);
                }
                sub_41edb0(arg1, &data_4360b0, 0, 0x5678);
                sub_405320(0x64);
                char* var_10c_51;
                if (sub_41edb0(arg1, &data_4360b0, 0x12, 0x1004) == 0)
                {
                    var_10c_51 = "SEND COMMAND ERROR";
                }
                else
                {
                    var_10c_51 = &data_4348dc;
                }
                CString::operator=(&var_f8, var_10c_51);
                sub_405320(0x64);
                sub_41edb0(arg1, &data_4360b0, 1, 0x2828);
                goto label_41b3de;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x17;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x18:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x18);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_226 = data_4360f8;
                char var_10c_52;
                if (eax_226 == 0)
                {
                    var_10c_52 = 0x4e;
                }
                if (eax_226 == 1)
                {
                    var_10c_52 = 0x4f;
                }
                if (eax_226 == 2)
                {
                    var_10c_52 = 0x45;
                }
                if (((eax_226 == 0 || eax_226 == 1) || eax_226 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_52);
                }
                if (sub_41f3b0(&data_4360b0, 0xf0, (arg1 + 0x30f50)) == 0)
                {
                    var_10c_54 = "SEND UUID ERROR";
                }
                else
                {
                    var_10c_54 = "SEND UUID OK!";
                }
            label_41b3ca:
                CString::operator=(&var_f8, var_10c_54);
                sub_405320(0x64);
            label_41b3de:
                sub_416a40(&data_4360b0);
                sub_404a80();
                var_10c_6 = 0x40;
                var_110_3 = "Prompt";
                var_114_2 = var_f8;
                goto label_41b644;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x18;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x19:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x19);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_233 = data_4360f8;
                char var_10c_55;
                if (eax_233 == 0)
                {
                    var_10c_55 = 0x4e;
                }
                if (eax_233 == 1)
                {
                    var_10c_55 = 0x4f;
                }
                if (eax_233 == 2)
                {
                    var_10c_55 = 0x45;
                }
                if (((eax_233 == 0 || eax_233 == 1) || eax_233 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_55);
                }
                if (sub_41f3b0(&data_4360b0, 0xfb, (arg1 + 0x30f50)) == 0)
                {
                    var_10c_54 = &data_434878;
                }
                else
                {
                    var_10c_54 = &data_434894;
                }
                goto label_41b3ca;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x19;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x1a:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x1a);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_241 = data_4360f8;
                char var_10c_57;
                if (eax_241 == 0)
                {
                    var_10c_57 = 0x4e;
                }
                if (eax_241 == 1)
                {
                    var_10c_57 = 0x4f;
                }
                if (eax_241 == 2)
                {
                    var_10c_57 = 0x45;
                }
                if (((eax_241 == 0 || eax_241 == 1) || eax_241 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_57);
                }
                if (sub_41f150(arg1, &data_4360b0, 0xfb, (arg1 + 0x30f50)) == 0)
                {
                    CString::operator=(&var_f8, &data_434848);
                }
                else
                {
                    CString::operator=(&var_f8, &data_434864);
                    if (*(arg1 + 0x30f51) != 1)
                    {
                        *(arg1 + 0x31030) = 0;
                    }
                    else
                    {
                        *(arg1 + 0x31030) = 1;
                    }
                    int32_t eax_243;
                    eax_243 = *(arg1 + 0x30f52);
                    int32_t ecx_168;
                    ecx_168 = *(arg1 + 0x30f53);
                    *(arg1 + 0x3102c) = ((eax_243 << 8) + ecx_168);
                    CWnd::UpdateData(arg1, 0);
                }
                sub_405320(0x64);
                goto label_41b50f;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x1a;
                hWnd = *(arg1 + 0x20);
                goto label_41b630;
            }
            break;
        }
        case 0x1b:
        {
            if (sub_404a90() != 0)
            {
                KillTimer(*(arg1 + 0x20), 0x1b);
                sub_404a70();
                if (sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0) == 0)
                {
                    goto label_41b538;
                }
                int32_t eax_253 = data_4360f8;
                char var_10c_59;
                if (eax_253 == 0)
                {
                    var_10c_59 = 0x4e;
                }
                if (eax_253 == 1)
                {
                    var_10c_59 = 0x4f;
                }
                if (eax_253 == 2)
                {
                    var_10c_59 = 0x45;
                }
                if (((eax_253 == 0 || eax_253 == 1) || eax_253 == 2))
                {
                    sub_416890(&data_4360b0, var_10c_59);
                }
                sub_41edb0(arg1, &data_4360b0, 0xa, 0x800);
                CString::operator=(&var_f8, &data_434834);
                sub_405320(0x64);
                goto label_41b602;
            }
            if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
            {
                uIDEvent = 0x1b;
                goto label_41b62f;
            }
            break;
        }
    }
    CWnd::Default(arg1);
    var_4 = 0;
    CString::~CString(&var_ec);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_256 = CString::~CString(&var_f8);
    *fsbase = var_c;
    return eax_256;
}

uint32_t* __fastcall sub_41b6b0(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    uint32_t* eax_2 = SetTimer(*(arg1 + 0x20), 0xa, 0x14, nullptr);
    data_436110 = 1;
    return eax_2;
}

int32_t __fastcall sub_41b6e0(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429348;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    CString::CString(&var_10);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    int32_t edx = *(arg1 + 0x30fe8);
    char eax_1 = *(arg1 + 0x30fe4);
    *(arg1 + 0x6d) = *(arg1 + 0x30fec);
    void* edi = (arg1 + 0x6c);
    uint8_t ecx_4 = (*(arg1 + 0x30ff8) >> 8);
    *edi = eax_1;
    eax_1 = *(arg1 + 0x30fe8);
    *(arg1 + 0x6e) = (edx >> 8);
    uint8_t edx_1 = *(arg1 + 0x30ff8);
    *(arg1 + 0x70) = ecx_4;
    *(arg1 + 0x6f) = eax_1;
    *(arg1 + 0x71) = edx_1;
    int16_t eax_2 = sub_41b7f0(edi, 6);
    *(arg1 + 0x73) = *eax_2[1];
    *(arg1 + 0x72) = eax_2;
    CString::operator=((arg1 + 0x30ff4), &data_435ef0);
    int32_t i_1 = 8;
    int32_t i;
    do
    {
        int32_t edx_2;
        edx_2 = *edi;
        int32_t var_24_1 = edx_2;
        CString::Format(&var_10, "%02X  ");
        CString::operator+=((arg1 + 0x30ff4), &var_10);
        edi = (edi + 1);
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    CWnd::UpdateData(arg1, 0);
    uint32_t eax_3 = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_3;
    SetTimer(hWnd, 2, 0x14, nullptr);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_4 = CString::~CString(&var_10);
    *fsbase = var_c;
    return eax_4;
}

int32_t __stdcall sub_41b7f0(char* arg1, char arg2)
{
    int32_t j_1;
    int32_t j_2 = j_1;
    j_1 = arg2;
    int32_t eax = 0xffff;
    char edx = j_1;
    j_1 = (j_1 - 1);
    if (edx == 0)
    {
        eax = 0xffff;
        return 0xffff;
    }
    char* edx_1 = arg1;
    int32_t i_1 = (j_1 + 1);
    int32_t var_4;
    int32_t i;
    do
    {
        j_1 = *edx_1;
        edx_1 = &edx_1[1];
        j_1 = j_1;
        eax = (eax ^ j_1);
        j_1 = 8;
        var_4 = eax;
        int32_t j;
        do
        {
            if ((var_4 & 1) == 0)
            {
                var_4 = (var_4 >> 1);
                eax = var_4;
            }
            else
            {
                eax = var_4;
                eax = (eax >> 1);
                eax = (eax ^ 0xa001);
                var_4 = eax;
            }
            j = j_1;
            j_1 = (j_1 - 1);
        } while (j != 1);
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    eax = var_4;
    return eax;
}

int32_t __fastcall sub_41b870(CWnd* arg1)
{
    int32_t eax;
    eax = data_435fd4;
    if (eax == 0)
    {
        CWnd::SetDlgItemTextA(arg1, 0x528, &data_435154);
        CWnd::SetDlgItemTextA(arg1, 0x529, &data_43514c);
        CWnd::SetDlgItemTextA(arg1, 0x52a, &data_435140);
        CWnd::SetDlgItemTextA(arg1, 0x52b, &data_435134);
        CWnd::SetDlgItemTextA(arg1, 0x476, &data_435128);
        CWnd::SetDlgItemTextA(arg1, 0x479, &data_435120);
        CWnd::SetDlgItemTextA(arg1, 0x47d, &data_435114);
        CWnd::SetDlgItemTextA(arg1, 0x47f, &data_435108);
        CWnd::SetDlgItemTextA(arg1, 0x482, &data_4350fc);
        CWnd::SetDlgItemTextA(arg1, 0x47e, &data_4350f0);
        eax = CWnd::SetDlgItemTextA(arg1, 0x49b, &data_4350e8);
    }
    if (data_435fd4 == 1)
    {
        CWnd::SetDlgItemTextA(arg1, 0x528, &data_435154);
        CWnd::SetDlgItemTextA(arg1, 0x529, &data_43514c);
        CWnd::SetDlgItemTextA(arg1, 0x52a, &data_435140);
        CWnd::SetDlgItemTextA(arg1, 0x52b, &data_435134);
        CWnd::SetDlgItemTextA(arg1, 0x476, &data_4350dc);
        CWnd::SetDlgItemTextA(arg1, 0x479, &data_435120);
        CWnd::SetDlgItemTextA(arg1, 0x47d, &data_4350d0);
        CWnd::SetDlgItemTextA(arg1, 0x47f, &data_4350c4);
        CWnd::SetDlgItemTextA(arg1, 0x482, &data_4350b8);
        CWnd::SetDlgItemTextA(arg1, 0x47e, &data_4350f0);
        eax = CWnd::SetDlgItemTextA(arg1, 0x49b, &data_4350b0);
    }
    if (data_435fd4 == 2)
    {
        CWnd::SetDlgItemTextA(arg1, 0x528, "Address");
        CWnd::SetDlgItemTextA(arg1, 0x529, "Code");
        CWnd::SetDlgItemTextA(arg1, 0x52a, "register");
        CWnd::SetDlgItemTextA(arg1, 0x52b, "Data Length");
        CWnd::SetDlgItemTextA(arg1, 0x476, "EDIT RM");
        CWnd::SetDlgItemTextA(arg1, 0x479, "MOS MODE");
        CWnd::SetDlgItemTextA(arg1, 0x47d, "EvenBalance");
        CWnd::SetDlgItemTextA(arg1, 0x47f, "OddBalance");
        CWnd::SetDlgItemTextA(arg1, 0x482, "CloseAll");
        CWnd::SetDlgItemTextA(arg1, 0x47e, "ExitMode");
        eax = CWnd::SetDlgItemTextA(arg1, 0x49b, "Send");
    }
    return eax;
}

int32_t __stdcall sub_41bad0(char* arg1, int32_t* arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429368;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* _EndPtr = nullptr;
    void var_18;
    sub_416420(&var_18);
    int32_t var_4 = 0;
    char* _String = strtok(arg1, &data_435160);
    if (_String != 0)
    {
        do
        {
            uint32_t var_1c = strtoul(_String, &_EndPtr, 0x10);
            int32_t edi_1 = sub_4164b0(&var_18, &var_1c);
            int32_t j = 0xffffffff;
            while (j != 0)
            {
                bool cond:2_1 = 0 != *edi_1;
                edi_1 = (edi_1 + 1);
                j = (j - 1);
                if ((!cond:2_1))
                {
                    break;
                }
            }
            int32_t ecx_2 = (!j);
            int32_t edi_3 = *arg2;
            int32_t j_1 = 0xffffffff;
            while (j_1 != 0)
            {
                bool cond:3_1 = 0 != *edi_3;
                edi_3 = (edi_3 + 1);
                j_1 = (j_1 - 1);
                if ((!cond:3_1))
                {
                    break;
                }
            }
            __builtin_memcpy((edi_3 - 1), (edi_1 - ecx_2), ((ecx_2 >> 2) << 2));
            int32_t esi_2;
            int32_t edi_5;
            __builtin_memcpy(edi_5, esi_2, (ecx_2 & 3));
            char* _EndPtr_1 = _EndPtr;
            if (*_EndPtr_1 != 0)
            {
                int32_t j_2 = 0xffffffff;
                while (j_2 != 0)
                {
                    bool cond:0_1 = 0 != *_EndPtr_1;
                    _EndPtr_1 = &_EndPtr_1[1];
                    j_2 = (j_2 - 1);
                    if ((!cond:0_1))
                    {
                        break;
                    }
                }
                int32_t ecx_7 = (!j_2);
                int32_t edi_7 = *arg2;
                int32_t j_3 = 0xffffffff;
                while (j_3 != 0)
                {
                    bool cond:1_1 = 0 != *edi_7;
                    edi_7 = (edi_7 + 1);
                    j_3 = (j_3 - 1);
                    if ((!cond:1_1))
                    {
                        break;
                    }
                }
                __builtin_memcpy((edi_7 - 1), (_EndPtr_1 - ecx_7), ((ecx_7 >> 2) << 2));
                int32_t esi_4;
                int32_t edi_9;
                __builtin_memcpy(edi_9, esi_4, (ecx_7 & 3));
            }
            _String = strtok(nullptr, &data_435160);
        } while (_String != 0);
    }
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_4 = sub_416460(&var_18);
    *fsbase = var_c;
    return eax_4;
}

uint32_t* __fastcall sub_41bbe0(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax_1 = *(*(arg1 + 0x30ffc) - 8);
    if (eax_1 < 6)
    {
        *(arg1 + 0x64) = 0;
        uint32_t eax_2 = GetTickCount();
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x60) = eax_2;
        return SetTimer(hWnd, 7, 0x14, nullptr);
    }
    if (eax_1 != 6)
    {
        return CWnd::MessageBoxA(arg1, &data_435164, "Error", 0x10);
    }
    *(arg1 + 0x64) = 1;
    uint32_t eax_4 = GetTickCount();
    HWND hWnd_1 = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_4;
    return SetTimer(hWnd_1, 7, 0x14, nullptr);
}

int32_t __fastcall sub_41bc60(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax_1 = *(*(arg1 + 0x30ffc) - 8);
    if (eax_1 < 6)
    {
        *(arg1 + 0x64) = 0;
    }
    else
    {
        if (eax_1 != 6)
        {
            return CWnd::MessageBoxA(arg1, &data_435164, "Error", 0x10);
        }
        *(arg1 + 0x64) = 1;
    }
    if (*(*(arg1 + 0x31000) - 8) != 6)
    {
        return CWnd::MessageBoxA(arg1, &data_435188, "Error", 0x10);
    }
    uint32_t eax_2 = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_2;
    return SetTimer(hWnd, 8, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bce0(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 9, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bd00(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0xb, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bd20(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 3, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bd40(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    uint32_t* eax_2 = SetTimer(*(arg1 + 0x20), 4, 0x14, nullptr);
    *(arg1 + 0x30f55) = 0;
    return eax_2;
}

uint32_t* __fastcall sub_41bd70(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    uint32_t* eax_2 = SetTimer(*(arg1 + 0x20), 4, 0x14, nullptr);
    *(arg1 + 0x30f55) = 1;
    return eax_2;
}

int32_t __fastcall sub_41bda0(CWnd* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    SetTimer(*(arg1 + 0x20), 5, 0x14, nullptr);
    return CWnd::UpdateData(arg1, 1);
}

uint32_t* __fastcall sub_41bdd0(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0xc, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bdf0(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0xd, 0x14, nullptr);
}

int32_t __fastcall sub_41be10(CWnd* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    SetTimer(*(arg1 + 0x20), 0xe, 0x14, nullptr);
    return CWnd::UpdateData(arg1, 1);
}

uint32_t* __fastcall sub_41be40(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0xf, 0x14, nullptr);
}

int32_t __fastcall sub_41be60(CWnd* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    SetTimer(*(arg1 + 0x20), 0x10, 0x14, nullptr);
    return CWnd::UpdateData(arg1, 1);
}

uint32_t* __fastcall sub_41be90(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax_1 = *(*(arg1 + 0x31018) - 8);
    if (eax_1 < 4)
    {
        *(arg1 + 0x64) = 0;
        uint32_t eax_2 = GetTickCount();
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x60) = eax_2;
        return SetTimer(hWnd, 0x11, 0x14, nullptr);
    }
    if (eax_1 != 4)
    {
        return CWnd::MessageBoxA(arg1, &data_4351a8, "Error", 0x10);
    }
    *(arg1 + 0x64) = 1;
    uint32_t eax_4 = GetTickCount();
    HWND hWnd_1 = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_4;
    return SetTimer(hWnd_1, 0x11, 0x14, nullptr);
}

int32_t __fastcall sub_41bf10(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    int32_t eax_1 = *(*(arg1 + 0x31018) - 8);
    if (eax_1 < 4)
    {
        *(arg1 + 0x64) = 0;
    }
    else
    {
        if (eax_1 != 4)
        {
            return CWnd::MessageBoxA(arg1, &data_4351d0, "Error", 0x10);
        }
        *(arg1 + 0x64) = 1;
    }
    if (*(*(arg1 + 0x3101c) - 8) != 4)
    {
        return CWnd::MessageBoxA(arg1, &data_435188, "Error", 0x10);
    }
    uint32_t eax_2 = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_2;
    return SetTimer(hWnd, 0x12, 0x14, nullptr);
}

uint32_t* __fastcall sub_41bf90(CWnd* arg1)
{
    int32_t eax_1 = *(*(arg1 + 0x31018) - 8);
    if (eax_1 < 4)
    {
        *(arg1 + 0x64) = 0;
        uint32_t eax_2 = GetTickCount();
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x60) = eax_2;
        return SetTimer(hWnd, 0x13, 0x14, nullptr);
    }
    if (eax_1 != 4)
    {
        return CWnd::MessageBoxA(arg1, &data_4351a8, "Error", 0x10);
    }
    *(arg1 + 0x64) = 1;
    uint32_t eax_4 = GetTickCount();
    HWND hWnd_1 = *(arg1 + 0x20);
    *(arg1 + 0x60) = eax_4;
    return SetTimer(hWnd_1, 0x13, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c000(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x14, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c020(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x15, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c040(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x16, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c060(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x17, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c080(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    *(arg1 + 0x60) = GetTickCount();
    SetTimer(*(arg1 + 0x20), 0x18, 0x14, nullptr);
    char ecx = *(arg1 + 0x31020);
    char edx = *(arg1 + 0x31024);
    uint32_t* eax_2;
    eax_2 = *(arg1 + 0x31028);
    *(arg1 + 0x30f50) = 3;
    *(arg1 + 0x30f51) = ecx;
    *(arg1 + 0x30f52) = edx;
    *(arg1 + 0x30f53) = eax_2;
    return eax_2;
}

uint32_t* __fastcall sub_41c0d0(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    *(arg1 + 0x60) = GetTickCount();
    SetTimer(*(arg1 + 0x20), 0x19, 0x14, nullptr);
    int32_t edx = *(arg1 + 0x3102c);
    char ecx = *(arg1 + 0x31030);
    uint32_t* eax_2;
    eax_2 = *(arg1 + 0x3102c);
    *(arg1 + 0x30f50) = 3;
    *(arg1 + 0x30f51) = ecx;
    *(arg1 + 0x30f52) = (edx >> 8);
    *(arg1 + 0x30f53) = eax_2;
    return eax_2;
}

uint32_t* __fastcall sub_41c130(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x1a, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c150(CWnd* arg1)
{
    CWnd::UpdateData(arg1, 1);
    *(arg1 + 0x60) = GetTickCount();
    HWND hWnd = *(arg1 + 0x20);
    *(arg1 + 0x68) = 6;
    return SetTimer(hWnd, 1, 0x14, nullptr);
}

uint32_t* __fastcall sub_41c180(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 0x1b, 0x14, nullptr);
}

void*** __thiscall sub_41c1a0(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4293a1;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0xa3, arg2);
    int32_t var_4 = 0;
    sub_416590(&esi[0x1f]);
    var_4 = 1;
    sub_426090(&esi[0x41]);
    var_4 = 2;
    CWnd::CWnd(&esi[0x5c]);
    int32_t ecx_3 = var_c;
    esi[0x5c] = 0x42ba5c;
    *esi = &data_42c120;
    *fsbase = ecx_3;
    return esi;
}

CDialog* __thiscall sub_41c220(CDialog* arg1, char arg2)
{
    sub_41c250(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_41c240(void* arg1)
{
    /* tailcall */
    return sub_416a80((arg1 + 0x14));
}

int32_t __fastcall sub_41c250(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4293d1;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 2;
    CListCtrl::~CListCtrl((arg1 + 0x170));
    var_4 = 1;
    sub_426160((arg1 + 0x104));
    var_4 = 0;
    sub_416a80((arg1 + 0x7c));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_41c2c0(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x548, (arg1 + 0x104));
    return DDX_Control(arg2, 0x54a, (arg1 + 0x170));
}

int32_t sub_41c300() __pure
{
    return CDialog::messageMap;
}

int32_t sub_41c310() __pure
{
    return 0x42c058;
}

long __fastcall sub_41c320(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_41c360(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4293e8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_10 = arg1;
    CDialog::OnInitDialog(arg1);
    CString::CString(&var_10);
    int32_t edi = 0;
    int32_t var_4 = 0;
    sub_4266f0((arg1 + 0x104), 0x1aff1a);
    SendMessageA(*(arg1 + 0x190), 0x1036, nullptr, 0x21);
    ShowScrollBar(*(arg1 + 0x190), SB_VERT, 1);
    CListCtrl::InsertColumn((arg1 + 0x170), 0, &data_4342a8, 2, 0x32, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 1, &data_435280, 2, 0x96, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 2, &data_435278, 2, 0x96, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 3, &data_43526c, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 4, &data_435260, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 5, &data_435254, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 6, &data_435248, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 7, &data_43523c, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 8, &data_435230, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 9, &data_435224, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 0xa, &data_435218, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 0xb, &data_43520c, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 0xc, &data_435200, 2, 0x46, 0);
    CListCtrl::InsertColumn((arg1 + 0x170), 0xd, &data_4351f8, 2, 0x4e, 0);
    int32_t i_1 = 8;
    int32_t i;
    do
    {
        CListCtrl::InsertItem((arg1 + 0x170), 1, edi, &data_435ef0, 0, 0, 0, 0);
        int32_t var_24_1 = (edi + 1);
        CString::Format(&var_10, &data_4351f4);
        CListCtrl::SetItemText((arg1 + 0x170), edi, 0, var_10);
        i = i_1;
        i_1 = (i_1 - 1);
        edi = (edi + 1);
    } while (i != 1);
    int32_t var_4_1 = 0xffffffff;
    CString::~CString(&var_10);
    *fsbase = var_c;
    return 1;
}

int32_t __fastcall sub_41c550(CWnd* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    sub_4267d0((arg1 + 0x104), 0);
    SendMessageA(*(arg1 + 0x190), 0x1009, nullptr, nullptr);
    SetTimer(*(arg1 + 0x20), 3, 0x14, nullptr);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x544), 0);
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x545), 0);
    return CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x546), 0);
}

uint32_t* __fastcall sub_41c5d0(CWnd* arg1)
{
    int16_t lpSystemTime;
    GetLocalTime(&lpSystemTime);
    if (lpSystemTime >= 0x7d0)
    {
        uint32_t eax_1 = GetTickCount();
        HWND hWnd = *(arg1 + 0x20);
        *(arg1 + 0x60) = eax_1;
        return SetTimer(hWnd, 1, 0x14, nullptr);
    }
    return CWnd::MessageBoxA(arg1, &data_435288, nullptr, 0);
}

uint32_t* __fastcall sub_41c620(void* arg1)
{
    *(arg1 + 0x60) = GetTickCount();
    return SetTimer(*(arg1 + 0x20), 2, 0x14, nullptr);
}

int32_t __fastcall sub_41c640(CWnd* arg1)
{
    int32_t ebp;
    int32_t var_4 = ebp;
    int32_t var_c = 0xffffffff;
    int32_t (* var_10)() = sub_429408;
    int32_t* fsbase;
    int32_t var_14 = *fsbase;
    *fsbase = &var_14;
    char* var_2c;
    CString::CString(&var_2c);
    int32_t eax_1 = *(arg1 + 0x100);
    int32_t var_c_1 = 0;
    char* var_48;
    void* var_44;
    if (eax_1 == 1)
    {
        int32_t var_40 = 0x20;
        var_44 = "ERROR";
        var_48 = &data_435620;
    }
    if ((((eax_1 != 1 && eax_1 != 3) && eax_1 != 4) && eax_1 != 0))
    {
        int32_t eax_5;
        eax_5 = *(arg1 + 0xbe);
        int32_t ecx_8;
        ecx_8 = *(arg1 + 0xbc);
        int32_t eax_9;
        int32_t edx_1;
        edx_1 = HIGHD((eax_5 * 0x64));
        eax_9 = LOWD((eax_5 * 0x64));
        sub_4267d0((arg1 + 0x104), (COMBINE(edx_1, eax_9) / ecx_8));
        int32_t eax_11;
        eax_11 = *(arg1 + 0xbe);
        CListCtrl::InsertItem((arg1 + 0x170), 1, eax_11, &data_435ef0, 0, 0, 0, 0);
        int32_t edx_3;
        edx_3 = *(arg1 + 0xbe);
        int32_t var_40_5 = (edx_3 + 1);
        CString::Format(&var_2c, &data_431074);
        int32_t edx_5;
        edx_5 = *(arg1 + 0xbe);
        int32_t eax_12;
        uint16_t ecx_13;
        eax_12 = CListCtrl::SetItemText((arg1 + 0x170), edx_5, 0, var_2c);
        eax_12 = *(arg1 + 0xc1);
        ecx_13 = eax_12;
        eax_12 = (eax_12 & 1);
        ecx_13 = (ecx_13 >> 1);
        int16_t edx_6;
        edx_6 = ecx_13;
        ecx_13 = *(arg1 + 0xc2);
        uint16_t edx_7;
        edx_7 = ecx_13;
        eax_12 = eax_12;
        edx_7 = (edx_7 >> 5);
        ecx_13 = (ecx_13 & 0x1f);
        int16_t eax_14;
        eax_14 = ecx_13;
        uint32_t var_40_7 = *(arg1 + 0xc5);
        uint32_t var_44_1 = *(arg1 + 0xc4);
        uint32_t var_48_3 = *(arg1 + 0xc3);
        uint32_t var_4c_1 = eax_14;
        uint32_t var_50_1 = ((eax_12 << 3) | edx_7);
        uint32_t var_54_2 = (edx_6 + 0x7d0);
        CString::Format(&var_2c, "%4d-%d-%d %02d:%02d:%02d");
        int32_t eax_19;
        eax_19 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_19, 1, var_2c);
        char eax_20 = *(arg1 + 0xc0);
        int32_t var_48_5;
        char* var_40_9;
        if (eax_20 != 2)
        {
            if (eax_20 == 1)
            {
                if (data_435fd4 == 2)
                {
                    var_40_9 = "Start Dsg";
                    int32_t ecx_20;
                    ecx_20 = *(arg1 + 0xbe);
                    var_48_5 = ecx_20;
                }
                else
                {
                    var_40_9 = &data_43556c;
                    int32_t eax_21;
                    eax_21 = *(arg1 + 0xbe);
                    var_48_5 = eax_21;
                }
            }
            else if (eax_20 != 3)
            {
                if (eax_20 == 4)
                {
                    eax_20 = data_435fd4;
                    if ((eax_20 == 2 && *(arg1 + 0xce) != 0))
                    {
                        CString::operator=(&var_2c, "Protect:");
                        if ((*(arg1 + 0xce) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, "CellOV ");
                        }
                        if ((*(arg1 + 0xce) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, "CellUV ");
                        }
                        if ((*(arg1 + 0xce) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, "PackOV ");
                        }
                        if ((*(arg1 + 0xce) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, "PackUV ");
                        }
                        if ((*(arg1 + 0xce) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, "ChgOT ");
                        }
                        if ((*(arg1 + 0xce) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, "ChgUT ");
                        }
                        if ((*(arg1 + 0xce) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, "DsgOT ");
                        }
                        if ((*(arg1 + 0xce) & 0x80) != 0)
                        {
                            CString::operator+=(&var_2c, " DsgUT");
                        }
                        if ((*(arg1 + 0xcf) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, "ChgOC ");
                        }
                        if ((*(arg1 + 0xcf) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, "DsgOC ");
                        }
                        if ((*(arg1 + 0xcf) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435420);
                        }
                        if ((*(arg1 + 0xcf) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, "AFE ");
                        }
                        if ((*(arg1 + 0xcf) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, "LOCK ");
                        }
                        if ((*(arg1 + 0xcf) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, "AirOT ");
                        }
                        if ((*(arg1 + 0xcf) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, "AirUT ");
                        }
                        if ((*(arg1 + 0xce) & 0x8000) != 0)
                        {
                            CString::operator+=(&var_2c, "PCBOT");
                            var_40_9 = var_2c;
                        }
                    }
                    if (*(arg1 + 0xce) != 0)
                    {
                        if (eax_20 != 2)
                        {
                            CString::operator=(&var_2c, &data_43553c);
                            if ((*(arg1 + 0xce) & 1) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435530);
                            }
                            if ((*(arg1 + 0xce) & 2) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435524);
                            }
                            if ((*(arg1 + 0xce) & 4) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435518);
                            }
                            if ((*(arg1 + 0xce) & 8) != 0)
                            {
                                CString::operator+=(&var_2c, &data_43550c);
                            }
                            if ((*(arg1 + 0xce) & 0x10) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435500);
                            }
                            if ((*(arg1 + 0xce) & 0x20) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354f4);
                            }
                            if ((*(arg1 + 0xce) & 0x40) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354e8);
                            }
                            if ((*(arg1 + 0xce) & 0x80) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354dc);
                            }
                            if ((*(arg1 + 0xcf) & 1) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354d0);
                            }
                            if ((*(arg1 + 0xcf) & 2) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354c4);
                            }
                            if ((*(arg1 + 0xcf) & 4) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354b8);
                            }
                            if ((*(arg1 + 0xcf) & 8) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354ac);
                            }
                            if ((*(arg1 + 0xcf) & 0x10) != 0)
                            {
                                CString::operator+=(&var_2c, &data_4354a0);
                            }
                            if ((*(arg1 + 0xcf) & 0x20) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435494);
                            }
                            if ((*(arg1 + 0xcf) & 0x40) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435488);
                            }
                            if ((*(arg1 + 0xce) & 0x8000) != 0)
                            {
                                CString::operator+=(&var_2c, &data_435480);
                                var_40_9 = var_2c;
                            }
                        }
                    }
                    else
                    {
                        char* var_40_10;
                        if (eax_20 == 2)
                        {
                            var_40_10 = "Protect Release";
                        }
                        else
                        {
                            var_40_10 = &data_4353ec;
                        }
                        CString::operator=(&var_2c, var_40_10);
                    }
                    if (((((*(arg1 + 0xce) != 0 && eax_20 == 2) && (*(arg1 + 0xce) & 0x8000) == 0) || ((*(arg1 + 0xce) != 0 && eax_20 != 2) && (*(arg1 + 0xce) & 0x8000) == 0)) || *(arg1 + 0xce) == 0))
                    {
                        var_40_9 = var_2c;
                    }
                    goto label_41d026;
                }
                if (eax_20 == 5)
                {
                    eax_20 = data_435fd4;
                    if (*(arg1 + 0xd0) == 0)
                    {
                        char* var_40_11;
                        if (eax_20 == 2)
                        {
                            var_40_11 = "Alarm Release";
                        }
                        else
                        {
                            var_40_11 = &data_435318;
                        }
                        CString::operator=(&var_2c, var_40_11);
                    }
                    else if (eax_20 == 2)
                    {
                        CString::operator=(&var_2c, "Alarm:");
                        if ((*(arg1 + 0xd0) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, "CellUV ");
                        }
                        if ((*(arg1 + 0xd0) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, "CellOV ");
                        }
                        if ((*(arg1 + 0xd0) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, "PackUV ");
                        }
                        if ((*(arg1 + 0xd0) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, "PackOV ");
                        }
                        if ((*(arg1 + 0xd0) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, "ChgOC ");
                        }
                        if ((*(arg1 + 0xd0) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, "DsgOC ");
                        }
                        if ((*(arg1 + 0xd0) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, "ChgOT ");
                        }
                        if ((*(arg1 + 0xd0) & 0x80) != 0)
                        {
                            CString::operator+=(&var_2c, "ChguT ");
                        }
                        if ((*(arg1 + 0xd1) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, "DsgOT ");
                        }
                        if ((*(arg1 + 0xd1) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, "DsgUt ");
                        }
                        if ((*(arg1 + 0xd1) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, "AirOt ");
                        }
                        if ((*(arg1 + 0xd1) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, "AirUt ");
                        }
                        if ((*(arg1 + 0xd1) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, "PCB Ot ");
                        }
                        if ((*(arg1 + 0xd1) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, "MaxDiff ");
                        }
                        if ((*(arg1 + 0xd1) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, "LowRSOC ");
                        }
                        if ((*(arg1 + 0xd0) & 0x8000) != 0)
                        {
                            CString::operator+=(&var_2c, "Other");
                        }
                    }
                    else
                    {
                        CString::operator=(&var_2c, &data_4353d4);
                        if ((*(arg1 + 0xd0) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4353c8);
                        }
                        if ((*(arg1 + 0xd0) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4353bc);
                        }
                        if ((*(arg1 + 0xd0) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4353b0);
                        }
                        if ((*(arg1 + 0xd0) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4353a4);
                        }
                        if ((*(arg1 + 0xd0) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4354d0);
                        }
                        if ((*(arg1 + 0xd0) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4354c4);
                        }
                        if ((*(arg1 + 0xd0) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435500);
                        }
                        if ((*(arg1 + 0xd0) & 0x80) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4354f4);
                        }
                        if ((*(arg1 + 0xd1) & 1) != 0)
                        {
                            CString::operator+=(&var_2c, &data_4354e8);
                        }
                        if ((*(arg1 + 0xd1) & 2) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435398);
                        }
                        if ((*(arg1 + 0xd1) & 4) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435494);
                        }
                        if ((*(arg1 + 0xd1) & 8) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435488);
                        }
                        if ((*(arg1 + 0xd1) & 0x10) != 0)
                        {
                            CString::operator+=(&var_2c, &data_43538c);
                        }
                        if ((*(arg1 + 0xd1) & 0x20) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435384);
                        }
                        if ((*(arg1 + 0xd1) & 0x40) != 0)
                        {
                            CString::operator+=(&var_2c, &data_43537c);
                        }
                        if ((*(arg1 + 0xd0) & 0x8000) != 0)
                        {
                            CString::operator+=(&var_2c, &data_435374);
                        }
                    }
                    int32_t ecx_94;
                    ecx_94 = *(arg1 + 0xbe);
                    var_40_9 = var_2c;
                    var_48_5 = ecx_94;
                }
                else
                {
                    bool cond:5_1 = eax_20 != 6;
                    eax_20 = data_435fd4;
                    if (cond:5_1)
                    {
                        if (eax_20 == 2)
                        {
                            var_40_9 = "InValid Save";
                            goto label_41d026;
                        }
                        var_40_9 = &data_4352e8;
                        int32_t ecx_95;
                        ecx_95 = *(arg1 + 0xbe);
                        var_48_5 = ecx_95;
                    }
                    else
                    {
                        if (eax_20 != 2)
                        {
                            var_40_9 = &data_435300;
                            goto label_41d026;
                        }
                        var_40_9 = "TIME Mode";
                        int32_t eax_24;
                        eax_24 = *(arg1 + 0xbe);
                        var_48_5 = eax_24;
                    }
                }
            }
            else
            {
                if (data_435fd4 != 2)
                {
                    var_40_9 = &data_435554;
                    goto label_41d026;
                }
                var_40_9 = "Stop Chg&Dsg";
                int32_t eax_22;
                eax_22 = *(arg1 + 0xbe);
                var_48_5 = eax_22;
            }
        }
        else if (data_435fd4 != 2)
        {
            var_40_9 = &data_435584;
            int32_t ecx_19;
            ecx_19 = *(arg1 + 0xbe);
            var_48_5 = ecx_19;
        }
        else
        {
            var_40_9 = "Start Chg";
        label_41d026:
            int32_t edx_13;
            edx_13 = *(arg1 + 0xbe);
            var_48_5 = edx_13;
        }
        CListCtrl::SetItemText((arg1 + 0x170), var_48_5, 2, var_40_9);
        int32_t eax_25;
        eax_25 = *(arg1 + 0xc6);
        int32_t var_28_1 = eax_25;
        CString::Format(&var_2c, "%0.2f");
        int32_t eax_26;
        eax_26 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_26, 3, var_2c);
        int32_t eax_27;
        eax_27 = *(arg1 + 0xc8);
        CString* var_4c_3;
        void* var_48_7;
        if ((0x8000 & eax_27) == 0)
        {
            int32_t var_28_3 = (eax_27 & 0xffff);
            var_48_7 = "%0.2f";
            var_4c_3 = &var_2c;
        }
        else
        {
            int32_t var_28_2 = (0x10000 - (eax_27 & 0xffff));
            var_48_7 = "-%0.2f";
            var_4c_3 = &var_2c;
        }
        CString::Format(var_4c_3, var_48_7);
        int32_t edx_15;
        edx_15 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), edx_15, 4, var_2c);
        int32_t eax_30;
        eax_30 = *(arg1 + 0xca);
        int32_t var_28_4 = eax_30;
        CString::Format(&var_2c, "%0.2f");
        int32_t eax_31;
        eax_31 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_31, 5, var_2c);
        int32_t ecx_102;
        ecx_102 = *(arg1 + 0xcc);
        int32_t var_28_5 = ecx_102;
        CString::Format(&var_2c, "%0.2f");
        int32_t ecx_103;
        ecx_103 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), ecx_103, 6, var_2c);
        int32_t edx_17;
        edx_17 = *(arg1 + 0xda);
        int32_t var_28_6 = edx_17;
        CString::Format(&var_2c, "%0.3f");
        int32_t edx_18;
        edx_18 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), edx_18, 7, var_2c);
        int32_t eax_33;
        eax_33 = *(arg1 + 0xde);
        int32_t var_40_17 = eax_33;
        CString::Format(&var_2c, &data_431074);
        int32_t eax_34;
        eax_34 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_34, 8, var_2c);
        int32_t ecx_108;
        ecx_108 = *(arg1 + 0xdc);
        int32_t var_28_7 = ecx_108;
        CString::Format(&var_2c, "%0.3f");
        int32_t ecx_109;
        ecx_109 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), ecx_109, 9, var_2c);
        int32_t edx_20;
        edx_20 = *(arg1 + 0xdf);
        int32_t var_40_20 = edx_20;
        CString::Format(&var_2c, &data_431074);
        int32_t edx_21;
        edx_21 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), edx_21, 0xa, var_2c);
        int32_t eax_36;
        eax_36 = *(arg1 + 0xd2);
        int32_t var_28_8 = (eax_36 - 0xaab);
        CString::Format(&var_2c, "%0.1f");
        int32_t eax_38;
        eax_38 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_38, 0xb, var_2c);
        int32_t ecx_114;
        ecx_114 = *(arg1 + 0xd4);
        int32_t var_28_9 = (ecx_114 - 0xaab);
        CString::Format(&var_2c, "%0.1f");
        int32_t ecx_116;
        ecx_116 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), ecx_116, 0xc, var_2c);
        char eax_40 = *(arg1 + 0xe0);
        void* var_40_24;
        if ((eax_40 & 4) == 0)
        {
            eax_40 = (eax_40 & 3);
            if (eax_40 == 0)
            {
                var_40_24 = "ALL OFF";
                goto label_41d350;
            }
            if (eax_40 == 1)
            {
                var_40_24 = "DSG OFF";
                goto label_41d350;
            }
            if (eax_40 == 2)
            {
                var_40_24 = "CHG OFF";
                goto label_41d350;
            }
            if (eax_40 == 3)
            {
                var_40_24 = "ALL ON";
                goto label_41d350;
            }
        }
        else
        {
            var_40_24 = "PChg ON";
        label_41d350:
            CString::operator=(&var_2c, var_40_24);
        }
        int32_t eax_41;
        eax_41 = *(arg1 + 0xbe);
        CListCtrl::SetItemText((arg1 + 0x170), eax_41, 0xd, var_2c);
    }
    if (eax_1 == 0)
    {
        eax_1 = data_435fd4;
        int32_t var_40_3 = 0x20;
        var_44 = &data_431a68;
        if (eax_1 == 2)
        {
            var_48 = "Read ALL Over.";
        }
        else
        {
            var_48 = &data_4355bc;
        }
    }
    if (eax_1 == 4)
    {
        eax_1 = data_435fd4;
        int32_t var_40_2 = 0x20;
        var_44 = "ERROR";
        if (eax_1 == 2)
        {
            var_48 = "Read error";
        }
        else
        {
            var_48 = &data_4355d4;
        }
    }
    if (eax_1 == 3)
    {
        eax_1 = data_435fd4;
        int32_t var_40_1 = 0x20;
        var_44 = &data_431a68;
        if (eax_1 == 2)
        {
            var_48 = "NO valid data Save, Data is Null";
        }
        else
        {
            var_48 = &data_435608;
        }
    }
    if ((((eax_1 == 1 || eax_1 == 3) || eax_1 == 4) || eax_1 == 0))
    {
        CWnd::MessageBoxA(arg1, var_48, var_44, 0x20);
        CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x544), 1);
        CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x545), 1);
        CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x546), 1);
    }
    int32_t var_c_2 = 0xffffffff;
    CString::~CString(&var_2c);
    *fsbase = var_14;
    var_4;
    return 0;
}

int32_t __thiscall sub_41d3a0(CWnd* arg1, int32_t arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429428;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_30;
    CString::CString(&var_30);
    int32_t var_4 = 0;
    int32_t eax_2;
    HANDLE eax_4;
    if (arg2 == 1)
    {
        eax_2 = sub_404a90();
        if (eax_2 != 0)
        {
            KillTimer(*(arg1 + 0x20), 1);
            sub_404a70();
            eax_4 = sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0);
            if (eax_4 != 0)
            {
                int32_t eax_5 = data_4360f8;
                char var_3c_1;
                if (eax_5 == 0)
                {
                    var_3c_1 = 0x4e;
                }
                if (eax_5 == 1)
                {
                    var_3c_1 = 0x4f;
                }
                if (eax_5 == 2)
                {
                    var_3c_1 = 0x45;
                }
                if (((eax_5 == 0 || eax_5 == 1) || eax_5 == 2))
                {
                    sub_416890(&data_4360b0, var_3c_1);
                    eax_5 = data_4360f8;
                }
                char var_3c_2;
                if (eax_5 == 0)
                {
                    var_3c_2 = 0x4e;
                }
                if (eax_5 == 1)
                {
                    var_3c_2 = 0x4f;
                }
                if (eax_5 == 2)
                {
                    var_3c_2 = 0x45;
                }
                if (((eax_5 == 0 || eax_5 == 1) || eax_5 == 2))
                {
                    sub_416890(&data_4360b0, var_3c_2);
                }
                int16_t lpSystemTime;
                GetLocalTime(&lpSystemTime);
                int16_t var_20;
                uint32_t ecx_3 = var_20;
                char var_1c = 7;
                char var_1b_1 = 6;
                int32_t edx_5;
                edx_5 = ((ecx_3 / 0xa) << 4);
                int32_t eax_10;
                int32_t edx_6;
                edx_6 = HIGHD(ecx_3);
                eax_10 = LOWD(ecx_3);
                int16_t var_22;
                uint32_t ecx_5 = var_22;
                char var_1a_1 = (edx_5 + (COMBINE(edx_6, eax_10) % 0xa));
                int32_t edx_10;
                edx_10 = ((ecx_5 / 0xa) << 4);
                int32_t eax_16;
                int32_t edx_11;
                edx_11 = HIGHD(ecx_5);
                eax_16 = LOWD(ecx_5);
                int16_t var_24;
                uint32_t ecx_7 = var_24;
                char var_19_1 = (edx_10 + (COMBINE(edx_11, eax_16) % 0xa));
                int32_t edx_15;
                edx_15 = ((ecx_7 / 0xa) << 4);
                int32_t eax_22;
                int32_t edx_16;
                edx_16 = HIGHD(ecx_7);
                eax_22 = LOWD(ecx_7);
                int16_t var_26;
                uint32_t ecx_9 = var_26;
                char var_18_1 = ((edx_15 + (COMBINE(edx_16, eax_22) % 0xa)) | 0x80);
                int32_t edx_20;
                edx_20 = ((ecx_9 / 0xa) << 4);
                int32_t eax_28;
                int32_t edx_21;
                edx_21 = HIGHD(ecx_9);
                eax_28 = LOWD(ecx_9);
                int16_t var_2a;
                uint32_t ecx_11 = var_2a;
                char var_17_1 = (edx_20 + (COMBINE(edx_21, eax_28) % 0xa));
                int32_t edx_25;
                edx_25 = ((ecx_11 / 0xa) << 4);
                int32_t eax_34;
                int32_t edx_26;
                edx_26 = HIGHD(ecx_11);
                eax_34 = LOWD(ecx_11);
                lpSystemTime = (lpSystemTime - 0x7d0);
                uint32_t ecx_13 = lpSystemTime;
                char var_16_1 = (edx_25 + (COMBINE(edx_26, eax_34) % 0xa));
                int32_t edx_30;
                edx_30 = ((ecx_13 / 0xa) << 4);
                int32_t eax_40;
                int32_t edx_31;
                edx_31 = HIGHD(ecx_13);
                eax_40 = LOWD(ecx_13);
                char var_15_1 = (edx_30 + (COMBINE(edx_31, eax_40) % 0xa));
                bool cond:1_1 = sub_41f3b0(&data_4360b0, 0xe3, &var_1c) == 0;
                int32_t eax_42;
                eax_42 = data_435fd4;
                char* var_3c_5;
                if (cond:1_1)
                {
                    if (eax_42 == 2)
                    {
                        var_3c_5 = "Set Time Error, Please Retry!";
                    }
                    else
                    {
                        var_3c_5 = &data_4356b4;
                    }
                }
                else if (eax_42 == 2)
                {
                    var_3c_5 = "Set Time Sucess!";
                }
                else
                {
                    var_3c_5 = &data_4356e0;
                }
                CString::operator=(&var_30, var_3c_5);
                sub_416a40(&data_4360b0);
                sub_404a80();
                CWnd::MessageBoxA(arg1, var_30, "Prompt", 0x40);
            }
        }
        else if ((GetTickCount() - *(arg1 + 0x60)) > 0xbb8)
        {
            KillTimer(*(arg1 + 0x20), 1);
            CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
        }
    }
    int32_t eax_46;
    HANDLE eax_49;
    if (arg2 == 2)
    {
        eax_46 = sub_404a90();
        if (eax_46 != 0)
        {
            KillTimer(*(arg1 + 0x20), 2);
            sub_404a70();
            eax_49 = sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0);
        }
    }
    if ((((arg2 == 1 && eax_2 != 0) && eax_4 == 0) || ((arg2 == 2 && eax_46 != 0) && eax_49 == 0)))
    {
        CWnd::MessageBoxA(arg1, &data_434df4, "Error", 0x10);
        sub_404a80();
    }
    int32_t esi;
    if (arg2 == 2)
    {
        if ((eax_46 != 0 && eax_49 != 0))
        {
            int32_t eax_50 = data_4360f8;
            char var_3c_6;
            if (eax_50 == 0)
            {
                var_3c_6 = 0x4e;
            }
            if (eax_50 == 1)
            {
                var_3c_6 = 0x4f;
            }
            if (eax_50 == 2)
            {
                var_3c_6 = 0x45;
            }
            if (((eax_50 == 0 || eax_50 == 1) || eax_50 == 2))
            {
                sub_416890(&data_4360b0, var_3c_6);
            }
            bool cond:0_1 = sub_41edb0(esi, &data_4360b0, 0xe4, 0x5aa5) == 0;
            int32_t eax_51;
            eax_51 = data_435fd4;
            char* var_3c_7;
            if (cond:0_1)
            {
                if (eax_51 == 2)
                {
                    var_3c_7 = "Clear Data Error,Please retry!";
                }
                else
                {
                    var_3c_7 = &data_435658;
                }
            }
            else if (eax_51 == 2)
            {
                var_3c_7 = "Clear Data Sucess!";
            }
            else
            {
                var_3c_7 = &data_435684;
            }
            CString::operator=(&var_30, var_3c_7);
            sub_416a40(&data_4360b0);
            sub_404a80();
            CWnd::MessageBoxA(arg1, var_30, "Prompt", 0x40);
        }
        if ((eax_46 == 0 && (GetTickCount() - *(arg1 + 0x60)) > 0xbb8))
        {
            KillTimer(*(arg1 + 0x20), 2);
            CWnd::MessageBoxA(arg1, &data_4312e8, "Error", 0x10);
        }
    }
    if (((arg2 != 1 && arg2 != 2) && arg2 == 3))
    {
        if (sub_404a90() == 0)
        {
            if ((GetTickCount() - *(arg1 + 0x60)) > 0x1388)
            {
                KillTimer(*(arg1 + 0x20), 3);
                if (data_435fd4 == 0)
                {
                    CWnd::MessageBoxA(arg1, &data_431a44, &data_43116c, 0x20);
                }
                if (data_435fd4 == 1)
                {
                    CWnd::MessageBoxA(arg1, &data_431a28, &data_431150, 0x20);
                }
                if (data_435fd4 == 2)
                {
                    CWnd::MessageBoxA(arg1, "The communication port is occupi…", "ERROR", 0x20);
                }
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x544), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x545), 1);
                CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x546), 1);
            }
        }
        else
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 3);
            int32_t eax_56;
            if (arg1 != 0)
            {
                eax_56 = *(arg1 + 0x20);
            }
            else
            {
                eax_56 = 0;
            }
            *(arg1 + 0x70) = eax_56;
            *(arg1 + 0x68) = (arg1 + 0x104);
            *(arg1 + 0x78) = (arg1 + 0x100);
            int32_t var_3c_8 = esi;
            *(arg1 + 0x80) = data_4360b4;
            *(arg1 + 0x84) = data_4360b8;
            __builtin_memcpy((arg1 + 0x88), 0x4360bc, 0x14);
            __builtin_memcpy((arg1 + 0x9c), 0x4360d0, 0x14);
            *(arg1 + 0xb0) = data_4360e4;
            *(arg1 + 0xb4) = data_4360e8;
            *(arg1 + 0xb8) = data_433b18;
            data_4360ec = AfxBeginThread(sub_422200, (arg1 + 0x68), 0, 0, 0, nullptr);
        }
    }
    CWnd::Default(arg1);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_65 = CString::~CString(&var_30);
    *fsbase = var_c;
    return eax_65;
}

int32_t __fastcall sub_41d960(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429574;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_2cc = 0;
    int32_t ebp;
    int32_t var_2d0 = ebp;
    int32_t esi;
    int32_t var_2d4 = esi;
    int32_t edi;
    int32_t var_2d8 = edi;
    CWnd* var_2a8 = arg1;
    int32_t var_2c0;
    CString::CString(&var_2c0);
    int32_t var_4 = 0;
    char* var_2b8;
    CString::CString(&var_2b8);
    var_4 = 1;
    void var_2c8;
    CString::CString(&var_2c8);
    var_4 = 2;
    void* var_2c4;
    CString::CString(&var_2c4);
    var_4 = 3;
    void var_254;
    CFileFind::CFileFind(&var_254);
    var_4 = 4;
    void var_2a4;
    CStdioFile::CStdioFile(&var_2a4);
    int32_t lpSystemTime = 1;
    void var_238;
    __builtin_memcpy(&var_238, "Data files(*.xls)|*.xls|All file…", 0x2c);
    var_4 = 5;
    char* esi_1;
    char* edi_1;
    *edi_1 = *esi_1;
    CWnd::UpdateData(arg1, lpSystemTime);
    int32_t var_264;
    lpSystemTime = &var_264;
    GetLocalTime(lpSystemTime);
    int16_t eax_1 = var_264;
    int16_t lpSystemTime_1;
    lpSystemTime = lpSystemTime_1;
    int16_t var_262;
    uint32_t var_2e0 = var_262;
    uint32_t var_2e4 = eax_1;
    int32_t var_2e8 = 0x435844;
    CString::Format(&var_2b8, &data_435844);
    char* eax_3 = var_2b8;
    lpSystemTime = 0;
    var_2e0 = &var_238;
    int32_t var_2e4_1 = 0x802006;
    void* var_2ec_1 = &data_433e64;
    int32_t var_2f0 = 0;
    void var_208;
    CFileDialog::CFileDialog(&var_208, 0, &data_433e64, eax_3, 0x802006, var_2e0, lpSystemTime);
    int32_t* esp_1 = &var_2d8;
    var_4 = 6;
    uint32_t eax_4 = GetVersion();
    int32_t var_1a8 = (((eax_4 - eax_4) & 0xc) + 0x4c);
    int32_t eax_8 = CFileDialog::DoModal(&var_208);
    int32_t eax_19;
    if (eax_8 == 1)
    {
        void var_2bc;
        lpSystemTime = &var_2bc;
        var_2e0 = CFileDialog::GetFileName(&var_208);
        var_8 = 7;
        CString::operator=(&var_2c4, var_2e0);
        esp_1 = &lpSystemTime;
        var_8 = 6;
        CString::~CString(&var_2c0);
        if (*(var_2c4 - 8) != 0)
        {
            var_2e0 = 0x435ef0;
            void var_2b4;
            CString::CString(&var_2b4, var_2e0);
            var_2e0 = &var_2c0;
            var_8 = 9;
            int32_t var_190;
            var_2c0 = var_190;
            CFileDialog var_20c;
            class CString* eax_12 = CFileDialog::GetNextPathName(&var_20c, &var_2b8);
            var_c = 0xa;
            CString::operator+=(&var_2b8, eax_12);
            uint32_t* esp_2 = &var_2e0;
            var_c = 9;
            CString::~CString(&var_2bc);
            if (var_2c4 != 0)
            {
                do
                {
                    *(esp_2 - 4) = &esp_2[7];
                    *(esp_2 - 8) = &esp_2[0xb];
                    *(esp_2 - 8) = CFileDialog::GetNextPathName(&esp_2[0x34]);
                    *(esp_2 - 0xc) = &data_431708;
                    *(esp_2 - 0x10) = &esp_2[8];
                    esp_2[0xb4] = 0xb;
                    *(esp_2 - 0xc) = operator+();
                    esp_2[0xb3] = 0xc;
                    CString::operator+=(&esp_2[8]);
                    esp_2 = (esp_2 - 8);
                    esp_2[0xb5] = 0xb;
                    CString::~CString(&esp_2[9]);
                    esp_2[0xb5] = 9;
                    CString::~CString(&esp_2[0xb]);
                } while (esp_2[7] != 0);
            }
            *(esp_2 - 4) = &esp_2[0xa];
            CString::operator=(&esp_2[6]);
            int32_t ecx_24 = esp_2[6];
            *(esp_2 - 4) = 0;
            *(esp_2 - 8) = 0x1002;
            *(esp_2 - 0xc) = ecx_24;
            eax_19 = CStdioFile::Open(&esp_2[0xd]);
            if (eax_19 == 0)
            {
                eax_19 = data_435fd4;
                *(esp_2 - 4) = 0x10;
                *(esp_2 - 8) = "Error";
                void* esp_214;
                if (eax_19 == 2)
                {
                    *(esp_2 - 0xc) = "Open File error!";
                    esp_214 = (esp_2 - 0xc);
                }
                else
                {
                    *(esp_2 - 0xc) = 0x435704;
                    esp_214 = (esp_2 - 0xc);
                }
                CWnd::MessageBoxA(arg1);
                esp_1 = (esp_214 + 0xc);
                CStdioFile::Close(&esp_1[0xd]);
                esp_1[0xb5] = 6;
                CString::~CString(&esp_1[0xa]);
            }
            else
            {
                CString::Empty(&esp_2[4]);
                void* esp_41;
                if (data_435fd4 == 2)
                {
                    *(esp_2 - 4) = "Time\t";
                    CString::operator=(&esp_2[4]);
                    *(esp_2 - 4) = "Type\t";
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = "Voltage\t";
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = "Current\t";
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = "RemainCap\t";
                    CString::operator+=(&esp_2[4]);
                    void* esp_51 = esp_2;
                    *(esp_51 - 4) = "FullCap\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MaxCell\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MaxCellNo\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MinCell\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MinCellNo\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MaxTemp\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MinTemp\t";
                    CString::operator+=((esp_51 + 0x10));
                    *(esp_51 - 4) = "MOS_STATUS\t";
                    esp_41 = (esp_51 - 4);
                }
                else
                {
                    *(esp_2 - 4) = 0x43583c;
                    CString::operator=(&esp_2[4]);
                    *(esp_2 - 4) = 0x435834;
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = 0x43582c;
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = 0x435824;
                    CString::operator+=(&esp_2[4]);
                    *(esp_2 - 4) = 0x435818;
                    CString::operator+=(&esp_2[4]);
                    void* esp_26 = esp_2;
                    *(esp_26 - 4) = 0x433f3c;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x43580c;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x435800;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x4357f4;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x4357e8;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x4357dc;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x4357d0;
                    CString::operator+=((esp_26 + 0x10));
                    *(esp_26 - 4) = 0x4357c4;
                    esp_41 = (esp_26 - 4);
                }
                CString::operator+=((esp_41 + 0x14));
                *esp_41 = &data_433f28;
                CString::operator+=((esp_41 + 0x14));
                void* eax_20 = *(esp_41 + 0x14);
                *esp_41 = *(eax_20 - 8);
                *(esp_41 - 4) = eax_20;
                CStdioFile::Write((esp_41 + 0x38));
                esp_1 = (esp_41 + 4);
                int16_t eax_21 = *(arg1 + 0xbc);
                if (eax_21 != 0)
                {
                    int32_t ebp_2 = 0;
                    if (eax_21 > 0)
                    {
                        int32_t edi_3 = (esp_1[0xc] + 0x170);
                        do
                        {
                            CString::Empty(&esp_1[4]);
                            *(esp_1 - 4) = 1;
                            uint32_t esi_4 = ebp_2;
                            *(esp_1 - 8) = esi_4;
                            *(esp_1 - 0xc) = &esp_1[0xb];
                            *(esp_1 - 8) = CListCtrl::GetItemText(edi_3);
                            esp_1[0xb4] = 0xd;
                            CString::operator=(&esp_1[4]);
                            esp_1[0xb4] = 9;
                            CString::~CString(&esp_1[0xa]);
                            *(esp_1 - 8) = &esp_1[4];
                            CString::operator=(&esp_1[3]);
                            *(esp_1 - 8) = 9;
                            CString::operator+=(&esp_1[3]);
                            *(esp_1 - 8) = 2;
                            *(esp_1 - 0xc) = esi_4;
                            *(esp_1 - 0x10) = &esp_1[8];
                            *(esp_1 - 0xc) = CListCtrl::GetItemText(edi_3);
                            esp_1[0xb3] = 0xe;
                            CString::operator=(&esp_1[3]);
                            esp_1[0xb3] = 9;
                            CString::~CString(&esp_1[7]);
                            *(esp_1 - 0xc) = &esp_1[3];
                            CString::operator+=(&esp_1[2]);
                            *(esp_1 - 0xc) = 9;
                            void* esp_90;
                            CString::operator+=((esp_90 + 0x10));
                            *(esp_90 - 4) = 3;
                            *(esp_90 - 8) = esi_4;
                            *(esp_90 - 0xc) = (esp_90 + 0x54);
                            *(esp_90 - 8) = CListCtrl::GetItemText(edi_3);
                            *(esp_90 + 0x2d0) = 0xf;
                            CString::operator=((esp_90 + 0x10));
                            *(esp_90 + 0x2d0) = 9;
                            CString::~CString((esp_90 + 0x50));
                            *(esp_90 - 8) = (esp_90 + 0x10);
                            CString::operator+=((esp_90 + 0xc));
                            *(esp_90 - 8) = 9;
                            CString::operator+=((esp_90 + 0xc));
                            *(esp_90 - 8) = 4;
                            *(esp_90 - 0xc) = esi_4;
                            void* esp_106 = (esp_90 - 0xc);
                            *(esp_106 - 4) = (esp_90 + 0x60);
                            *esp_106 = CListCtrl::GetItemText(edi_3);
                            *(esp_106 + 0x2d8) = 0x10;
                            CString::operator=((esp_106 + 0x18));
                            *(esp_106 + 0x2d8) = 9;
                            CString::~CString((esp_106 + 0x68));
                            *esp_106 = (esp_106 + 0x18);
                            CString::operator+=((esp_106 + 0x14));
                            *esp_106 = 9;
                            CString::operator+=((esp_106 + 0x14));
                            *esp_106 = 5;
                            *(esp_106 - 4) = esi_4;
                            *(esp_106 - 8) = (esp_106 + 0x70);
                            *(esp_106 - 4) = CListCtrl::GetItemText(edi_3);
                            *(esp_106 + 0x2d4) = 0x11;
                            CString::operator=((esp_106 + 0x14));
                            *(esp_106 + 0x2d4) = 9;
                            CString::~CString((esp_106 + 0x6c));
                            *(esp_106 - 4) = (esp_106 + 0x14);
                            CString::operator+=((esp_106 + 0x10));
                            *(esp_106 - 4) = 9;
                            CString::operator+=((esp_106 + 0x10));
                            *(esp_106 - 4) = 6;
                            void* esp_122;
                            *(esp_122 - 8) = esi_4;
                            *(esp_122 - 0xc) = (esp_122 + 0x48);
                            *(esp_122 - 8) = CListCtrl::GetItemText(edi_3);
                            *(esp_122 + 0x2d0) = 0x12;
                            CString::operator=((esp_122 + 0x10));
                            *(esp_122 + 0x2d0) = 9;
                            CString::~CString((esp_122 + 0x44));
                            *(esp_122 - 8) = (esp_122 + 0x10);
                            CString::operator+=((esp_122 + 0xc));
                            *(esp_122 - 8) = 9;
                            CString::operator+=((esp_122 + 0xc));
                            *(esp_122 - 8) = 7;
                            *(esp_122 - 0xc) = esi_4;
                            *(esp_122 - 0x10) = (esp_122 + 0x5c);
                            void* esp_138 = (esp_122 - 8);
                            *(esp_138 - 4) = CListCtrl::GetItemText(edi_3);
                            *(esp_138 + 0x2d4) = 0x13;
                            CString::operator=((esp_138 + 0x14));
                            *(esp_138 + 0x2d4) = 9;
                            CString::~CString((esp_138 + 0x60));
                            *(esp_138 - 4) = (esp_138 + 0x14);
                            CString::operator+=((esp_138 + 0x10));
                            *(esp_138 - 4) = 9;
                            CString::operator+=((esp_138 + 0x10));
                            *(esp_138 - 4) = 8;
                            *(esp_138 - 8) = esi_4;
                            *(esp_138 - 0xc) = (esp_138 + 0x5c);
                            *(esp_138 - 8) = CListCtrl::GetItemText(edi_3);
                            *(esp_138 + 0x2d0) = 0x14;
                            CString::operator=((esp_138 + 0x10));
                            *(esp_138 + 0x2d0) = 9;
                            CString::~CString((esp_138 + 0x58));
                            *(esp_138 - 8) = (esp_138 + 0x10);
                            CString::operator+=((esp_138 + 0xc));
                            *(esp_138 - 8) = 9;
                            CString::operator+=((esp_138 + 0xc));
                            *(esp_138 - 8) = 9;
                            *(esp_138 - 0xc) = esi_4;
                            *(esp_138 - 0x10) = (esp_138 + 0x64);
                            *(esp_138 - 0xc) = CListCtrl::GetItemText(edi_3);
                            *(esp_138 + 0x2cc) = 0x15;
                            CString::operator=((esp_138 + 0xc));
                            *(esp_138 + 0x2cc) = 9;
                            CString::~CString((esp_138 + 0x60));
                            *(esp_138 - 0xc) = (esp_138 + 0xc);
                            CString::operator+=((esp_138 + 8));
                            *(esp_138 - 0xc) = 9;
                            CString::operator+=((esp_138 + 8));
                            *(esp_138 - 0xc) = 0xa;
                            *(esp_138 - 0x10) = esi_4;
                            *(esp_138 - 0x14) = (esp_138 + 0x68);
                            *(esp_138 - 0x10) = CListCtrl::GetItemText(edi_3);
                            *(esp_138 + 0x2c8) = 0x16;
                            CString::operator=((esp_138 + 8));
                            *(esp_138 + 0x2c8) = 9;
                            CString::~CString((esp_138 + 0x64));
                            *(esp_138 - 0x10) = (esp_138 + 8);
                            CString::operator+=((esp_138 + 4));
                            *(esp_138 - 0x10) = 9;
                            void* esp_170;
                            CString::operator+=((esp_170 + 0x10));
                            *(esp_170 - 4) = 0xb;
                            *(esp_170 - 8) = esi_4;
                            *(esp_170 - 0xc) = (esp_170 + 0x4c);
                            *(esp_170 - 8) = CListCtrl::GetItemText(edi_3);
                            *(esp_170 + 0x2d0) = 0x17;
                            CString::operator=((esp_170 + 0x10));
                            *(esp_170 + 0x2d0) = 9;
                            CString::~CString((esp_170 + 0x48));
                            *(esp_170 - 8) = (esp_170 + 0x10);
                            CString::operator+=((esp_170 + 0xc));
                            *(esp_170 - 8) = 9;
                            CString::operator+=((esp_170 + 0xc));
                            *(esp_170 - 8) = 0xc;
                            *(esp_170 - 0xc) = esi_4;
                            void* esp_186 = (esp_170 - 0xc);
                            *(esp_186 - 4) = (esp_170 + 0x4c);
                            int32_t eax_41 = CListCtrl::GetItemText(edi_3);
                            *(esp_186 + 0x2d8) = 0x18;
                            *esp_186 = eax_41;
                            CString::operator=((esp_186 + 0x18));
                            *(esp_186 + 0x2d8) = 9;
                            CString::~CString((esp_186 + 0x54));
                            *esp_186 = (esp_186 + 0x18);
                            CString::operator+=((esp_186 + 0x14));
                            *esp_186 = 9;
                            CString::operator+=((esp_186 + 0x14));
                            *esp_186 = 0xd;
                            *(esp_186 - 4) = esi_4;
                            *(esp_186 - 8) = (esp_186 + 0x5c);
                            *(esp_186 - 4) = CListCtrl::GetItemText(edi_3);
                            *(esp_186 + 0x2d4) = 0x19;
                            CString::operator=((esp_186 + 0x14));
                            *(esp_186 + 0x2d4) = 9;
                            CString::~CString((esp_186 + 0x58));
                            *(esp_186 - 4) = (esp_186 + 0x14);
                            CString::operator+=((esp_186 + 0x10));
                            *(esp_186 - 4) = 9;
                            CString::operator+=((esp_186 + 0x10));
                            *(esp_186 - 4) = 0xa;
                            void* esp_202;
                            CString::operator+=((esp_202 + 0x10));
                            int32_t edx_13 = *(esp_202 + 0x34);
                            *(esp_202 - 4) = 2;
                            *(esp_202 - 8) = 0;
                            *(edx_13 + 0x30)();
                            void* eax_44 = *(esp_202 + 0x44);
                            *(esp_202 + 0x30) = *(eax_44 - 8);
                            *(esp_202 + 0x2c) = eax_44;
                            CStdioFile::Write((esp_202 + 0x68));
                            esp_1 = (esp_202 + 0x34);
                            ebp_2 = (ebp_2 + 1);
                        } while (ebp_2 < *(esp_1[0xc] + 0xbc));
                    }
                }
                else
                {
                    eax_21 = data_435fd4;
                    *(esp_1 - 4) = 0x10;
                    *(esp_1 - 8) = "Error";
                    if (eax_21 == 2)
                    {
                        *(esp_1 - 0xc) = "Data is null!";
                        CWnd::MessageBoxA(arg1);
                    }
                    else
                    {
                        *(esp_1 - 0xc) = 0x435724;
                        CWnd::MessageBoxA(arg1);
                    }
                }
                CStdioFile::Close(&esp_1[0xd]);
                esp_1[0xb5] = 6;
                CString::~CString(&esp_1[0xa]);
                esp_1[0xb5] = 0x1a;
            }
        }
        else
        {
            var_8 = 8;
        }
    }
    if ((eax_8 != 1 || ((eax_8 == 1 && *(var_2c4 - 8) != 0) && eax_19 == 0)))
    {
        esp_1[0xb5] = 0x1b;
    }
    CString::~CString(&esp_1[0x60]);
    esp_1[0xb5] = 5;
    CDialog::~CDialog(&esp_1[0x34]);
    esp_1[0xb5] = 4;
    CStdioFile::~CStdioFile(&esp_1[0xd]);
    esp_1[0xb5] = 3;
    CFileFind::~CFileFind(&esp_1[0x21]);
    esp_1[0xb5] = 2;
    CString::~CString(&esp_1[5]);
    esp_1[0xb5] = 1;
    CString::~CString(&esp_1[4]);
    esp_1[0xb5] = 0;
    CString::~CString(&esp_1[8]);
    esp_1[0xb5] = 0xffffffff;
    int32_t eax_46 = CString::~CString(&esp_1[6]);
    *esp_1;
    esp_1[1];
    esp_1[2];
    esp_1[3];
    *fsbase = esp_1[0xb3];
    return eax_46;
}

int32_t __fastcall sub_41e2f0(CWnd* arg1)
{
    SendMessageA(*(arg1 + 0x190), 0x101c, 0xd, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 0xc, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 0xb, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 0xa, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 9, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 8, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 7, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 6, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 5, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 4, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 3, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 2, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, 1, nullptr);
    SendMessageA(*(arg1 + 0x190), 0x101c, nullptr, nullptr);
    int32_t eax_5;
    eax_5 = data_435fd4;
    if (eax_5 == 0)
    {
        CWnd::SetDlgItemTextA(arg1, 0x544, &data_435928);
        CWnd::SetDlgItemTextA(arg1, 0x545, &data_43591c);
        CWnd::SetDlgItemTextA(arg1, 0x546, &data_435910);
        CWnd::SetDlgItemTextA(arg1, 0x547, &data_435904);
        CListCtrl::InsertColumn((arg1 + 0x170), 0, &data_4342a8, 2, 0x32, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 1, &data_435280, 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 2, &data_435278, 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 3, &data_43526c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 4, &data_435260, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 5, &data_435254, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 6, &data_435248, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 7, &data_43523c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 8, &data_435230, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 9, &data_435224, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xa, &data_435218, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xb, &data_43520c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xc, &data_435200, 2, 0x46, 0);
        eax_5 = CListCtrl::InsertColumn((arg1 + 0x170), 0xd, &data_4351f8, 2, 0x4e, 0);
    }
    if (data_435fd4 == 1)
    {
        CWnd::SetDlgItemTextA(arg1, 0x544, &data_435928);
        CWnd::SetDlgItemTextA(arg1, 0x545, &data_43591c);
        CWnd::SetDlgItemTextA(arg1, 0x546, &data_435910);
        CWnd::SetDlgItemTextA(arg1, 0x547, &data_435904);
        CListCtrl::InsertColumn((arg1 + 0x170), 0, &data_4342a8, 2, 0x32, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 1, &data_435280, 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 2, &data_435278, 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 3, &data_43526c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 4, &data_435260, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 5, &data_435254, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 6, &data_435248, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 7, &data_43523c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 8, &data_435230, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 9, &data_435224, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xa, &data_435218, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xb, &data_43520c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xc, &data_435200, 2, 0x46, 0);
        eax_5 = CListCtrl::InsertColumn((arg1 + 0x170), 0xd, &data_4351f8, 2, 0x4e, 0);
    }
    if (data_435fd4 == 2)
    {
        CWnd::SetDlgItemTextA(arg1, 0x544, "Read history data");
        CWnd::SetDlgItemTextA(arg1, 0x545, "Set Rtc time");
        CWnd::SetDlgItemTextA(arg1, 0x546, "Clear data");
        CWnd::SetDlgItemTextA(arg1, 0x547, "Export File");
        CListCtrl::InsertColumn((arg1 + 0x170), 0, &data_434268, 2, 0x32, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 1, "Timer", 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 2, "TYPE", 2, 0x96, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 3, "Vol(V)", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 4, "Currnet(A)", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 5, &data_4358a0, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 6, &data_43589c, 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 7, "MaxCell", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 8, "MaxNO.", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 9, "MinCell", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xa, "MinNO.", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xb, "Maxtemp", 2, 0x46, 0);
        CListCtrl::InsertColumn((arg1 + 0x170), 0xc, "MinTemp", 2, 0x46, 0);
        eax_5 = CListCtrl::InsertColumn((arg1 + 0x170), 0xd, "MOSStatus", 2, 0x4e, 0);
    }
    return eax_5;
}

int32_t sub_41e860(char* arg1, char arg2)
{
    int32_t j_1;
    int32_t j_2 = j_1;
    j_1 = arg2;
    int32_t eax = 0xffff;
    char edx = j_1;
    j_1 = (j_1 - 1);
    if (edx == 0)
    {
        eax = 0xffff;
        return 0xffff;
    }
    char* edx_1 = arg1;
    int32_t i_1 = (j_1 + 1);
    int32_t var_4;
    int32_t i;
    do
    {
        j_1 = *edx_1;
        edx_1 = &edx_1[1];
        j_1 = j_1;
        eax = (eax ^ j_1);
        j_1 = 8;
        var_4 = eax;
        int32_t j;
        do
        {
            if ((var_4 & 1) == 0)
            {
                var_4 = (var_4 >> 1);
                eax = var_4;
            }
            else
            {
                eax = var_4;
                eax = (eax >> 1);
                eax = (eax ^ 0xa001);
                var_4 = eax;
            }
            j = j_1;
            j_1 = (j_1 - 1);
        } while (j != 1);
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    eax = var_4;
    return eax;
}

uint32_t sub_41e8e0(void* arg1)
{
    int32_t eax = data_433b10;
    int32_t ecx_1 = (data_433b0c + 1);
    uint32_t lpExitCode = 0;
    HANDLE eax_1;
    void* edi_1;
    eax_1 = sub_4165f0((arg1 + 0x20), ecx_1, eax, 0);
    if (eax_1 == 0)
    {
        **(arg1 + 0x1c) = 1;
        PostMessageA(*(arg1 + 0x10), 0x469, eax_1, eax_1);
    }
    else
    {
        int32_t eax_3 = data_4360f8;
        char __saved_ebp_2;
        if (eax_3 == 0)
        {
            __saved_ebp_2 = 0x4e;
        }
        if (eax_3 == 1)
        {
            __saved_ebp_2 = 0x4f;
        }
        if (eax_3 == 2)
        {
            __saved_ebp_2 = 0x45;
        }
        if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
        {
            sub_416890(edi_1, __saved_ebp_2);
        }
        **(arg1 + 0x1c) = 0xa;
        PostMessageA(*(arg1 + 0x10), 0x469, nullptr, nullptr);
        Sleep(0x64);
        char var_40;
        int32_t var_3f;
        if (sub_41f150(arg1, edi_1, 3, &var_40) != 0)
        {
            **(arg1 + 0x1c) = 0x28;
            *(*(arg1 + 0x14) + 0x54) = (var_3f * 0x101);
            *(*(arg1 + 0x14) + 0x58) = (var_3f * 0x101);
            int32_t var_3b;
            *(*(arg1 + 0x14) + 0x5c) = ((var_3b << 8) + *var_3b[1]);
            *(*(arg1 + 0x14) + 0x60) = ((*var_3b[2] << 8) + *var_3b[3]);
            int32_t var_37;
            *(*(arg1 + 0x14) + 0x74) = ((var_37 << 8) + *var_37[1]);
            uint32_t edx_21;
            edx_21 = *var_37[2];
            uint32_t eax_14;
            eax_14 = *var_37[3];
            *(*(arg1 + 0x14) + 0x7e) = ((edx_21 << 8) + eax_14);
            int32_t var_33;
            *(*(arg1 + 0x14) + 0x88) = ((var_33 << 8) + *var_33[1]);
            void* eax_17 = *(arg1 + 0x14);
            *(eax_17 + 0x88) = (*(eax_17 + 0x88) | (((*var_33[2] << 8) + *var_33[3]) << 0x10));
            char var_2f;
            uint32_t edx_32;
            edx_32 = var_2f;
            char var_2e;
            eax_17 = var_2e;
            *(*(arg1 + 0x14) + 0x80) = ((edx_32 << 8) + eax_17);
            char var_2d;
            *(*(arg1 + 0x14) + 0x7c) = var_2d;
            char var_2c;
            uint16_t edx_34;
            edx_34 = var_2c;
            *(*(arg1 + 0x14) + 0x70) = edx_34;
            char var_2b;
            void* ecx_18;
            ecx_18 = var_2b;
            *(*(arg1 + 0x14) + 0x8c) = ecx_18;
            char var_2a;
            void* eax_19;
            eax_19 = var_2a;
            *(*(arg1 + 0x14) + 0x50) = eax_19;
            char var_29;
            void* edx_35;
            edx_35 = var_29;
            *(*(arg1 + 0x14) + 0x51) = edx_35;
            edx_35 = var_29;
            void* i_4 = (edx_35 & 0xffff);
            void var_27;
            if (i_4 > 0)
            {
                void* eax_20 = &var_27;
                void* i;
                do
                {
                    void* ebx_1;
                    ebx_1 = *(eax_20 - 1);
                    BOOL (__stdcall* const ebp_1)(HWND hWnd, uint32_t Msg, WPARAM wParam, LPARAM lParam);
                    ebp_1 = *eax_20;
                    eax_20 = (eax_20 + 2);
                    i = i_4;
                    i_4 = (i_4 - 1);
                    *((eax_20 + (*(arg1 + 0x14) + (0x40 - &var_27))) - 2) = ((ebx_1 << 8) + ebp_1);
                } while (i != 1);
            }
            void* ecx_21 = *(arg1 + 0x14);
            uint32_t edx_37 = var_40;
            int32_t eax_21;
            eax_21 = *(ecx_21 + 0x51);
            int32_t eax_22 = (eax_21 << 1);
            void var_28;
            if (edx_37 == (eax_22 + 0x18))
            {
                edx_37 = *(&var_28 + eax_22);
                *(ecx_21 + 0x82) = edx_37;
            }
            else
            {
                void var_25;
                void var_24;
                void var_23;
                if (edx_37 == (eax_22 + 0x1d))
                {
                    int32_t edx_38;
                    edx_38 = *(&var_28 + eax_22);
                    int32_t ebx_5;
                    ebx_5 = *(&var_27 + eax_22);
                    *(ecx_21 + 0x68) = ((edx_38 << 8) + ebx_5);
                    void var_26;
                    int32_t ecx_22;
                    ecx_22 = *(&var_26 + eax_22);
                    int32_t edx_41;
                    edx_41 = *(&var_25 + eax_22);
                    *(*(arg1 + 0x14) + 0x64) = ((ecx_22 << 8) + edx_41);
                    int32_t ecx_24;
                    ecx_24 = *(&var_24 + eax_22);
                    void* edx_42;
                    edx_42 = *(&var_23 + eax_22);
                    *(*(arg1 + 0x14) + 0x84) = ((ecx_24 << 8) + edx_42);
                }
                else if (edx_37 == (eax_22 + 0x20))
                {
                    edx_37 = *(&var_28 + eax_22);
                    *(ecx_21 + 0x82) = edx_37;
                    int32_t ecx_27;
                    ecx_27 = *(&var_25 + eax_22);
                    int32_t edx_44;
                    edx_44 = *(&var_24 + eax_22);
                    *(*(arg1 + 0x14) + 0x68) = ((ecx_27 << 8) + edx_44);
                    int32_t ecx_30;
                    ecx_30 = *(&var_23 + eax_22);
                    void var_22;
                    int32_t edx_46;
                    edx_46 = *(&var_22 + eax_22);
                    *(*(arg1 + 0x14) + 0x64) = ((ecx_30 << 8) + edx_46);
                    void var_21;
                    int32_t ecx_32;
                    ecx_32 = *(&var_21 + eax_22);
                    void var_20;
                    void* edx_47;
                    edx_47 = *(&var_20 + eax_22);
                    *(*(arg1 + 0x14) + 0x84) = ((ecx_32 << 8) + edx_47);
                }
                else if (edx_37 > (eax_22 + 0x17))
                {
                    edx_37 = *(&var_28 + eax_22);
                    *(ecx_21 + 0xad) = edx_37;
                    edx_37 = *(&var_27 + eax_22);
                    *(*(arg1 + 0x14) + 0xae) = edx_37;
                }
            }
            uint32_t ecx_37 = var_40;
            if ((ecx_37 != (eax_22 + 0x1d) && ecx_37 != (eax_22 + 0x20)))
            {
                void* eax_24 = *(arg1 + 0x14);
                *(eax_24 + 0x68) = *(eax_24 + 0x60);
                void* eax_25 = *(arg1 + 0x14);
                *(eax_25 + 0x64) = *(eax_25 + 0x5c);
            }
        }
        sub_405320(0x1e);
        int32_t eax_26;
        uint32_t edx_51;
        eax_26 = sub_41f150(arg1, edi_1, 4, &var_40);
        if (eax_26 != 0)
        {
            int32_t i_1 = 0;
            **(arg1 + 0x1c) = 0x28;
            int32_t* ecx_39;
            ecx_39 = var_40;
            if ((ecx_39 & 0xfe) > 0)
            {
                do
                {
                    edx_51 = *(&var_3f + (i_1 << 1));
                    ecx_39 = *(&*var_3f[1] + (i_1 << 1));
                    *(*(arg1 + 0x14) + (i_1 << 1)) = ((edx_51 << 8) + ecx_39);
                    i_1 = (i_1 + 1);
                } while (i_1 < (var_40 >> 1));
            }
        }
        sub_405320(0x1e);
        if (sub_41f150(arg1, edi_1, 5, &var_40) != 0)
        {
            int32_t i_2 = 0;
            *(*(arg1 + 0x14) + 0x8d) = var_40;
            void* ecx_40;
            ecx_40 = var_40;
            if (ecx_40 > 0)
            {
                do
                {
                    *((*(arg1 + 0x14) + i_2) + 0x8e) = *(&var_3f + i_2);
                    i_2 = (i_2 + 1);
                } while (i_2 < var_40);
            }
        }
        if ((data_435fd0 != 0 && sub_41f150(arg1, edi_1, 6, &var_40) != 0))
        {
            *(*(arg1 + 0x14) + 0xaf) = var_40;
            int32_t i_3 = 0;
            if (var_40 > 0)
            {
                do
                {
                    *((*(arg1 + 0x14) + i_3) + 0xb0) = *(&var_3f + i_3);
                    i_3 = (i_3 + 1);
                } while (i_3 < var_40);
            }
        }
        PostMessageA(*(arg1 + 0x10), 0x469, nullptr, nullptr);
        PostMessageA(*(arg1 + 0x10), 0x464, nullptr, nullptr);
        sub_416a40(edi_1);
    }
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    AfxMessageBox(&data_435934, 0, 0);
    return 0;
}

int32_t sub_41edb0(int32_t arg1 @ esi, void* arg2, char arg3, int16_t arg4)
{
    char var_600 = 0;
    char s;
    __builtin_memset(&s, 0, 0x1fc);
    int16_t* edi;
    *edi = 0;
    edi[1] = 0;
    char var_200 = 0;
    void s_1;
    __builtin_memset(&s_1, 0, 0x1fc);
    int16_t* edi_3;
    *edi_3 = 0;
    edi_3[1] = 0;
    uint32_t ebx;
    ebx = arg4;
    void s_2;
    __builtin_memset(&s_2, 0, 0x1fc);
    int16_t* edi_6;
    *edi_6 = 0;
    ebx = (ebx >> 8);
    edi_6[1] = 0;
    char var_603 = 0;
    int16_t var_602 = ebx;
    int16_t ecx_6;
    do
    {
        sub_405320(0xa);
        char var_5fb = arg4;
        char var_5fe = arg3;
        int32_t ecx_2 = 0;
        var_600 = 0xdd;
        s = 0x5a;
        char var_5fd_1 = 2;
        char var_5fc_1 = ebx;
        char var_5f9_1 = 0;
        char var_5f8_1 = 0x77;
        int32_t i = 0;
        do
        {
            int32_t edx_1;
            edx_1 = &var_5fe[i];
            ecx_2 = (ecx_2 + edx_1);
            i = (i + 1);
        } while (i < 4);
        char var_5fa_1 = ((0x10000 - ecx_2) >> 8);
        char var_5f9_2 = (0x10000 - ecx_2);
        int32_t ebp_1 = 0;
        uint32_t eax_3;
        eax_3 = sub_416940(arg2, &var_600, 9);
        if (eax_3 != 0)
        {
            uint32_t eax_4 = GetTickCount();
            uint32_t eax_7;
            do
            {
                uint32_t eax_6 = sub_4169c0(arg2, &var_200, (7 - ebp_1));
                if (eax_6 > 0)
                {
                    int32_t __saved_edi;
                    __builtin_memcpy(((&__saved_edi + ebp_1) + 0x214), &var_200, ((eax_6 >> 2) << 2));
                    int32_t esi;
                    int32_t edi_10;
                    __builtin_memcpy(edi_10, esi, (eax_6 & 3));
                }
                ebp_1 = (ebp_1 + eax_6);
                if (ebp_1 == 7)
                {
                    int16_t var_3fe;
                    int32_t var_3fd;
                    eax_3 = ((0x10000 - var_3fd) - var_3fe);
                    if ((var_3fe & 0x80) == 0)
                    {
                        ecx_6 = var_3fd;
                        int32_t edx_5;
                        edx_5 = *eax_3[1];
                        if ((edx_5 == ecx_6 && eax_3 == *ecx_6[1]))
                        {
                            return 1;
                        }
                    }
                    break;
                }
                eax_7 = GetTickCount();
            } while ((eax_7 - eax_4) < 0x1f4);
            ebx = var_602;
        }
        eax_3 = var_603;
        ecx_6 = eax_3;
        eax_3 = (eax_3 + 1);
        var_603 = eax_3;
    } while (ecx_6 <= 1);
    return 0;
}

int32_t sub_41ef70(void* arg1, char arg2, uint32_t* arg3)
{
    char var_600 = 0;
    char s;
    __builtin_memset(&s, 0, 0x1fc);
    int16_t* edi;
    *edi = 0;
    edi[1] = 0;
    char var_200 = 0;
    void s_1;
    __builtin_memset(&s_1, 0, 0x1fc);
    int16_t* edi_3;
    *edi_3 = 0;
    edi_3[1] = 0;
    void s_2;
    __builtin_memset(&s_2, 0, 0x1fc);
    int32_t var_3fc;
    char esi = var_3fc;
    int16_t* edi_6;
    *edi_6 = 0;
    edi_6[1] = 0;
    char var_609 = 0;
    int32_t ecx_5;
    do
    {
        sub_405320(0xa);
        char var_5fe_1 = arg2;
        char var_5fc_1 = ((0x10000 - arg2) >> 8);
        uint32_t var_620_2 = 7;
        char* var_624_1 = &var_600;
        var_600 = 0xdd;
        s = 0xa5;
        char var_5fd_1 = 0;
        char var_5fa_1 = 0x77;
        char var_5fb = (0x10000 - arg2);
        int32_t ebp_1 = 0;
        uint32_t eax_2;
        eax_2 = sub_416940(arg1, var_624_1, var_620_2);
        if (eax_2 != 0)
        {
            uint32_t eax_3 = GetTickCount();
            uint32_t eax_6;
            do
            {
                uint32_t eax_5 = sub_4169c0(arg1, &var_200, (9 - ebp_1));
                if (eax_5 > 0)
                {
                    int32_t __saved_edi;
                    __builtin_memcpy(((&__saved_edi + ebp_1) + 0x21c), &var_200, ((eax_5 >> 2) << 2));
                    int32_t esi_1;
                    int32_t edi_10;
                    __builtin_memcpy(edi_10, esi_1, (eax_5 & 3));
                    esi = var_3fc;
                }
                ebp_1 = (ebp_1 + eax_5);
                if (ebp_1 == 9)
                {
                    int24_t var_3fb;
                    char edi_11 = var_3fb;
                    int32_t var_3fe;
                    char var_3fd;
                    eax_2 = ((((0x10000 - edi_11) - esi) - var_3fd) - var_3fe);
                    if ((var_3fe & 0x80) == 0)
                    {
                        ecx_5 = *eax_2[1];
                        if ((ecx_5 == *var_3fb[1] && eax_2 == *var_3fb[2]))
                        {
                            *arg3 = ((esi << 8) | edi_11);
                            return 1;
                        }
                    }
                    break;
                }
                eax_6 = GetTickCount();
            } while ((eax_6 - eax_3) < 0x1f4);
        }
        eax_2 = var_609;
        ecx_5 = eax_2;
        eax_2 = (eax_2 + 1);
        var_609 = eax_2;
    } while (ecx_5 <= 1);
    return 0;
}

int32_t sub_41f150(int32_t arg1 @ esi, void* arg2, char arg3, int32_t arg4)
{
    char var_100 = 0;
    char s_1;
    __builtin_memset(&s_1, 0, 0x7c);
    int16_t* edi;
    *edi = 0;
    edi[1] = 0;
    char var_180 = 0;
    void s;
    __builtin_memset(&s, 0, 0x7c);
    int16_t* edi_3;
    *edi_3 = 0;
    edi_3[1] = 0;
    char var_80 = 0;
    void s_2;
    __builtin_memset(&s_2, 0, 0x7c);
    int16_t* edi_6;
    *edi_6 = 0;
    edi_6[1] = 0;
    char var_189 = 0;
    int32_t ebx = (0x10000 - arg3);
    int32_t var_184 = ebx;
    while (true)
    {
        sub_405320(0xa);
        char var_fb = ebx;
        char var_fe_1 = arg3;
        uint32_t var_1a0_2 = 7;
        char* var_1a4_1 = &var_100;
        var_100 = 0xdd;
        s_1 = 0xa5;
        char var_fd_1 = 0;
        char var_fa_1 = 0x77;
        char var_fc_1 = (ebx >> 8);
        int32_t ebp_1 = 0;
        uint32_t eax_2;
        int32_t ecx_3;
        eax_2 = sub_416940(arg2, var_1a4_1, var_1a0_2);
        if (eax_2 != 0)
        {
            uint32_t eax_3 = GetTickCount();
            uint32_t eax_5;
            do
            {
                uint32_t eax_4 = sub_4169c0(arg2, &var_80, (4 - ebp_1));
                int32_t __saved_edi;
                if (eax_4 > 0)
                {
                    __builtin_memcpy(((&__saved_edi + ebp_1) + 0x1c), &var_80, ((eax_4 >> 2) << 2));
                    int32_t esi;
                    int32_t edi_10;
                    __builtin_memcpy(edi_10, esi, (eax_4 & 3));
                }
                ebp_1 = (ebp_1 + eax_4);
                if (ebp_1 == 4)
                {
                    uint32_t var_188_2 = GetTickCount();
                    char var_17d;
                    uint32_t eax_6;
                    eax_6 = var_17d;
                    uint32_t ebx_2;
                    if (eax_6 <= 0x64)
                    {
                        ebx_2 = var_17d;
                    }
                    else
                    {
                        ebx_2 = 0x64;
                    }
                    uint32_t eax_12;
                    do
                    {
                        uint32_t eax_10 = sub_4169c0(arg2, &var_80, ((ebx_2 - ebp_1) + 7));
                        if (eax_10 > 0)
                        {
                            __builtin_memcpy(((&__saved_edi + ebp_1) + 0x1c), &var_80, ((eax_10 >> 2) << 2));
                            int32_t esi_1;
                            int32_t edi_12;
                            __builtin_memcpy(edi_12, esi_1, (eax_10 & 3));
                        }
                        ebp_1 = (ebp_1 + eax_10);
                        if (ebp_1 == (ebx_2 + 7))
                        {
                            int32_t edi_13 = 0;
                            uint32_t esi_3 = var_17d;
                            int32_t i = 0;
                            char var_17e;
                            if ((esi_3 + 2) > 0)
                            {
                                do
                                {
                                    int32_t edx_5;
                                    edx_5 = &var_17e[i];
                                    edi_13 = (edi_13 + edx_5);
                                    i = (i + 1);
                                } while (i < (esi_3 + 2));
                            }
                            ecx_3 = var_17e;
                            if ((ecx_3 & 0x80) == 0)
                            {
                                void var_17c;
                                ecx_3 = *(&var_17c + esi_3);
                                int32_t edx_6;
                                edx_6 = *(0x10000 - edi_13)[1];
                                void var_17b;
                                if ((edx_6 == ecx_3 && (0x10000 - edi_13) == *(&var_17b + esi_3)))
                                {
                                    int32_t ecx_15 = (var_17d + 1);
                                    if (ecx_15 > 0)
                                    {
                                        __builtin_memcpy(arg4, &var_17d, ((ecx_15 >> 2) << 2));
                                        int32_t esi_4;
                                        int32_t edi_15;
                                        __builtin_memcpy(edi_15, esi_4, (ecx_15 & 3));
                                    }
                                    return 1;
                                }
                            }
                            break;
                        }
                        eax_12 = GetTickCount();
                    } while ((eax_12 - var_188_2) < 0x5dc);
                    break;
                }
                eax_5 = GetTickCount();
            } while ((eax_5 - eax_3) < 0x5dc);
        }
        eax_2 = var_189;
        ecx_3 = eax_2;
        eax_2 = (eax_2 + 1);
        var_189 = eax_2;
        if (ecx_3 > 1)
        {
            break;
        }
        ebx = var_184;
    }
    return 0;
}

int32_t sub_41f3b0(void* arg1, char arg2, int32_t arg3)
{
    char var_600 = 0;
    char s;
    __builtin_memset(&s, 0, 0x1fc);
    int16_t* edi;
    *edi = 0;
    edi[1] = 0;
    char var_200 = 0;
    void s_1;
    __builtin_memset(&s_1, 0, 0x1fc);
    int16_t* edi_3;
    *edi_3 = 0;
    edi_3[1] = 0;
    void s_2;
    __builtin_memset(&s_2, 0, 0x1fc);
    int16_t* edi_6;
    *edi_6 = 0;
    edi_6[1] = 0;
    char var_621 = 0;
    char var_620;
    __builtin_memcpy(&var_620, arg3, 0x20);
    int16_t ecx_8;
    do
    {
        sub_405320(0xa);
        char var_5fe = arg2;
        char eax_1 = var_620;
        var_600 = 0xdd;
        s = 0x5a;
        char var_5fd_1 = eax_1;
        if (eax_1 > 0x7f)
        {
            var_5fd_1 = 0x7f;
        }
        uint32_t eax_3 = var_5fd_1;
        if (eax_3 > 0)
        {
            void var_61f;
            void var_5fc;
            __builtin_memcpy(&var_5fc, &var_61f, ((eax_3 >> 2) << 2));
            int32_t esi_1;
            int32_t edi_9;
            __builtin_memcpy(edi_9, esi_1, (eax_3 & 3));
        }
        int32_t edx_2 = 0;
        int32_t i = 0;
        if ((eax_3 + 2) > 0)
        {
            do
            {
                int32_t ecx_5;
                ecx_5 = &var_5fe[i];
                edx_2 = (edx_2 + ecx_5);
                i = (i + 1);
            } while (i < (eax_3 + 2));
        }
        void var_603;
        *(&var_603 + (eax_3 + 7)) = ((0x10000 - (edx_2 & 0xffff)) >> 8);
        void var_602;
        *(&var_602 + (eax_3 + 7)) = (0x10000 - (edx_2 & 0xffff));
        void var_601;
        *(&var_601 + (eax_3 + 7)) = 0x77;
        int32_t ebp_1 = 0;
        uint32_t eax_5;
        eax_5 = sub_416940(arg1, &var_600, (eax_3 + 7));
        if (eax_5 != 0)
        {
            uint32_t eax_6 = GetTickCount();
            uint32_t eax_8;
            do
            {
                uint32_t eax_7 = sub_4169c0(arg1, &var_200, (7 - ebp_1));
                if (eax_7 > 0)
                {
                    int32_t __saved_edi;
                    __builtin_memcpy(((&__saved_edi + ebp_1) + 0x234), &var_200, ((eax_7 >> 2) << 2));
                    int32_t esi_2;
                    int32_t edi_12;
                    __builtin_memcpy(edi_12, esi_2, (eax_7 & 3));
                }
                ebp_1 = (ebp_1 + eax_7);
                if (ebp_1 == 7)
                {
                    int16_t var_3fe;
                    int32_t var_3fd;
                    eax_5 = ((0x10000 - var_3fd) - var_3fe);
                    if ((var_3fe & 0x80) == 0)
                    {
                        ecx_8 = var_3fd;
                        int32_t edx_9;
                        edx_9 = *eax_5[1];
                        if ((edx_9 == ecx_8 && eax_5 == *ecx_8[1]))
                        {
                            return 1;
                        }
                    }
                    break;
                }
                eax_8 = GetTickCount();
            } while ((eax_8 - eax_6) < 0x5dc);
        }
        eax_5 = var_621;
        ecx_8 = eax_5;
        eax_5 = (eax_5 + 1);
        var_621 = eax_5;
    } while (ecx_8 <= 1);
    return 0;
}

uint32_t sub_41f5a0(void* arg1)
{
    void* esi = arg1;
    uint8_t var_44 = 0;
    void s;
    __builtin_memset(&s, 0, 0x40);
    char var_50 = 0;
    uint32_t lpExitCode = 0;
    **(esi + 8) = 0;
    HANDLE eax_3 = sub_4165f0((esi + 0x1c), (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_3 == 0)
    {
        AfxMessageBox(&data_435938, eax_3, eax_3);
        **(esi + 0x14) = 0;
    }
    else
    {
        int32_t eax_4 = data_4360f8;
        char __saved_ebx_2;
        if (eax_4 == 0)
        {
            __saved_ebx_2 = 0x4e;
        }
        if (eax_4 == 1)
        {
            __saved_ebx_2 = 0x4f;
        }
        if (eax_4 == 2)
        {
            __saved_ebx_2 = 0x45;
        }
        if (((eax_4 == 0 || eax_4 == 1) || eax_4 == 2))
        {
            sub_416890((esi + 0x1c), __saved_ebx_2);
        }
        SendMessageA(*(*esi + 0x20), 0x401, nullptr, 0x320000);
        __builtin_memset(*(esi + 0x18), 0, 0x1b8);
        if (sub_41ef70((esi + 0x1c), 0, &arg1) == 0)
        {
            int32_t eax_6;
            eax_6 = data_43610a;
            if (eax_6 != 0)
            {
                if (sub_41ef70((esi + 0x1c), 0, &arg1) == 0)
                {
                    **(esi + 0x14) = 1;
                }
                else
                {
                    int32_t edx_3;
                    edx_3 = data_43610a;
                    if (arg1 == edx_3)
                    {
                        goto label_41f6cf;
                    }
                    **(esi + 0x14) = 1;
                }
            }
            else
            {
            label_41f6cf:
                int16_t var_64_5 = 0x5678;
                char var_68_5 = 0;
                *(esi + 0x14) = 0;
                if (sub_41edb0(esi, (esi + 0x1c), var_68_5, var_64_5) != 0)
                {
                    var_50 = 1;
                    SendMessageA(*(*esi + 0x20), 0x402, 1, nullptr);
                    if (sub_41ef70((esi + 0x1c), 0x10, &arg1) != 0)
                    {
                        LPARAM lParam = nullptr;
                        WPARAM wParam = 2;
                        **(esi + 0x18) = arg1;
                        var_50 = 2;
                        SendMessageA(*(*esi + 0x20), 0x402, wParam, lParam);
                        if (sub_41ef70((esi + 0x1c), 0x11, &arg1) != 0)
                        {
                            LPARAM lParam_1 = nullptr;
                            WPARAM wParam_1 = 3;
                            *(*(esi + 0x18) + 4) = arg1;
                            var_50 = 3;
                            SendMessageA(*(*esi + 0x20), 0x402, wParam_1, lParam_1);
                            if (sub_41ef70((esi + 0x1c), 0x12, &arg1) != 0)
                            {
                                LPARAM lParam_2 = nullptr;
                                WPARAM wParam_2 = 4;
                                *(*(esi + 0x18) + 8) = arg1;
                                var_50 = 4;
                                SendMessageA(*(*esi + 0x20), 0x402, wParam_2, lParam_2);
                                if (sub_41ef70((esi + 0x1c), 0x13, &arg1) != 0)
                                {
                                    LPARAM lParam_3 = nullptr;
                                    WPARAM wParam_3 = 5;
                                    *(*(esi + 0x18) + 0xc) = arg1;
                                    var_50 = 5;
                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_3, lParam_3);
                                    if (sub_41ef70((esi + 0x1c), 0x14, &arg1) != 0)
                                    {
                                        LPARAM lParam_4 = nullptr;
                                        WPARAM wParam_4 = 6;
                                        *(*(esi + 0x18) + 0x10) = arg1;
                                        var_50 = 6;
                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_4, lParam_4);
                                        if (sub_41ef70((esi + 0x1c), 0x15, &arg1) != 0)
                                        {
                                            LPARAM lParam_5 = nullptr;
                                            WPARAM wParam_5 = 7;
                                            *(*(esi + 0x18) + 0x14) = arg1;
                                            var_50 = 7;
                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_5, lParam_5);
                                            if (sub_41ef70((esi + 0x1c), 0x16, &arg1) != 0)
                                            {
                                                LPARAM lParam_6 = nullptr;
                                                WPARAM wParam_6 = 8;
                                                *(*(esi + 0x18) + 0x18) = arg1;
                                                var_50 = 8;
                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_6, lParam_6);
                                                if (sub_41ef70((esi + 0x1c), 0x17, &arg1) != 0)
                                                {
                                                    LPARAM lParam_7 = nullptr;
                                                    WPARAM wParam_7 = 9;
                                                    *(*(esi + 0x18) + 0x1c) = arg1;
                                                    var_50 = 9;
                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_7, lParam_7);
                                                    if (sub_41ef70((esi + 0x1c), 0x18, &arg1) != 0)
                                                    {
                                                        LPARAM lParam_8 = nullptr;
                                                        WPARAM wParam_8 = 0xa;
                                                        *(*(esi + 0x18) + 0x20) = arg1;
                                                        var_50 = 0xa;
                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_8, lParam_8);
                                                        if (sub_41ef70((esi + 0x1c), 0x19, &arg1) != 0)
                                                        {
                                                            LPARAM lParam_9 = nullptr;
                                                            WPARAM wParam_9 = 0xb;
                                                            *(*(esi + 0x18) + 0x24) = arg1;
                                                            var_50 = 0xb;
                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_9, lParam_9);
                                                            if (sub_41ef70((esi + 0x1c), 0x1a, &arg1) != 0)
                                                            {
                                                                LPARAM lParam_10 = nullptr;
                                                                WPARAM wParam_10 = 0xc;
                                                                *(*(esi + 0x18) + 0x28) = arg1;
                                                                var_50 = 0xc;
                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_10, lParam_10);
                                                                if (sub_41ef70((esi + 0x1c), 0x1b, &arg1) != 0)
                                                                {
                                                                    LPARAM lParam_11 = nullptr;
                                                                    WPARAM wParam_11 = 0xd;
                                                                    *(*(esi + 0x18) + 0x2c) = arg1;
                                                                    var_50 = 0xd;
                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_11, lParam_11);
                                                                    if (sub_41ef70((esi + 0x1c), 0x1c, &arg1) != 0)
                                                                    {
                                                                        LPARAM lParam_12 = nullptr;
                                                                        WPARAM wParam_12 = 0xe;
                                                                        *(*(esi + 0x18) + 0x30) = arg1;
                                                                        var_50 = 0xe;
                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_12, lParam_12);
                                                                        if (sub_41ef70((esi + 0x1c), 0x1d, &arg1) != 0)
                                                                        {
                                                                            LPARAM lParam_13 = nullptr;
                                                                            WPARAM wParam_13 = 0xf;
                                                                            *(*(esi + 0x18) + 0x34) = arg1;
                                                                            var_50 = 0xf;
                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_13, lParam_13);
                                                                            if (sub_41ef70((esi + 0x1c), 0x1e, &arg1) != 0)
                                                                            {
                                                                                LPARAM lParam_14 = nullptr;
                                                                                WPARAM wParam_14 = 0x10;
                                                                                *(*(esi + 0x18) + 0x38) = arg1;
                                                                                var_50 = 0x10;
                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_14, lParam_14);
                                                                                if (sub_41ef70((esi + 0x1c), 0x1f, &arg1) != 0)
                                                                                {
                                                                                    LPARAM lParam_15 = nullptr;
                                                                                    WPARAM wParam_15 = 0x11;
                                                                                    *(*(esi + 0x18) + 0x3c) = arg1;
                                                                                    var_50 = 0x11;
                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_15, lParam_15);
                                                                                    if (sub_41ef70((esi + 0x1c), 0x20, &arg1) != 0)
                                                                                    {
                                                                                        LPARAM lParam_16 = nullptr;
                                                                                        WPARAM wParam_16 = 0x12;
                                                                                        *(*(esi + 0x18) + 0x40) = arg1;
                                                                                        var_50 = 0x12;
                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_16, lParam_16);
                                                                                        if (sub_41ef70((esi + 0x1c), 0x21, &arg1) != 0)
                                                                                        {
                                                                                            LPARAM lParam_17 = nullptr;
                                                                                            WPARAM wParam_17 = 0x13;
                                                                                            *(*(esi + 0x18) + 0x44) = arg1;
                                                                                            var_50 = 0x13;
                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_17, lParam_17);
                                                                                            if (sub_41ef70((esi + 0x1c), 0x22, &arg1) != 0)
                                                                                            {
                                                                                                LPARAM lParam_18 = nullptr;
                                                                                                WPARAM wParam_18 = 0x14;
                                                                                                *(*(esi + 0x18) + 0x48) = arg1;
                                                                                                var_50 = 0x14;
                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_18, lParam_18);
                                                                                                if (sub_41ef70((esi + 0x1c), 0x23, &arg1) != 0)
                                                                                                {
                                                                                                    LPARAM lParam_19 = nullptr;
                                                                                                    WPARAM wParam_19 = 0x15;
                                                                                                    *(*(esi + 0x18) + 0x4c) = arg1;
                                                                                                    var_50 = 0x15;
                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_19, lParam_19);
                                                                                                    if (sub_41ef70((esi + 0x1c), 0x24, &arg1) != 0)
                                                                                                    {
                                                                                                        LPARAM lParam_20 = nullptr;
                                                                                                        WPARAM wParam_20 = 0x16;
                                                                                                        *(*(esi + 0x18) + 0x50) = arg1;
                                                                                                        var_50 = 0x16;
                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_20, lParam_20);
                                                                                                        if (sub_41ef70((esi + 0x1c), 0x25, &arg1) != 0)
                                                                                                        {
                                                                                                            LPARAM lParam_21 = nullptr;
                                                                                                            WPARAM wParam_21 = 0x17;
                                                                                                            *(*(esi + 0x18) + 0x54) = arg1;
                                                                                                            var_50 = 0x17;
                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_21, lParam_21);
                                                                                                            if (sub_41ef70((esi + 0x1c), 0x26, &arg1) != 0)
                                                                                                            {
                                                                                                                LPARAM lParam_22 = nullptr;
                                                                                                                WPARAM wParam_22 = 0x18;
                                                                                                                *(*(esi + 0x18) + 0x58) = arg1;
                                                                                                                var_50 = 0x18;
                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_22, lParam_22);
                                                                                                                if (sub_41ef70((esi + 0x1c), 0x27, &arg1) != 0)
                                                                                                                {
                                                                                                                    LPARAM lParam_23 = nullptr;
                                                                                                                    WPARAM wParam_23 = 0x19;
                                                                                                                    *(*(esi + 0x18) + 0x5c) = arg1;
                                                                                                                    var_50 = 0x19;
                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_23, lParam_23);
                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x28, &arg1) != 0)
                                                                                                                    {
                                                                                                                        LPARAM lParam_24 = nullptr;
                                                                                                                        WPARAM wParam_24 = 0x1a;
                                                                                                                        *(*(esi + 0x18) + 0x60) = arg1;
                                                                                                                        var_50 = 0x1a;
                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_24, lParam_24);
                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x29, &arg1) != 0)
                                                                                                                        {
                                                                                                                            LPARAM lParam_25 = nullptr;
                                                                                                                            WPARAM wParam_25 = 0x1b;
                                                                                                                            *(*(esi + 0x18) + 0x64) = arg1;
                                                                                                                            var_50 = 0x1b;
                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_25, lParam_25);
                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x2a, &arg1) != 0)
                                                                                                                            {
                                                                                                                                LPARAM lParam_26 = nullptr;
                                                                                                                                WPARAM wParam_26 = 0x1c;
                                                                                                                                *(*(esi + 0x18) + 0x68) = arg1;
                                                                                                                                var_50 = 0x1c;
                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_26, lParam_26);
                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x2b, &arg1) != 0)
                                                                                                                                {
                                                                                                                                    LPARAM lParam_27 = nullptr;
                                                                                                                                    WPARAM wParam_27 = 0x1d;
                                                                                                                                    *(*(esi + 0x18) + 0x6c) = arg1;
                                                                                                                                    var_50 = 0x1d;
                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_27, lParam_27);
                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x2c, &arg1) != 0)
                                                                                                                                    {
                                                                                                                                        LPARAM lParam_28 = nullptr;
                                                                                                                                        WPARAM wParam_28 = 0x1e;
                                                                                                                                        *(*(esi + 0x18) + 0x98) = arg1;
                                                                                                                                        var_50 = 0x1e;
                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_28, lParam_28);
                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x2d, &arg1) != 0)
                                                                                                                                        {
                                                                                                                                            LPARAM lParam_29 = nullptr;
                                                                                                                                            WPARAM wParam_29 = 0x1f;
                                                                                                                                            *(*(esi + 0x18) + 0x9c) = arg1;
                                                                                                                                            var_50 = 0x1f;
                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_29, lParam_29);
                                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x2e, &arg1) != 0)
                                                                                                                                            {
                                                                                                                                                LPARAM lParam_30 = nullptr;
                                                                                                                                                WPARAM wParam_30 = 0x20;
                                                                                                                                                *(*(esi + 0x18) + 0xa0) = arg1;
                                                                                                                                                var_50 = 0x20;
                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_30, lParam_30);
                                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x2f, &arg1) != 0)
                                                                                                                                                {
                                                                                                                                                    LPARAM lParam_31 = nullptr;
                                                                                                                                                    WPARAM wParam_31 = 0x21;
                                                                                                                                                    *(*(esi + 0x18) + 0xa4) = arg1;
                                                                                                                                                    var_50 = 0x21;
                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_31, lParam_31);
                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x30, &arg1) != 0)
                                                                                                                                                    {
                                                                                                                                                        LPARAM lParam_32 = nullptr;
                                                                                                                                                        WPARAM wParam_32 = 0x22;
                                                                                                                                                        *(*(esi + 0x18) + 0xa8) = arg1;
                                                                                                                                                        var_50 = 0x22;
                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_32, lParam_32);
                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x31, &arg1) != 0)
                                                                                                                                                        {
                                                                                                                                                            LPARAM lParam_33 = nullptr;
                                                                                                                                                            WPARAM wParam_33 = 0x23;
                                                                                                                                                            *(*(esi + 0x18) + 0xac) = arg1;
                                                                                                                                                            var_50 = 0x23;
                                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_33, lParam_33);
                                                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x32, &arg1) != 0)
                                                                                                                                                            {
                                                                                                                                                                LPARAM lParam_34 = nullptr;
                                                                                                                                                                WPARAM wParam_34 = 0x24;
                                                                                                                                                                *(*(esi + 0x18) + 0xb0) = arg1;
                                                                                                                                                                var_50 = 0x24;
                                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_34, lParam_34);
                                                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x33, &arg1) != 0)
                                                                                                                                                                {
                                                                                                                                                                    LPARAM lParam_35 = nullptr;
                                                                                                                                                                    WPARAM wParam_35 = 0x25;
                                                                                                                                                                    *(*(esi + 0x18) + 0xb4) = arg1;
                                                                                                                                                                    var_50 = 0x25;
                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_35, lParam_35);
                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x34, &arg1) != 0)
                                                                                                                                                                    {
                                                                                                                                                                        LPARAM lParam_36 = nullptr;
                                                                                                                                                                        WPARAM wParam_36 = 0x26;
                                                                                                                                                                        *(*(esi + 0x18) + 0xb8) = arg1;
                                                                                                                                                                        var_50 = 0x26;
                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_36, lParam_36);
                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x35, &arg1) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            LPARAM lParam_37 = nullptr;
                                                                                                                                                                            WPARAM wParam_37 = 0x27;
                                                                                                                                                                            *(*(esi + 0x18) + 0xbc) = arg1;
                                                                                                                                                                            var_50 = 0x27;
                                                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_37, lParam_37);
                                                                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x36, &arg1) != 0)
                                                                                                                                                                            {
                                                                                                                                                                                LPARAM lParam_38 = nullptr;
                                                                                                                                                                                WPARAM wParam_38 = 0x28;
                                                                                                                                                                                *(*(esi + 0x18) + 0x70) = arg1;
                                                                                                                                                                                var_50 = 0x28;
                                                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_38, lParam_38);
                                                                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x37, &arg1) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    LPARAM lParam_39 = nullptr;
                                                                                                                                                                                    WPARAM wParam_39 = 0x29;
                                                                                                                                                                                    *(*(esi + 0x18) + 0x74) = arg1;
                                                                                                                                                                                    var_50 = 0x29;
                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_39, lParam_39);
                                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x38, &arg1) != 0)
                                                                                                                                                                                    {
                                                                                                                                                                                        LPARAM lParam_40 = nullptr;
                                                                                                                                                                                        int16_t edx_59;
                                                                                                                                                                                        edx_59 = (arg1 >> 8);
                                                                                                                                                                                        WPARAM wParam_40 = 0x2a;
                                                                                                                                                                                        *(*(esi + 0x18) + 0x78) = edx_59;
                                                                                                                                                                                        *(*(esi + 0x18) + 0x7a) = arg1;
                                                                                                                                                                                        var_50 = 0x2a;
                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_40, lParam_40);
                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x39, &arg1) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            LPARAM lParam_41 = nullptr;
                                                                                                                                                                                            int16_t ecx_61;
                                                                                                                                                                                            ecx_61 = (arg1 >> 8);
                                                                                                                                                                                            WPARAM wParam_41 = 0x2b;
                                                                                                                                                                                            *(*(esi + 0x18) + 0x7c) = ecx_61;
                                                                                                                                                                                            *(*(esi + 0x18) + 0x7e) = arg1;
                                                                                                                                                                                            var_50 = 0x2b;
                                                                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_41, lParam_41);
                                                                                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x3a, &arg1) != 0)
                                                                                                                                                                                            {
                                                                                                                                                                                                int32_t eax_114;
                                                                                                                                                                                                eax_114 = 0;
                                                                                                                                                                                                LPARAM lParam_42 = nullptr;
                                                                                                                                                                                                eax_114 = (arg1 >> 8);
                                                                                                                                                                                                WPARAM wParam_42 = 0x2c;
                                                                                                                                                                                                *(*(esi + 0x18) + 0x80) = eax_114;
                                                                                                                                                                                                *(*(esi + 0x18) + 0x82) = arg1;
                                                                                                                                                                                                var_50 = 0x2c;
                                                                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_42, lParam_42);
                                                                                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x3b, &arg1) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    LPARAM lParam_43 = nullptr;
                                                                                                                                                                                                    int16_t edx_66;
                                                                                                                                                                                                    edx_66 = (arg1 >> 8);
                                                                                                                                                                                                    WPARAM wParam_43 = 0x2d;
                                                                                                                                                                                                    *(*(esi + 0x18) + 0x84) = edx_66;
                                                                                                                                                                                                    *(*(esi + 0x18) + 0x86) = arg1;
                                                                                                                                                                                                    var_50 = 0x2d;
                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_43, lParam_43);
                                                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x3c, &arg1) != 0)
                                                                                                                                                                                                    {
                                                                                                                                                                                                        LPARAM lParam_44 = nullptr;
                                                                                                                                                                                                        int16_t ecx_68;
                                                                                                                                                                                                        ecx_68 = (arg1 >> 8);
                                                                                                                                                                                                        WPARAM wParam_44 = 0x2e;
                                                                                                                                                                                                        *(*(esi + 0x18) + 0x88) = ecx_68;
                                                                                                                                                                                                        *(*(esi + 0x18) + 0x8a) = arg1;
                                                                                                                                                                                                        var_50 = 0x2e;
                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_44, lParam_44);
                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x3d, &arg1) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            int32_t eax_123;
                                                                                                                                                                                                            eax_123 = 0;
                                                                                                                                                                                                            LPARAM lParam_45 = nullptr;
                                                                                                                                                                                                            eax_123 = (arg1 >> 8);
                                                                                                                                                                                                            WPARAM wParam_45 = 0x2f;
                                                                                                                                                                                                            *(*(esi + 0x18) + 0x8c) = eax_123;
                                                                                                                                                                                                            *(*(esi + 0x18) + 0x8e) = arg1;
                                                                                                                                                                                                            var_50 = 0x2f;
                                                                                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, wParam_45, lParam_45);
                                                                                                                                                                                                            if (sub_41ef70((esi + 0x1c), 0x3e, &arg1) != 0)
                                                                                                                                                                                                            {
                                                                                                                                                                                                                LPARAM lParam_46 = nullptr;
                                                                                                                                                                                                                int16_t edx_73;
                                                                                                                                                                                                                edx_73 = (arg1 >> 8);
                                                                                                                                                                                                                WPARAM wParam_46 = 0x30;
                                                                                                                                                                                                                *(*(esi + 0x18) + 0x90) = edx_73;
                                                                                                                                                                                                                *(*(esi + 0x18) + 0x92) = arg1;
                                                                                                                                                                                                                var_50 = 0x30;
                                                                                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, wParam_46, lParam_46);
                                                                                                                                                                                                                if (sub_41ef70((esi + 0x1c), 0x3f, &arg1) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    LPARAM lParam_47 = nullptr;
                                                                                                                                                                                                                    int16_t ecx_75;
                                                                                                                                                                                                                    ecx_75 = (arg1 >> 8);
                                                                                                                                                                                                                    WPARAM wParam_47 = 0x31;
                                                                                                                                                                                                                    *(*(esi + 0x18) + 0x94) = ecx_75;
                                                                                                                                                                                                                    *(*(esi + 0x18) + 0x96) = arg1;
                                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, wParam_47, lParam_47);
                                                                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x40, &arg1) != 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        *(*(esi + 0x18) + 0xdc) = arg1;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, 0x32, nullptr);
                                                                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x41, &arg1) != 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        *(*(esi + 0x18) + 0xe0) = arg1;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    char var_50_1 = 0x33;
                                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, 0x33, nullptr);
                                                                                                                                                                                                                    if (sub_41ef70((esi + 0x1c), 0x42, &arg1) != 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        LPARAM lParam_48 = nullptr;
                                                                                                                                                                                                                        WPARAM wParam_48 = 0x34;
                                                                                                                                                                                                                        *(*(esi + 0x18) + 0xc4) = arg1;
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, wParam_48, lParam_48);
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x43, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xc8) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, 0x35, nullptr);
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x44, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xcc) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, 0x36, nullptr);
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x45, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xd0) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, 0x37, nullptr);
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x46, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xd4) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        var_50_1 = 0x38;
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, 0x38, nullptr);
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x47, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xc0) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (sub_41ef70((esi + 0x1c), 0x48, &arg1) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            *(*(esi + 0x18) + 0xd8) = arg1;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    int32_t eax_136;
                                                                                                                                                                                                                    eax_136 = var_50_1;
                                                                                                                                                                                                                    eax_136 = (eax_136 + 1);
                                                                                                                                                                                                                    var_50 = eax_136;
                                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, var_50, nullptr);
                                                                                                                                                                                                                    if (sub_41f150(esi, (esi + 0x1c), -0x60, &var_44) != 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        int32_t eax_151;
                                                                                                                                                                                                                        eax_151 = var_44;
                                                                                                                                                                                                                        uint32_t var_4c;
                                                                                                                                                                                                                        if (eax_151 > 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            void* ecx_89 = &s;
                                                                                                                                                                                                                            eax_151 = 0xe4;
                                                                                                                                                                                                                            var_4c = var_44;
                                                                                                                                                                                                                            bool cond:0_1;
                                                                                                                                                                                                                            do
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                uint32_t edx_91;
                                                                                                                                                                                                                                edx_91 = *ecx_89;
                                                                                                                                                                                                                                eax_151 = (eax_151 + 2);
                                                                                                                                                                                                                                ecx_89 = (ecx_89 + 1);
                                                                                                                                                                                                                                *((eax_151 + *(esi + 0x18)) - 2) = edx_91;
                                                                                                                                                                                                                                cond:0_1 = var_4c != 1;
                                                                                                                                                                                                                                var_4c = (var_4c - 1);
                                                                                                                                                                                                                            } while (cond:0_1);
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        eax_151 = var_50;
                                                                                                                                                                                                                        eax_151 = (eax_151 + 1);
                                                                                                                                                                                                                        var_50 = eax_151;
                                                                                                                                                                                                                        SendMessageA(*(*esi + 0x20), 0x402, var_50, nullptr);
                                                                                                                                                                                                                        if (sub_41f150(esi, (esi + 0x1c), -0x5f, &var_44) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            int32_t eax_154;
                                                                                                                                                                                                                            eax_154 = var_44;
                                                                                                                                                                                                                            if (eax_154 > 0)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                void* ecx_91 = &s;
                                                                                                                                                                                                                                eax_154 = 0x124;
                                                                                                                                                                                                                                var_4c = var_44;
                                                                                                                                                                                                                                bool cond:1_1;
                                                                                                                                                                                                                                do
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    uint32_t edx_95;
                                                                                                                                                                                                                                    edx_95 = *ecx_91;
                                                                                                                                                                                                                                    eax_154 = (eax_154 + 2);
                                                                                                                                                                                                                                    ecx_91 = (ecx_91 + 1);
                                                                                                                                                                                                                                    *((eax_154 + *(esi + 0x18)) - 2) = edx_95;
                                                                                                                                                                                                                                    cond:1_1 = var_4c != 1;
                                                                                                                                                                                                                                    var_4c = (var_4c - 1);
                                                                                                                                                                                                                                } while (cond:1_1);
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            eax_154 = var_50;
                                                                                                                                                                                                                            eax_154 = (eax_154 + 1);
                                                                                                                                                                                                                            var_50 = eax_154;
                                                                                                                                                                                                                            SendMessageA(*(*esi + 0x20), 0x402, var_50, nullptr);
                                                                                                                                                                                                                            if (sub_41f150(esi, (esi + 0x1c), -0x5e, &var_44) != 0)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                int32_t eax_157;
                                                                                                                                                                                                                                eax_157 = var_44;
                                                                                                                                                                                                                                if (eax_157 > 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    eax_157 = 0;
                                                                                                                                                                                                                                    uint32_t i_1 = var_44;
                                                                                                                                                                                                                                    uint32_t i;
                                                                                                                                                                                                                                    do
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        *((eax_157 + *(esi + 0x18)) + 0x164) = *(&s + eax_157);
                                                                                                                                                                                                                                        eax_157 = (eax_157 + 1);
                                                                                                                                                                                                                                        i = i_1;
                                                                                                                                                                                                                                        i_1 = (i_1 - 1);
                                                                                                                                                                                                                                    } while (i != 1);
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                eax_157 = var_50;
                                                                                                                                                                                                                                eax_157 = (eax_157 + 1);
                                                                                                                                                                                                                                var_50 = eax_157;
                                                                                                                                                                                                                                SendMessageA(*(*esi + 0x20), 0x402, var_50, nullptr);
                                                                                                                                                                                                                                int32_t eax_160;
                                                                                                                                                                                                                                int32_t edx_100;
                                                                                                                                                                                                                                eax_160 = sub_41f150(esi, (esi + 0x1c), -0x56, &var_44);
                                                                                                                                                                                                                                if (eax_160 != 0)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    uint8_t ecx_95 = (var_44 >> 1);
                                                                                                                                                                                                                                    var_4c = ecx_95;
                                                                                                                                                                                                                                    if (ecx_95 != 0)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        int32_t* edi_5 = 0x184;
                                                                                                                                                                                                                                        void var_42;
                                                                                                                                                                                                                                        void* eax_161 = &var_42;
                                                                                                                                                                                                                                        uint32_t var_4c_1 = var_4c;
                                                                                                                                                                                                                                        bool cond:3_1;
                                                                                                                                                                                                                                        do
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                            int32_t edx_101;
                                                                                                                                                                                                                                            edx_101 = *(eax_161 - 1);
                                                                                                                                                                                                                                            int32_t ecx_98;
                                                                                                                                                                                                                                            ecx_98 = *eax_161;
                                                                                                                                                                                                                                            eax_161 = (eax_161 + 2);
                                                                                                                                                                                                                                            *(edi_5 + *(esi + 0x18)) = ((edx_101 << 8) + ecx_98);
                                                                                                                                                                                                                                            edi_5 = &edi_5[1];
                                                                                                                                                                                                                                            cond:3_1 = var_4c_1 != 1;
                                                                                                                                                                                                                                            var_4c_1 = (var_4c_1 - 1);
                                                                                                                                                                                                                                        } while (cond:3_1);
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    edx_100 = var_50;
                                                                                                                                                                                                                                    edx_100 = (edx_100 + 1);
                                                                                                                                                                                                                                    var_50 = edx_100;
                                                                                                                                                                                                                                    SendMessageA(*(*esi + 0x20), 0x402, var_50, nullptr);
                                                                                                                                                                                                                                    **(esi + 8) = 1;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            int32_t edx_2;
            edx_2 = data_43610a;
            if (arg1 == edx_2)
            {
                goto label_41f6cf;
            }
            **(esi + 0x14) = 1;
        }
        sub_41edb0(esi, (esi + 0x1c), 1, 0);
        SendMessageA(*(*esi + 0x20), 0x402, (var_50 + 1), nullptr);
        sub_416a40((esi + 0x1c));
    }
    sub_404a80();
    PostMessageA(*(esi + 0x10), 0x465, nullptr, nullptr);
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

uint32_t sub_420690(void* arg1)
{
    int32_t* eax = *(arg1 + 8);
    uint32_t lpExitCode = 0;
    *eax = 0;
    HANDLE eax_3;
    int32_t edi;
    eax_3 = sub_4165f0((arg1 + 0x1c), (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_3 == 0)
    {
        AfxMessageBox("open port fail", 0, 0);
        **(arg1 + 0x14) = 0;
    }
    else
    {
        int32_t eax_4 = data_4360f8;
        char var_84_1;
        if (eax_4 == 0)
        {
            var_84_1 = 0x4e;
        }
        if (eax_4 == 1)
        {
            var_84_1 = 0x4f;
        }
        if (eax_4 == 2)
        {
            var_84_1 = 0x45;
        }
        if (((eax_4 == 0 || eax_4 == 1) || eax_4 == 2))
        {
            sub_416890((arg1 + 0x1c), var_84_1);
        }
        int32_t var_84_2 = edi;
        CWnd::ShowWindow(*arg1, 1);
        uint32_t var_74;
        int32_t eax_5 = sub_41ef70((arg1 + 0x1c), 0, &var_74);
        int32_t eax_7;
        if (eax_5 == 0)
        {
            eax_5 = data_43610a;
            if (eax_5 != 0)
            {
                eax_7 = sub_41ef70((arg1 + 0x1c), 0, &var_74);
                if (eax_7 == 0)
                {
                    **(arg1 + 0x14) = 1;
                }
            }
        }
        int32_t eax_6;
        if ((eax_5 != 0 || ((eax_5 == 0 && eax_5 != 0) && eax_7 != 0)))
        {
            eax_6 = data_43610a;
        }
        if (((eax_5 == 0 && eax_5 == 0) || ((eax_5 != 0 || ((eax_5 == 0 && eax_5 != 0) && eax_7 != 0)) && var_74 == eax_6)))
        {
            *(arg1 + 0x14) = 0;
            if (sub_41edb0(arg1, (arg1 + 0x1c), 0, 0x5678) != 0)
            {
                sub_405320(0xa);
                SendMessageA(*(*arg1 + 0x20), 0x402, 1, nullptr);
                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x10, **(arg1 + 0x18)) != 0)
                {
                    sub_405320(0xa);
                    SendMessageA(*(*arg1 + 0x20), 0x402, 2, nullptr);
                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x11, *(*(arg1 + 0x18) + 4)) != 0)
                    {
                        SendMessageA(*(*arg1 + 0x20), 0x402, 3, nullptr);
                        sub_405320(0xa);
                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x12, *(*(arg1 + 0x18) + 8)) != 0)
                        {
                            SendMessageA(*(*arg1 + 0x20), 0x402, 4, nullptr);
                            sub_405320(0xa);
                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x13, *(*(arg1 + 0x18) + 0xc)) != 0)
                            {
                                SendMessageA(*(*arg1 + 0x20), 0x402, 5, nullptr);
                                sub_405320(0xa);
                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x14, *(*(arg1 + 0x18) + 0x10)) != 0)
                                {
                                    sub_405320(0xa);
                                    SendMessageA(*(*arg1 + 0x20), 0x402, 6, nullptr);
                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x15, *(*(arg1 + 0x18) + 0x14)) != 0)
                                    {
                                        sub_405320(0xa);
                                        SendMessageA(*(*arg1 + 0x20), 0x402, 7, nullptr);
                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x16, *(*(arg1 + 0x18) + 0x18)) != 0)
                                        {
                                            sub_405320(0xa);
                                            SendMessageA(*(*arg1 + 0x20), 0x402, 8, nullptr);
                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x17, *(*(arg1 + 0x18) + 0x1c)) != 0)
                                            {
                                                sub_405320(0xa);
                                                SendMessageA(*(*arg1 + 0x20), 0x402, 9, nullptr);
                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x18, *(*(arg1 + 0x18) + 0x20)) != 0)
                                                {
                                                    sub_405320(0xa);
                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0xa, nullptr);
                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x19, *(*(arg1 + 0x18) + 0x24)) != 0)
                                                    {
                                                        sub_405320(0xa);
                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0xb, nullptr);
                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1a, *(*(arg1 + 0x18) + 0x28)) != 0)
                                                        {
                                                            sub_405320(0xa);
                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0xc, nullptr);
                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1b, *(*(arg1 + 0x18) + 0x2c)) != 0)
                                                            {
                                                                sub_405320(0xa);
                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0xd, nullptr);
                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1c, *(*(arg1 + 0x18) + 0x30)) != 0)
                                                                {
                                                                    sub_405320(0xa);
                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0xe, nullptr);
                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1d, *(*(arg1 + 0x18) + 0x34)) != 0)
                                                                    {
                                                                        sub_405320(0xa);
                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0xf, nullptr);
                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1e, *(*(arg1 + 0x18) + 0x38)) != 0)
                                                                        {
                                                                            sub_405320(0xa);
                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x10, nullptr);
                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x1f, *(*(arg1 + 0x18) + 0x3c)) != 0)
                                                                            {
                                                                                sub_405320(0xa);
                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x11, nullptr);
                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x20, *(*(arg1 + 0x18) + 0x40)) != 0)
                                                                                {
                                                                                    sub_405320(0xa);
                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x12, nullptr);
                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x21, *(*(arg1 + 0x18) + 0x44)) != 0)
                                                                                    {
                                                                                        sub_405320(0xa);
                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x13, nullptr);
                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x22, *(*(arg1 + 0x18) + 0x48)) != 0)
                                                                                        {
                                                                                            sub_405320(0xa);
                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x14, nullptr);
                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x23, *(*(arg1 + 0x18) + 0x4c)) != 0)
                                                                                            {
                                                                                                sub_405320(0xa);
                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x15, nullptr);
                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x24, *(*(arg1 + 0x18) + 0x50)) != 0)
                                                                                                {
                                                                                                    sub_405320(0xa);
                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x16, nullptr);
                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x25, *(*(arg1 + 0x18) + 0x54)) != 0)
                                                                                                    {
                                                                                                        sub_405320(0xa);
                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x17, nullptr);
                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x26, *(*(arg1 + 0x18) + 0x58)) != 0)
                                                                                                        {
                                                                                                            sub_405320(0xa);
                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x18, nullptr);
                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x27, *(*(arg1 + 0x18) + 0x5c)) != 0)
                                                                                                            {
                                                                                                                sub_405320(0xa);
                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x19, nullptr);
                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x28, *(*(arg1 + 0x18) + 0x60)) != 0)
                                                                                                                {
                                                                                                                    sub_405320(0xa);
                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x1a, nullptr);
                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x29, *(*(arg1 + 0x18) + 0x64)) != 0)
                                                                                                                    {
                                                                                                                        sub_405320(0xa);
                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x1b, nullptr);
                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2a, *(*(arg1 + 0x18) + 0x68)) != 0)
                                                                                                                        {
                                                                                                                            sub_405320(0xa);
                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x1c, nullptr);
                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2b, *(*(arg1 + 0x18) + 0x6c)) != 0)
                                                                                                                            {
                                                                                                                                sub_405320(0xa);
                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x1d, nullptr);
                                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2c, *(*(arg1 + 0x18) + 0x98)) != 0)
                                                                                                                                {
                                                                                                                                    sub_405320(0xa);
                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x1e, nullptr);
                                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2d, *(*(arg1 + 0x18) + 0x9c)) != 0)
                                                                                                                                    {
                                                                                                                                        sub_405320(0xa);
                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x1f, nullptr);
                                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2e, *(*(arg1 + 0x18) + 0xa0)) != 0)
                                                                                                                                        {
                                                                                                                                            sub_405320(0xa);
                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x20, nullptr);
                                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x2f, *(*(arg1 + 0x18) + 0xa4)) != 0)
                                                                                                                                            {
                                                                                                                                                sub_405320(0xa);
                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x21, nullptr);
                                                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x30, *(*(arg1 + 0x18) + 0xa8)) != 0)
                                                                                                                                                {
                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x22, nullptr);
                                                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x31, *(*(arg1 + 0x18) + 0xac)) != 0)
                                                                                                                                                    {
                                                                                                                                                        sub_405320(0xa);
                                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x23, nullptr);
                                                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x32, *(*(arg1 + 0x18) + 0xb0)) != 0)
                                                                                                                                                        {
                                                                                                                                                            sub_405320(0xa);
                                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x24, nullptr);
                                                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x33, *(*(arg1 + 0x18) + 0xb4)) != 0)
                                                                                                                                                            {
                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x25, nullptr);
                                                                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x34, *(*(arg1 + 0x18) + 0xb8)) != 0)
                                                                                                                                                                {
                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x26, nullptr);
                                                                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x35, *(*(arg1 + 0x18) + 0xbc)) != 0)
                                                                                                                                                                    {
                                                                                                                                                                        sub_405320(0xa);
                                                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x27, nullptr);
                                                                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x36, *(*(arg1 + 0x18) + 0x70)) != 0)
                                                                                                                                                                        {
                                                                                                                                                                            sub_405320(0xa);
                                                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x28, nullptr);
                                                                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x37, *(*(arg1 + 0x18) + 0x74)) != 0)
                                                                                                                                                                            {
                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x29, nullptr);
                                                                                                                                                                                void* eax_103 = *(arg1 + 0x18);
                                                                                                                                                                                uint32_t ecx_61;
                                                                                                                                                                                *ecx_61[1] = *(eax_103 + 0x78);
                                                                                                                                                                                var_74 = ecx_61;
                                                                                                                                                                                eax_103 = *(eax_103 + 0x7a);
                                                                                                                                                                                void* ecx_62 = (ecx_61 + (eax_103 & 0xff));
                                                                                                                                                                                var_74 = ecx_62;
                                                                                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x38, ecx_62) != 0)
                                                                                                                                                                                {
                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x2a, nullptr);
                                                                                                                                                                                    void* eax_106 = *(arg1 + 0x18);
                                                                                                                                                                                    uint32_t ecx_64;
                                                                                                                                                                                    *ecx_64[1] = *(eax_106 + 0x7c);
                                                                                                                                                                                    var_74 = ecx_64;
                                                                                                                                                                                    eax_106 = *(eax_106 + 0x7e);
                                                                                                                                                                                    void* ecx_65 = (ecx_64 + (eax_106 & 0xff));
                                                                                                                                                                                    var_74 = ecx_65;
                                                                                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x39, ecx_65) != 0)
                                                                                                                                                                                    {
                                                                                                                                                                                        sub_405320(0xa);
                                                                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x2b, nullptr);
                                                                                                                                                                                        void* eax_109 = *(arg1 + 0x18);
                                                                                                                                                                                        uint32_t ecx_67;
                                                                                                                                                                                        *ecx_67[1] = *(eax_109 + 0x80);
                                                                                                                                                                                        var_74 = ecx_67;
                                                                                                                                                                                        eax_109 = *(eax_109 + 0x82);
                                                                                                                                                                                        void* ecx_68 = (ecx_67 + (eax_109 & 0xff));
                                                                                                                                                                                        var_74 = ecx_68;
                                                                                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3a, ecx_68) != 0)
                                                                                                                                                                                        {
                                                                                                                                                                                            sub_405320(0xa);
                                                                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x2c, nullptr);
                                                                                                                                                                                            void* eax_112 = *(arg1 + 0x18);
                                                                                                                                                                                            uint32_t ecx_70;
                                                                                                                                                                                            *ecx_70[1] = *(eax_112 + 0x84);
                                                                                                                                                                                            var_74 = ecx_70;
                                                                                                                                                                                            eax_112 = *(eax_112 + 0x86);
                                                                                                                                                                                            void* ecx_71 = (ecx_70 + (eax_112 & 0xff));
                                                                                                                                                                                            var_74 = ecx_71;
                                                                                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3b, ecx_71) != 0)
                                                                                                                                                                                            {
                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x2d, nullptr);
                                                                                                                                                                                                void* eax_115 = *(arg1 + 0x18);
                                                                                                                                                                                                uint32_t ecx_73;
                                                                                                                                                                                                *ecx_73[1] = *(eax_115 + 0x88);
                                                                                                                                                                                                var_74 = ecx_73;
                                                                                                                                                                                                eax_115 = *(eax_115 + 0x8a);
                                                                                                                                                                                                void* ecx_74 = (ecx_73 + (eax_115 & 0xff));
                                                                                                                                                                                                var_74 = ecx_74;
                                                                                                                                                                                                if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3c, ecx_74) != 0)
                                                                                                                                                                                                {
                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x2e, nullptr);
                                                                                                                                                                                                    void* eax_118 = *(arg1 + 0x18);
                                                                                                                                                                                                    uint32_t ecx_76;
                                                                                                                                                                                                    *ecx_76[1] = *(eax_118 + 0x8c);
                                                                                                                                                                                                    var_74 = ecx_76;
                                                                                                                                                                                                    eax_118 = *(eax_118 + 0x8e);
                                                                                                                                                                                                    void* ecx_77 = (ecx_76 + (eax_118 & 0xff));
                                                                                                                                                                                                    var_74 = ecx_77;
                                                                                                                                                                                                    if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3d, ecx_77) != 0)
                                                                                                                                                                                                    {
                                                                                                                                                                                                        sub_405320(0xa);
                                                                                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, 0x2f, nullptr);
                                                                                                                                                                                                        void* eax_121 = *(arg1 + 0x18);
                                                                                                                                                                                                        uint32_t ecx_79;
                                                                                                                                                                                                        *ecx_79[1] = *(eax_121 + 0x90);
                                                                                                                                                                                                        var_74 = ecx_79;
                                                                                                                                                                                                        eax_121 = *(eax_121 + 0x92);
                                                                                                                                                                                                        void* ecx_80 = (ecx_79 + (eax_121 & 0xff));
                                                                                                                                                                                                        var_74 = ecx_80;
                                                                                                                                                                                                        if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3e, ecx_80) != 0)
                                                                                                                                                                                                        {
                                                                                                                                                                                                            sub_405320(0xa);
                                                                                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, 0x30, nullptr);
                                                                                                                                                                                                            void* eax_124 = *(arg1 + 0x18);
                                                                                                                                                                                                            uint32_t ecx_82;
                                                                                                                                                                                                            *ecx_82[1] = *(eax_124 + 0x94);
                                                                                                                                                                                                            var_74 = ecx_82;
                                                                                                                                                                                                            eax_124 = *(eax_124 + 0x96);
                                                                                                                                                                                                            uint32_t ecx_83 = (ecx_82 + (eax_124 & 0xff));
                                                                                                                                                                                                            var_74 = ecx_83;
                                                                                                                                                                                                            if (sub_41edb0(arg1, (arg1 + 0x1c), 0x3f, ecx_83) != 0)
                                                                                                                                                                                                            {
                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x31, nullptr);
                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x32, nullptr);
                                                                                                                                                                                                                sub_41edb0(arg1, (arg1 + 0x1c), 0x40, *(*(arg1 + 0x18) + 0xdc));
                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x33, nullptr);
                                                                                                                                                                                                                sub_41edb0(arg1, (arg1 + 0x1c), 0x41, *(*(arg1 + 0x18) + 0xe0));
                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                char ebx_1 = 0x34;
                                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x34, nullptr);
                                                                                                                                                                                                                int32_t eax_131;
                                                                                                                                                                                                                int32_t edx_68;
                                                                                                                                                                                                                eax_131 = sub_41edb0(arg1, (arg1 + 0x1c), 0x42, *(*(arg1 + 0x18) + 0xc4));
                                                                                                                                                                                                                if (eax_131 != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x35, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x43, *(*(arg1 + 0x18) + 0xc8));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x36, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x44, *(*(arg1 + 0x18) + 0xcc));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x37, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x45, *(*(arg1 + 0x18) + 0xd0));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x38, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x46, *(*(arg1 + 0x18) + 0xd4));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x39, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x47, *(*(arg1 + 0x18) + 0xc0));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x3a, nullptr);
                                                                                                                                                                                                                    sub_41edb0(arg1, (arg1 + 0x1c), 0x48, *(*(arg1 + 0x18) + 0xd8));
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    ebx_1 = 0x3b;
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, 0x3b, nullptr);
                                                                                                                                                                                                                }
                                                                                                                                                                                                                void* ecx_98 = *(arg1 + 0x18);
                                                                                                                                                                                                                char i_3 = 0;
                                                                                                                                                                                                                edx_68 = *(ecx_98 + 0xe4);
                                                                                                                                                                                                                edx_68 = (edx_68 + 1);
                                                                                                                                                                                                                char var_64 = edx_68;
                                                                                                                                                                                                                int32_t eax_141;
                                                                                                                                                                                                                eax_141 = *(ecx_98 + 0xe4);
                                                                                                                                                                                                                void var_63;
                                                                                                                                                                                                                if ((eax_141 + 1) > 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    uint32_t i = 0;
                                                                                                                                                                                                                    int32_t edx_77;
                                                                                                                                                                                                                    do
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        edx_68 = *((ecx_98 + (i << 1)) + 0xe4);
                                                                                                                                                                                                                        *(&var_63 + i) = edx_68;
                                                                                                                                                                                                                        i = i_3;
                                                                                                                                                                                                                        i = (i + 1);
                                                                                                                                                                                                                        edx_77 = *(ecx_98 + 0xe4);
                                                                                                                                                                                                                        i_3 = i;
                                                                                                                                                                                                                        i = i_3;
                                                                                                                                                                                                                    } while (i < (edx_77 + 1));
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (sub_41f3b0((arg1 + 0x1c), 0xa0, &var_64) != 0)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    sub_405320(0xa);
                                                                                                                                                                                                                    SendMessageA(*(*arg1 + 0x20), 0x402, (ebx_1 + 1), nullptr);
                                                                                                                                                                                                                    void* ecx_101 = *(arg1 + 0x18);
                                                                                                                                                                                                                    char i_4 = 0;
                                                                                                                                                                                                                    int32_t edx_79;
                                                                                                                                                                                                                    edx_79 = *(ecx_101 + 0x124);
                                                                                                                                                                                                                    edx_79 = (edx_79 + 1);
                                                                                                                                                                                                                    var_64 = edx_79;
                                                                                                                                                                                                                    int32_t eax_146;
                                                                                                                                                                                                                    eax_146 = *(ecx_101 + 0x124);
                                                                                                                                                                                                                    if ((eax_146 + 1) > 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        uint32_t i_1 = 0;
                                                                                                                                                                                                                        int32_t edx_80;
                                                                                                                                                                                                                        do
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            edx_79 = *((ecx_101 + (i_1 << 1)) + 0x124);
                                                                                                                                                                                                                            *(&var_63 + i_1) = edx_79;
                                                                                                                                                                                                                            i_1 = i_4;
                                                                                                                                                                                                                            i_1 = (i_1 + 1);
                                                                                                                                                                                                                            edx_80 = *(ecx_101 + 0x124);
                                                                                                                                                                                                                            i_4 = i_1;
                                                                                                                                                                                                                            i_1 = i_4;
                                                                                                                                                                                                                        } while (i_1 < (edx_80 + 1));
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (sub_41f3b0((arg1 + 0x1c), 0xa1, &var_64) != 0)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                        sub_405320(0xa);
                                                                                                                                                                                                                        SendMessageA(*(*arg1 + 0x20), 0x402, (ebx_1 + 2), nullptr);
                                                                                                                                                                                                                        void* ecx_104 = *(arg1 + 0x18);
                                                                                                                                                                                                                        char i_5 = 0;
                                                                                                                                                                                                                        int32_t edx_82;
                                                                                                                                                                                                                        edx_82 = *(ecx_104 + 0x164);
                                                                                                                                                                                                                        edx_82 = (edx_82 + 1);
                                                                                                                                                                                                                        var_64 = edx_82;
                                                                                                                                                                                                                        int32_t eax_151;
                                                                                                                                                                                                                        eax_151 = *(ecx_104 + 0x164);
                                                                                                                                                                                                                        if ((eax_151 + 1) > 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            uint32_t i_2 = 0;
                                                                                                                                                                                                                            int32_t edx_83;
                                                                                                                                                                                                                            do
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                edx_82 = *((i_2 + ecx_104) + 0x164);
                                                                                                                                                                                                                                *(&var_63 + i_2) = edx_82;
                                                                                                                                                                                                                                i_2 = i_5;
                                                                                                                                                                                                                                i_2 = (i_2 + 1);
                                                                                                                                                                                                                                edx_83 = *(ecx_104 + 0x164);
                                                                                                                                                                                                                                i_5 = i_2;
                                                                                                                                                                                                                                i_2 = i_5;
                                                                                                                                                                                                                            } while (i_2 < (edx_83 + 1));
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (sub_41f3b0((arg1 + 0x1c), 0xa2, &var_64) != 0)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                            SendMessageA(*(*arg1 + 0x20), 0x402, (ebx_1 + 3), nullptr);
                                                                                                                                                                                                                            int32_t eax_156;
                                                                                                                                                                                                                            int32_t eax_157;
                                                                                                                                                                                                                            if (*(*(arg1 + 0x18) + 0x1b4) == 0)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                                eax_157 = sub_41edb0(arg1, (arg1 + 0x1c), 1, 0x2828);
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                sub_405320(0xa);
                                                                                                                                                                                                                                eax_156 = sub_41edb0(arg1, (arg1 + 0x1c), 1, 0x2829);
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (((*(*(arg1 + 0x18) + 0x1b4) == 0 && eax_157 != 0) || (*(*(arg1 + 0x18) + 0x1b4) != 0 && eax_156 != 0)))
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                sub_405320(0x1f4);
                                                                                                                                                                                                                                SendMessageA(*(*arg1 + 0x20), 0x402, 0x32, nullptr);
                                                                                                                                                                                                                                **(arg1 + 8) = 1;
                                                                                                                                                                                                                                data_436114 = 1;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (((eax_5 != 0 || ((eax_5 == 0 && eax_5 != 0) && eax_7 != 0)) && var_74 != eax_6))
        {
            **(arg1 + 0x14) = 1;
        }
        sub_416a40((arg1 + 0x1c));
    }
    sub_404a80();
    PostMessageA(*(arg1 + 0x10), 0x466, nullptr, nullptr);
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

void* sub_421690(int32_t arg1, char* arg2, char* arg3, int32_t arg4)
{
    *arg3 = 0xbb;
    int32_t esi = (arg1 + arg4);
    arg3[1] = arg1;
    arg3[2] = arg4;
    void* eax_2 = &arg3[3];
    if (arg4 > 0)
    {
        char* edx_1 = arg2;
        int32_t i_1 = arg4;
        int32_t i;
        do
        {
            int32_t ecx;
            ecx = *edx_1;
            *eax_2 = ecx;
            esi = (esi + ecx);
            eax_2 = (eax_2 + 1);
            edx_1 = &edx_1[1];
            i = i_1;
            i_1 = (i_1 - 1);
        } while (i != 1);
    }
    *eax_2 = ((0x10000 - esi) >> 8);
    *(eax_2 + 1) = (0x10000 - esi);
    *(eax_2 + 2) = 0xcc;
    return (eax_2 + 1);
}

void* sub_4216f0(char arg1, char* arg2, char* arg3, int32_t arg4)
{
    int32_t i_1 = arg4;
    *arg3 = 0xeb;
    arg3[1] = 1;
    arg3[2] = 0;
    arg3[3] = (i_1 + 3);
    arg3[4] = arg1;
    void* eax_4 = &arg3[5];
    int32_t edx = ((arg1 + i_1) + 3);
    if (i_1 <= 0)
    {
        *eax_4 = edx;
        *(eax_4 + 1) = 0xf5;
        return eax_4;
    }
    char* esi = arg2;
    int32_t i;
    do
    {
        uint32_t ecx_2;
        ecx_2 = *esi;
        *eax_4 = ecx_2;
        edx = (edx + ecx_2);
        eax_4 = (eax_4 + 1);
        esi = &esi[1];
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    *eax_4 = edx;
    *(eax_4 + 1) = 0xf5;
    return eax_4;
}

uint32_t sub_421750(char arg1, char* arg2, char* arg3, int32_t arg4)
{
    *arg3 = 0xbb;
    char* eax;
    eax = arg1;
    arg3[1] = eax;
    arg3[2] = arg4;
    void* esi_2 = &arg3[3];
    if (arg4 > 0)
    {
        char* ecx_1 = arg2;
        int32_t i_1 = arg4;
        int32_t i;
        do
        {
            *esi_2 = *ecx_1;
            esi_2 = (esi_2 + 1);
            ecx_1 = &ecx_1[1];
            i = i_1;
            i_1 = (i_1 - 1);
        } while (i != 1);
    }
    int32_t eax_1;
    eax_1 = (arg4 + 2);
    uint32_t eax_3 = sub_41e860(&arg3[1], eax_1);
    *esi_2 = (eax_3 >> 8);
    *(esi_2 + 1) = eax_3;
    *(esi_2 + 2) = 0xcc;
    return eax_3;
}

uint32_t sub_4217b0(void* arg1)
{
    uint32_t lpExitCode = 0;
    sub_4267d0(*arg1, 0);
    HANDLE eax_3;
    int32_t* edi_1;
    eax_3 = sub_4165f0((arg1 + 0x18), (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_3 == 0)
    {
        *edi_1[5] = 1;
    }
    else
    {
        int32_t var_51c = 0;
        while (true)
        {
            sub_4167f0(&edi_1[6], data_433b10, 0);
            int32_t eax_4 = data_4360f8;
            char var_530_1;
            if (eax_4 == 0)
            {
                var_530_1 = 0x4e;
            }
            if (eax_4 == 1)
            {
                var_530_1 = 0x4f;
            }
            if (eax_4 == 2)
            {
                var_530_1 = 0x45;
            }
            if (((eax_4 == 0 || eax_4 == 1) || eax_4 == 2))
            {
                sub_416890(&edi_1[6], var_530_1);
            }
            sub_405320(0x32);
            int32_t i = 1;
            uint8_t s;
            do
            {
                &s[i] = rand();
                i = (i + 1);
            } while (i < 5);
            int32_t i_8 = 2;
            int32_t i_1;
            do
            {
                sub_41edb0(i_8, &edi_1[6], 2, 0x1234);
                sub_405320(0xa);
                i_1 = i_8;
                i_8 = (i_8 - 1);
            } while (i_1 != 1);
            int32_t eax_6 = edi_1[0x15];
            int32_t var_534_2;
            char var_530_2;
            if (eax_6 == 0)
            {
                var_530_2 = eax_6;
                var_534_2 = 0x2580;
            }
            if (eax_6 == 1)
            {
                var_530_2 = 0;
                var_534_2 = 0x4b00;
            }
            if (eax_6 == 2)
            {
                var_530_2 = 0;
                var_534_2 = 0x9600;
            }
            if (((eax_6 == 0 || eax_6 == 1) || eax_6 == 2))
            {
                sub_4167f0(&edi_1[6], var_534_2, var_530_2);
            }
            sub_405320(0xc8);
            sub_416890(&edi_1[6], 0x4e);
            int32_t i_2 = 0;
            do
            {
                &s[i_2] = rand();
                i_2 = (i_2 + 1);
            } while (i_2 < 0x20);
            void var_300;
            sub_421690(0x3a, &s, &var_300, 0x20);
            if (sub_416940(&edi_1[6], &var_300, 0x26) == 0)
            {
                *edi_1[5] = 2;
                break;
            }
            uint32_t eax_9 = GetTickCount();
            int32_t ebp_1 = 0;
            var_52c;
            uint32_t i_3;
            do
            {
                uint32_t eax_11 = sub_4169c0(&edi_1[6], &s, (7 - ebp_1));
                if (eax_11 > 0)
                {
                    __builtin_memcpy(((&var_52c + ebp_1) + 0x32c), &s, ((eax_11 >> 2) << 2));
                    int32_t esi_2;
                    int32_t edi_3;
                    __builtin_memcpy(edi_3, esi_2, (eax_11 & 3));
                    edi_1 = arg1;
                }
                ebp_1 = (ebp_1 + eax_11);
                if (ebp_1 == 7)
                {
                    break;
                }
                i_3 = (GetTickCount() - eax_9);
            } while (i_3 < 0x1f4);
            if (ebp_1 != 7)
            {
                bool cond:0_1 = (var_51c + 1) >= 3;
                var_51c = (var_51c + 1);
                if ((!cond:0_1))
                {
                    continue;
                }
            }
            else if (var_51c < 3)
            {
                void* edx_3 = edi_1[3];
                int32_t ebx_3 = 0;
                int32_t var_518 = 0;
                int32_t eax_16;
                int32_t eax_40;
                if (*(edx_3 + 0x23004) > 0)
                {
                    int32_t var_50c_1 = 0;
                    void* var_514_1 = 0x21004;
                label_4219b2:
                    var_51c = 0;
                    while (true)
                    {
                        eax_16 = edi_1[0x16];
                        char s_1;
                        if (eax_16 == 0)
                        {
                            int32_t* eax_18 = (edi_1[3] + var_514_1);
                            s = ebx_3;
                            uint8_t var_4ff_1 = (*eax_18 >> 8);
                            eax_18 = *eax_18;
                            char var_4fe_1 = eax_18;
                            __builtin_memset(&s_1, 0, 0x1c);
                            char* edi_4;
                            *edi_4 = 0;
                        }
                        else
                        {
                            if (eax_16 != 1)
                            {
                                *edi_1[5] = 3;
                                break;
                            }
                            int32_t* eax_20 = (var_514_1 + edi_1[3]);
                            s = (ebx_3 >> 8);
                            char var_4ff_2 = ebx_3;
                            uint8_t var_4fe_2 = (*eax_20 >> 8);
                            int32_t edx_6;
                            edx_6 = *eax_20;
                            s_1 = edx_6;
                            void s_2;
                            __builtin_memset(&s_2, 0, 0x1c);
                        }
                        sub_421690(0x30, &s, &var_300, 0x20);
                        if (sub_416940((arg1 + 0x18), &var_300, 0x26) != 0)
                        {
                            sub_405320(0x1e);
                            int32_t i_4 = 0;
                            int32_t edi_7 = (ebx_3 << 7);
                            do
                            {
                                sub_421690((i_4 + 0x31), ((edi_7 + *(arg1 + 0xc)) + 0xc04), &var_300, 0x20);
                                if (sub_416940((arg1 + 0x18), &var_300, 0x26) == 0)
                                {
                                    break;
                                }
                                sub_405320(0x1e);
                                i_4 = (i_4 + 1);
                                edi_7 = (edi_7 + 0x20);
                            } while (i_4 < 4);
                            if (i_4 == 4)
                            {
                                sub_405320(0x32);
                                int32_t var_510_1 = 0;
                                int32_t eax_26;
                                int32_t ebp_3;
                                bool cond:2_1;
                                do
                                {
                                    int32_t i_5 = 0;
                                    do
                                    {
                                        &s[i_5] = rand();
                                        i_5 = (i_5 + 1);
                                    } while (i_5 < 0x20);
                                    sub_421690(0x3a, &s, &var_300, 0x20);
                                    eax_26 = sub_416940((arg1 + 0x18), &var_300, 0x26);
                                    if (eax_26 != 0)
                                    {
                                        uint32_t eax_27 = GetTickCount();
                                        ebp_3 = 0;
                                        uint32_t i_6;
                                        do
                                        {
                                            uint32_t eax_28 = sub_4169c0((arg1 + 0x18), &s, (7 - ebp_3));
                                            if (eax_28 > 0)
                                            {
                                                __builtin_memcpy(((&var_52c + ebp_3) + 0x32c), &s, ((eax_28 >> 2) << 2));
                                                int32_t esi_3;
                                                int32_t edi_9;
                                                __builtin_memcpy(edi_9, esi_3, (eax_28 & 3));
                                            }
                                            ebp_3 = (ebp_3 + eax_28);
                                            if (ebp_3 == 7)
                                            {
                                                break;
                                            }
                                            sub_405320(0xa);
                                            i_6 = (GetTickCount() - eax_27);
                                        } while (i_6 < 0x3e8);
                                        if (ebp_3 == 7)
                                        {
                                            break;
                                        }
                                    }
                                    cond:2_1 = (var_510_1 + 1) >= 3;
                                    var_510_1 = (var_510_1 + 1);
                                } while ((!cond:2_1));
                                if (((eax_26 != 0 && ebp_3 == 7) && var_510_1 < 3))
                                {
                                    char var_1fd;
                                    int32_t ecx_29;
                                    ecx_29 = var_1fd;
                                    if (ecx_29 == 0)
                                    {
                                        if (var_51c >= 3)
                                        {
                                            goto label_421d0b;
                                        }
                                        int32_t* esi_4 = arg1;
                                        sub_4267d0(*esi_4, (COMBINE(0, var_50c_1) / *(esi_4[3] + 0x23004)));
                                        int32_t eax_37 = (var_518 + 1);
                                        bool cond:3_1 = eax_37 >= *(esi_4[3] + 0x23004);
                                        var_518 = eax_37;
                                        var_514_1 = (var_514_1 + 4);
                                        var_50c_1 = (var_50c_1 + 0x64);
                                        if (cond:3_1)
                                        {
                                            goto label_421c4b;
                                        }
                                        edi_1 = esi_4;
                                        ebx_3 = eax_37;
                                        goto label_4219b2;
                                    }
                                }
                                ebx_3 = var_518;
                            }
                        }
                        bool cond:1_1 = (var_51c + 1) >= 3;
                        var_51c = (var_51c + 1);
                        if (cond:1_1)
                        {
                            break;
                        }
                        edi_1 = arg1;
                    }
                }
                else
                {
                label_421c4b:
                    __builtin_memset(&s, 0, 0x20);
                    sub_421690(0x3b, &s, &var_300, 0x20);
                    int32_t i_7 = 0;
                    do
                    {
                        eax_40 = sub_416940((arg1 + 0x18), &var_300, 0x26);
                        if (eax_40 == 0)
                        {
                            break;
                        }
                        i_7 = (i_7 + 1);
                    } while (i_7 < 2);
                }
                if (((*(edx_3 + 0x23004) <= 0 && eax_40 == 0) || (*(edx_3 + 0x23004) > 0 && (!(eax_16 != 0 && eax_16 != 1)))))
                {
                label_421d0b:
                    **(arg1 + 0x14) = 2;
                }
                if ((*(edx_3 + 0x23004) <= 0 && eax_40 != 0))
                {
                    sub_405320(0x1f4);
                    **(arg1 + 0x14) = 0;
                    sub_4267d0(*arg1, 0x64);
                }
                if ((((*(edx_3 + 0x23004) <= 0 && eax_40 == 0) || (*(edx_3 + 0x23004) > 0 && (!(eax_16 != 0 && eax_16 != 1)))) || (*(edx_3 + 0x23004) <= 0 && eax_40 != 0)))
                {
                    edi_1 = arg1;
                }
                break;
            }
            *edi_1[5] = 2;
            break;
        }
        sub_416a40(&edi_1[6]);
    }
    PostMessageA(edi_1[2], 0x468, nullptr, nullptr);
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

uint32_t sub_421d20(void* arg1)
{
    void* ecx = *arg1;
    uint32_t lpExitCode = 0;
    sub_4267d0(ecx, 0);
    void* ebx = (arg1 + 0x18);
    HANDLE eax_1;
    int32_t* edi_1;
    eax_1 = sub_4165f0(ebx, (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_1 == 0)
    {
        *edi_1[5] = 1;
    }
    else
    {
        int32_t var_514_1 = 0;
        while (true)
        {
            sub_4167f0(ebx, data_433b10, 0);
            int32_t eax_3 = data_4360f8;
            char var_528_1;
            if (eax_3 == 0)
            {
                var_528_1 = 0x4e;
            }
            if (eax_3 == 1)
            {
                var_528_1 = 0x4f;
            }
            if (eax_3 == 2)
            {
                var_528_1 = 0x45;
            }
            if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
            {
                sub_416890(ebx, var_528_1);
            }
            sub_405320(0x32);
            int32_t i = 1;
            uint8_t s;
            do
            {
                &s[i] = rand();
                i = (i + 1);
            } while (i < 5);
            int32_t eax_5 = edi_1[0x16];
            int16_t var_528_2;
            if ((eax_5 == 7 || eax_5 == 8))
            {
                var_528_2 = 0x4567;
            }
            if ((eax_5 != 7 && eax_5 != 8))
            {
                var_528_2 = 0x1234;
            }
            sub_41edb0(&edi_1[6], &edi_1[6], 2, var_528_2);
            sub_405320(0xa);
            int32_t eax_6 = edi_1[0x15];
            int32_t var_52c_2;
            char var_528_3;
            if (eax_6 == 0)
            {
                var_528_3 = eax_6;
                var_52c_2 = 0x2580;
            }
            if (eax_6 == 1)
            {
                var_528_3 = 0;
                var_52c_2 = 0x4b00;
            }
            if (eax_6 == 2)
            {
                var_528_3 = 0;
                var_52c_2 = 0x9600;
            }
            if (((eax_6 == 0 || eax_6 == 1) || eax_6 == 2))
            {
                sub_4167f0(&edi_1[6], var_52c_2, var_528_3);
            }
            sub_405320(0xc8);
            sub_416890(&edi_1[6], 0x4e);
            int32_t i_1 = 0;
            do
            {
                &s[i_1] = rand();
                i_1 = (i_1 + 1);
            } while (i_1 < 0x20);
            void var_300;
            sub_421750(0x3a, &s, &var_300, 1);
            ebx = &edi_1[6];
            if (sub_416940(ebx, &var_300, 7) == 0)
            {
                *edi_1[5] = 2;
                break;
            }
            uint32_t eax_9 = GetTickCount();
            int32_t ebp_1 = 0;
            var_524;
            uint32_t i_2;
            do
            {
                uint32_t eax_10 = sub_4169c0(ebx, &s, (9 - ebp_1));
                if (eax_10 > 0)
                {
                    __builtin_memcpy(((&var_524 + ebp_1) + 0x324), &s, ((eax_10 >> 2) << 2));
                    int32_t esi_2;
                    int32_t edi_3;
                    __builtin_memcpy(edi_3, esi_2, (eax_10 & 3));
                    edi_1 = arg1;
                }
                ebp_1 = (ebp_1 + eax_10);
                if (ebp_1 == 9)
                {
                    break;
                }
                i_2 = (GetTickCount() - eax_9);
            } while (i_2 < 0x1f4);
            if (ebp_1 != 9)
            {
                bool cond:0_1 = (var_514_1 + 1) >= 3;
                var_514_1 = (var_514_1 + 1);
                if ((!cond:0_1))
                {
                    continue;
                }
            }
            else if (var_514_1 < 3)
            {
                int32_t i_3 = 0;
                int32_t i_4 = 0;
                int32_t var_514_2;
                uint8_t var_4fe;
                if (*(edi_1[3] + 0x23004) > 0)
                {
                    int32_t var_510_2 = 0;
                    int32_t var_50c_1 = 0;
                    do
                    {
                        var_514_2 = 0;
                        bool cond:2_1;
                        do
                        {
                            int32_t eax_15 = edi_1[0x16];
                            if ((eax_15 != 2 && (eax_15 != 4 && (eax_15 != 6 && (eax_15 != 7 && (eax_15 != 8 && eax_15 != 9))))))
                            {
                                *edi_1[5] = 3;
                                goto label_4221b8;
                            }
                            int32_t ecx_15 = edi_1[3];
                            char var_4ff_1 = i_3;
                            s = (i_3 >> 8);
                            int32_t j = 0;
                            char* ecx_16 = ((var_50c_1 + ecx_15) + 0xc04);
                            do
                            {
                                int32_t edx_5;
                                edx_5 = *ecx_16;
                                &var_4fe[j] = edx_5;
                                j = (j + 1);
                                ecx_16 = &ecx_16[1];
                            } while (j < 0x80);
                            sub_421750(0x30, &s, &var_300, 0x82);
                            if (sub_416940(&edi_1[6], &var_300, 0x88) != 0)
                            {
                                uint32_t eax_19 = GetTickCount();
                                int32_t ebp_2 = 0;
                                uint32_t eax_21;
                                uint32_t j_1;
                                do
                                {
                                    eax_21 = sub_4169c0((arg1 + 0x18), &s, (9 - ebp_2));
                                    if (eax_21 > 0)
                                    {
                                        __builtin_memcpy(((&var_524 + ebp_2) + 0x324), &s, ((eax_21 >> 2) << 2));
                                        int32_t esi_3;
                                        int32_t edi_5;
                                        __builtin_memcpy(edi_5, esi_3, (eax_21 & 3));
                                    }
                                    ebp_2 = (ebp_2 + eax_21);
                                    if (ebp_2 == 9)
                                    {
                                        break;
                                    }
                                    sub_405320(0xa);
                                    j_1 = (GetTickCount() - eax_19);
                                } while (j_1 < 0x1f4);
                                if (ebp_2 == 9)
                                {
                                    char var_1fd;
                                    eax_21 = var_1fd;
                                    if (eax_21 == 0)
                                    {
                                        i_3 = i_4;
                                        edi_1 = arg1;
                                        break;
                                    }
                                }
                                i_3 = i_4;
                                edi_1 = arg1;
                            }
                            cond:2_1 = (var_514_2 + 1) < 3;
                            var_514_2 = (var_514_2 + 1);
                        } while (cond:2_1);
                        sub_405320(0xa);
                        if (var_514_2 >= 3)
                        {
                            break;
                        }
                        sub_4267d0(*edi_1, (COMBINE(0, var_510_2) / *(edi_1[3] + 0x23004)));
                        i_3 = (i_3 + 1);
                        var_50c_1 = (var_50c_1 + 0x80);
                        i_4 = i_3;
                        var_510_2 = (var_510_2 + 0x64);
                    } while (i_3 < *(edi_1[3] + 0x23004));
                }
                if ((*(edi_1[3] + 0x23004) <= 0 || (*(edi_1[3] + 0x23004) > 0 && var_514_2 < 3)))
                {
                    __builtin_memset(&s, 0, 0x20);
                    void* edi_6 = *(arg1 + 0xc);
                    int32_t esi_6 = 0;
                    int32_t eax_28 = *(edi_6 + 0x23004);
                    s = 0xaa;
                    int32_t eax_29 = (eax_28 << 7);
                    var_4fe = (eax_29 >> 0x18);
                    uint8_t var_4fd_1 = (eax_29 >> 0x10);
                    int32_t ecx_27 = 0;
                    char var_4ff_2 = 0x55;
                    uint8_t var_4fc_1 = (eax_29 >> 8);
                    char var_4fb_1 = eax_29;
                    if (eax_29 > 0)
                    {
                        do
                        {
                            int32_t edx_17;
                            edx_17 = *((edi_6 + esi_6) + 0xc04);
                            ecx_27 = (ecx_27 + edx_17);
                            esi_6 = (esi_6 + 1);
                        } while (esi_6 < eax_29);
                    }
                    uint8_t var_4fa_1 = (ecx_27 >> 0x18);
                    char var_4f7_1 = ecx_27;
                    uint8_t var_4f9_1 = (ecx_27 >> 0x10);
                    uint8_t var_4f8_1 = (ecx_27 >> 8);
                    sub_421750(0x3b, &s, &var_300, 0xa);
                    int32_t esi_7 = 0;
                    while (true)
                    {
                        sub_405320(0x64);
                        if (sub_416940((arg1 + 0x18), &var_300, 0x10) == 0)
                        {
                            **(arg1 + 0x14) = 2;
                            break;
                        }
                        esi_7 = (esi_7 + 1);
                        if (esi_7 >= 2)
                        {
                            sub_405320(0x1f4);
                            **(arg1 + 0x14) = 0;
                            sub_4267d0(*arg1, 0x64);
                            break;
                        }
                    }
                    edi_1 = arg1;
                    break;
                }
            }
            *edi_1[5] = 2;
            break;
        }
    label_4221b8:
        sub_416a40(&edi_1[6]);
    }
    PostMessageA(edi_1[2], 0x468, nullptr, nullptr);
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

uint32_t sub_422200(void* arg1)
{
    int32_t ebx = 0;
    void* ecx = *arg1;
    uint32_t lpExitCode = 0;
    char var_69 = 0;
    sub_4267d0(ecx, 0);
    HANDLE eax_1;
    void* edi_1;
    eax_1 = sub_4165f0((arg1 + 0x14), (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_1 == 0)
    {
        **(arg1 + 0x10) = 1;
    }
    else
    {
        **(arg1 + 0x10) = 2;
        int32_t eax_3 = data_4360f8;
        char __saved_esi_1;
        if (eax_3 == 0)
        {
            __saved_esi_1 = 0x4e;
        }
        if (eax_3 == 1)
        {
            __saved_esi_1 = 0x4f;
        }
        if (eax_3 == 2)
        {
            __saved_esi_1 = 0x45;
        }
        if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
        {
            sub_416890(edi_1, __saved_esi_1);
        }
        void* i = nullptr;
        void var_64;
        do
        {
            if (sub_41f150(i, edi_1, 7, &var_64) != 0)
            {
                break;
            }
            sub_405320(0x12c);
            i = (i + 1);
        } while (i < 6);
        if (i < 5)
        {
            int32_t var_61;
            uint32_t ecx_6 = *var_61[1];
            uint32_t eax_7 = (var_61 << 8);
            int16_t eax_8 = (eax_7 + ecx_6);
            if (eax_7 == (-ecx_6))
            {
                **(arg1 + 0x10) = 3;
            }
            else
            {
                *(arg1 + 0x54) = eax_8;
                int32_t eax_10;
                if (eax_8 > 0)
                {
                    int32_t eax_24;
                    do
                    {
                        eax_10 = sub_41f150(i, (arg1 + 0x14), 8, &var_64);
                        if (eax_10 != 0)
                        {
                            var_69 = 0;
                            uint32_t eax_14 = (var_61 * 0x101);
                            int32_t edx_5;
                            edx_5 = *(arg1 + 0x54);
                            if (eax_14 >= edx_5)
                            {
                                break;
                            }
                            char var_58;
                            edx_5 = var_58;
                            char var_5a;
                            int32_t ecx_7;
                            ecx_7 = var_5a;
                            *(arg1 + 0x56) = eax_14;
                            *(arg1 + 0x58) = *ecx_7[1];
                            *(arg1 + 0x59) = var_61;
                            *(arg1 + 0x5d) = ecx_7;
                            char var_59;
                            int32_t eax_15;
                            eax_15 = var_59;
                            char var_56;
                            ecx_7 = var_56;
                            int32_t edx_7 = ((edx_5 << 8) + eax_15);
                            char var_54;
                            eax_15 = var_54;
                            *(arg1 + 0x5e) = edx_7;
                            char var_57;
                            edx_7 = var_57;
                            int32_t ecx_9 = ((ecx_7 << 8) + edx_7);
                            char var_52;
                            edx_7 = var_52;
                            *(arg1 + 0x60) = ecx_9;
                            char var_55;
                            ecx_9 = var_55;
                            int32_t eax_17 = ((eax_15 << 8) + ecx_9);
                            char var_50;
                            ecx_9 = var_50;
                            *(arg1 + 0x62) = eax_17;
                            char var_53;
                            eax_17 = var_53;
                            int32_t edx_9 = ((edx_7 << 8) + eax_17);
                            char var_4e;
                            eax_17 = var_4e;
                            *(arg1 + 0x64) = edx_9;
                            char var_51;
                            edx_9 = var_51;
                            int32_t ecx_11 = ((ecx_9 << 8) + edx_9);
                            char var_4c;
                            edx_9 = var_4c;
                            *(arg1 + 0x66) = ecx_11;
                            char var_4f;
                            ecx_11 = var_4f;
                            int32_t eax_19 = ((eax_17 << 8) + ecx_11);
                            char var_4a;
                            ecx_11 = var_4a;
                            *(arg1 + 0x68) = eax_19;
                            char var_4d;
                            eax_19 = var_4d;
                            int32_t edx_11 = ((edx_9 << 8) + eax_19);
                            char var_48;
                            eax_19 = var_48;
                            *(arg1 + 0x6a) = edx_11;
                            char var_4b;
                            edx_11 = var_4b;
                            int32_t ecx_13 = ((ecx_11 << 8) + edx_11);
                            char var_46;
                            edx_11 = var_46;
                            *(arg1 + 0x6c) = ecx_13;
                            char var_49;
                            ecx_13 = var_49;
                            int32_t eax_21 = ((eax_19 << 8) + ecx_13);
                            char var_44;
                            ecx_13 = var_44;
                            *(arg1 + 0x6e) = eax_21;
                            char var_47;
                            eax_21 = var_47;
                            uint16_t edx_13 = ((edx_11 << 8) + eax_21);
                            char var_42;
                            eax_21 = var_42;
                            *(arg1 + 0x70) = edx_13;
                            char var_41;
                            edx_13 = var_41;
                            char var_45;
                            *(arg1 + 0x72) = ((ecx_13 << 8) + var_45);
                            *(arg1 + 0x76) = edx_13;
                            char var_3f;
                            int16_t ecx_15;
                            ecx_15 = var_3f;
                            char var_43;
                            *(arg1 + 0x74) = ((eax_21 << 8) + var_43);
                            char var_40;
                            int16_t eax_23;
                            eax_23 = var_40;
                            *(arg1 + 0x78) = ecx_15;
                            *(arg1 + 0x77) = eax_23;
                            void var_3e;
                            __builtin_memcpy((arg1 + 0x79), &var_3e, 0x1c);
                            int16_t* esi_1;
                            int16_t* edi_3;
                            *edi_3 = *esi_1;
                            void* esi_2 = &esi_1[1];
                            edi_3[1] = *esi_2;
                            i = (esi_2 + 1);
                            PostMessageA(*(arg1 + 8), 0x46a, nullptr, nullptr);
                        }
                        else
                        {
                            if (ebx != 0)
                            {
                                ebx = (ebx - 1);
                            }
                            eax_10 = var_69;
                            eax_10 = (eax_10 + 1);
                            var_69 = eax_10;
                            if (eax_10 > 5)
                            {
                                break;
                            }
                        }
                        ebx = (ebx + 1);
                        eax_24 = *(arg1 + 0x54);
                    } while (ebx < eax_24);
                }
                if ((eax_8 <= 0 || (eax_8 > 0 && (!(eax_10 == 0 && eax_10 > 5)))))
                {
                    sub_405320(0x64);
                    **(arg1 + 0x10) = 0;
                    sub_4267d0(*arg1, 0x64);
                }
                if (((eax_8 > 0 && eax_10 == 0) && eax_10 > 5))
                {
                    **(arg1 + 0x10) = 4;
                }
            }
        }
        sub_416a40((arg1 + 0x14));
    }
    PostMessageA(*(arg1 + 8), 0x46a, nullptr, nullptr);
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

uint32_t sub_422510(void* arg1)
{
    void* esi = arg1;
    void* ecx = *esi;
    uint32_t lpExitCode = 0;
    sub_4267d0(ecx, 0);
    void* ebx = (esi + 0x18);
    HANDLE eax_1;
    int32_t edi;
    eax_1 = sub_4165f0(ebx, (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_1 == 0)
    {
        **(esi + 0x14) = 1;
    }
    else
    {
        int32_t var_524_1 = edi;
        while (true)
        {
            sub_4167f0(ebx, data_433b10, 0);
            int32_t eax_3 = data_4360f8;
            char var_538_1;
            if (eax_3 == 0)
            {
                var_538_1 = 0x4e;
            }
            if (eax_3 == 1)
            {
                var_538_1 = 0x4f;
            }
            if (eax_3 == 2)
            {
                var_538_1 = 0x45;
            }
            if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
            {
                sub_416890(ebx, var_538_1);
            }
            sub_405320(0x64);
            char var_500 = 0x22;
            void var_300;
            sub_4216f0(0x80, &var_500, &var_300, 1);
            if (sub_416940(ebx, &var_300, 8) == 0)
            {
            label_42267d:
                **(esi + 0x14) = 2;
                break;
            }
            uint32_t eax_5 = GetTickCount();
            int32_t ebp_1 = 0;
            var_534;
            uint32_t i;
            do
            {
                uint32_t eax_6 = sub_4169c0(ebx, &var_500, (8 - ebp_1));
                if (eax_6 > 0)
                {
                    __builtin_memcpy(((&var_534 + ebp_1) + 0x334), &var_500, ((eax_6 >> 2) << 2));
                    int32_t esi_1;
                    int32_t edi_2;
                    __builtin_memcpy(edi_2, esi_1, (eax_6 & 3));
                }
                ebp_1 = (ebp_1 + eax_6);
                if (ebp_1 == 8)
                {
                    break;
                }
                i = (GetTickCount() - eax_5);
            } while (i < 0x1f4);
            char var_1fc;
            char var_1fb;
            if ((ebp_1 == 8 && (var_1fb == 0x33 && var_1fc == 0x80)))
            {
                if (var_524_1 >= 5)
                {
                    **(arg1 + 0x14) = 2;
                }
                else
                {
                    var_500 = 0x55;
                    sub_4216f0(0x80, &var_500, &var_300, 1);
                    sub_416940(ebx, &var_300, 8);
                    sub_405320(0xc8);
                    sub_416a40(ebx);
                    sub_405320(0x64);
                    uint32_t (__stdcall* const edi_3)() = sub_4165f0(ebx, (data_433b0c + 1), 0x2580, data_4360fc);
                    sub_4167f0(ebx, 0x2580, 0);
                    sub_416890(ebx, 0x4e);
                    int32_t var_524_2 = 0;
                    while (true)
                    {
                        sub_405320(0x64);
                        var_500 = 0x33;
                        char var_4ff_1 = 0;
                        char var_4fe_1 = 0;
                        char var_4fd_1 = 0x25;
                        char var_4fc = 0x80;
                        sub_4216f0(0x81, &var_500, &var_300, 5);
                        if (sub_416940(ebx, &var_300, 0xc) != 0)
                        {
                            uint32_t eax_13 = edi_3();
                            int32_t ebp_2 = 0;
                            uint32_t i_1;
                            do
                            {
                                uint32_t eax_14 = sub_4169c0(ebx, &var_500, (8 - ebp_2));
                                if (eax_14 > 0)
                                {
                                    __builtin_memcpy(((&var_534 + ebp_2) + 0x334), &var_500, ((eax_14 >> 2) << 2));
                                    int32_t esi_2;
                                    int32_t edi_5;
                                    __builtin_memcpy(edi_5, esi_2, (eax_14 & 3));
                                    edi_3 = GetTickCount;
                                }
                                ebp_2 = (ebp_2 + eax_14);
                                if (ebp_2 == 8)
                                {
                                    break;
                                }
                                i_1 = (edi_3() - eax_13);
                            } while (i_1 < 0x1f4);
                            if ((((ebp_2 == 8 && var_1fb != 0x11) || ((ebp_2 == 8 && var_1fb == 0x11) && var_1fc != 0x81)) || ebp_2 != 8))
                            {
                                bool cond:1_1 = (var_524_2 + 1) < 5;
                                var_524_2 = (var_524_2 + 1);
                                if ((!cond:1_1))
                                {
                                    **(arg1 + 0x14) = 2;
                                    break;
                                }
                                continue;
                            }
                            if (((ebp_2 == 8 && var_1fb == 0x11) && var_1fc == 0x81))
                            {
                                if (var_524_2 >= 5)
                                {
                                label_42283a:
                                    **(arg1 + 0x14) = 2;
                                    break;
                                }
                                int32_t var_524_3 = 0;
                                int32_t eax_21;
                                while (true)
                                {
                                    sub_405320(0x64);
                                    var_500 = 0x44;
                                    sub_4216f0(0x81, &var_500, &var_300, 1);
                                    eax_21 = sub_416940(ebx, &var_300, 8);
                                    if (eax_21 == 0)
                                    {
                                        break;
                                    }
                                    uint32_t eax_22 = edi_3();
                                    int32_t ebp_3 = 0;
                                    uint32_t i_2;
                                    do
                                    {
                                        uint32_t eax_23 = sub_4169c0(ebx, &var_500, (8 - ebp_3));
                                        if (eax_23 > 0)
                                        {
                                            __builtin_memcpy(((&var_534 + ebp_3) + 0x334), &var_500, ((eax_23 >> 2) << 2));
                                            int32_t esi_3;
                                            int32_t edi_7;
                                            __builtin_memcpy(edi_7, esi_3, (eax_23 & 3));
                                            edi_3 = GetTickCount;
                                        }
                                        ebp_3 = (ebp_3 + eax_23);
                                        if (ebp_3 == 8)
                                        {
                                            break;
                                        }
                                        i_2 = (edi_3() - eax_22);
                                    } while (i_2 < 0x1f4);
                                    if ((ebp_3 == 8 && (var_1fb == 0x11 && var_1fc == 0x81)))
                                    {
                                        if (var_524_3 < 5)
                                        {
                                            int32_t var_524_4 = 0;
                                            int32_t eax_30;
                                            while (true)
                                            {
                                                sub_405320(0x64);
                                                esi = arg1;
                                                var_500 = 0;
                                                char var_4ff_2 = 0;
                                                void* eax_29 = *(esi + 0xc);
                                                uint8_t var_4fe_2 = (*(eax_29 + 0x23008) >> 8);
                                                char var_4fd_2 = *(eax_29 + 0x23008);
                                                sub_4216f0(0x82, &var_500, &var_300, 4);
                                                eax_30 = sub_416940(ebx, &var_300, 0xb);
                                                if (eax_30 == 0)
                                                {
                                                    break;
                                                }
                                                uint32_t eax_31 = edi_3();
                                                int32_t ebp_4 = 0;
                                                uint32_t i_3;
                                                do
                                                {
                                                    uint32_t eax_33 = sub_4169c0(ebx, &var_500, (8 - ebp_4));
                                                    if (eax_33 > 0)
                                                    {
                                                        __builtin_memcpy(((&var_534 + ebp_4) + 0x334), &var_500, ((eax_33 >> 2) << 2));
                                                        int32_t esi_4;
                                                        int32_t edi_9;
                                                        __builtin_memcpy(edi_9, esi_4, (eax_33 & 3));
                                                        edi_3 = GetTickCount;
                                                    }
                                                    ebp_4 = (ebp_4 + eax_33);
                                                    if (ebp_4 == 8)
                                                    {
                                                        break;
                                                    }
                                                    i_3 = (edi_3() - eax_31);
                                                } while (i_3 < 0x1f4);
                                                if ((ebp_4 == 8 && (var_1fb == 0x11 && var_1fc == 0x81)))
                                                {
                                                    if (var_524_4 < 5)
                                                    {
                                                        int32_t var_524_5 = 0;
                                                        int32_t eax_37;
                                                        while (true)
                                                        {
                                                            sub_405320(0x64);
                                                            var_500 = 0x55;
                                                            sub_4216f0(0x81, &var_500, &var_300, 1);
                                                            eax_37 = sub_416940(ebx, &var_300, 8);
                                                            if (eax_37 == 0)
                                                            {
                                                                break;
                                                            }
                                                            uint32_t eax_38 = edi_3();
                                                            int32_t ebp_5 = 0;
                                                            uint32_t i_4;
                                                            do
                                                            {
                                                                uint32_t eax_40 = sub_4169c0(ebx, &var_500, (8 - ebp_5));
                                                                if (eax_40 > 0)
                                                                {
                                                                    __builtin_memcpy(((&var_534 + ebp_5) + 0x334), &var_500, ((eax_40 >> 2) << 2));
                                                                    int32_t esi_5;
                                                                    int32_t edi_11;
                                                                    __builtin_memcpy(edi_11, esi_5, (eax_40 & 3));
                                                                    edi_3 = GetTickCount;
                                                                }
                                                                ebp_5 = (ebp_5 + eax_40);
                                                                if (ebp_5 == 8)
                                                                {
                                                                    break;
                                                                }
                                                                i_4 = (edi_3() - eax_38);
                                                            } while (i_4 < 0x1f4);
                                                            if ((ebp_5 == 8 && (var_1fb == 0x11 && var_1fc == 0x81)))
                                                            {
                                                                if (var_524_5 < 5)
                                                                {
                                                                    int32_t eax_46 = 0;
                                                                    int32_t esi_6 = 0;
                                                                    int32_t var_518_1 = 0;
                                                                    if ((*(*(arg1 + 0xc) + 0x23008) & 0xffffffc0) <= 0)
                                                                    {
                                                                    label_422d0f:
                                                                        int32_t var_524_7 = 0;
                                                                        int32_t eax_61;
                                                                        while (true)
                                                                        {
                                                                            sub_405320(0x64);
                                                                            var_500 = 0x66;
                                                                            sub_4216f0(0x81, &var_500, &var_300, 1);
                                                                            esi = arg1;
                                                                            eax_61 = sub_416940((esi + 0x18), &var_300, 8);
                                                                            if (eax_61 == 0)
                                                                            {
                                                                                break;
                                                                            }
                                                                            uint32_t eax_62 = GetTickCount();
                                                                            int32_t ebp_8 = 0;
                                                                            uint32_t i_5;
                                                                            do
                                                                            {
                                                                                uint32_t eax_64 = sub_4169c0((arg1 + 0x18), &var_500, (8 - ebp_8));
                                                                                if (eax_64 > 0)
                                                                                {
                                                                                    __builtin_memcpy(((&var_534 + ebp_8) + 0x334), &var_500, ((eax_64 >> 2) << 2));
                                                                                    int32_t esi_12;
                                                                                    int32_t edi_15;
                                                                                    __builtin_memcpy(edi_15, esi_12, (eax_64 & 3));
                                                                                }
                                                                                ebp_8 = (ebp_8 + eax_64);
                                                                                if (ebp_8 == 8)
                                                                                {
                                                                                    break;
                                                                                }
                                                                                i_5 = (GetTickCount() - eax_62);
                                                                            } while (i_5 < 0x1f4);
                                                                            if ((ebp_8 == 8 && (var_1fb == 0x11 && var_1fc == 0x81)))
                                                                            {
                                                                                if (var_524_7 < 5)
                                                                                {
                                                                                    var_500 = 0x99;
                                                                                    sub_4216f0(0x81, &var_500, &var_300, 1);
                                                                                    sub_416940((arg1 + 0x18), &var_300, 8);
                                                                                    sub_405320(0x1f4);
                                                                                    **(arg1 + 0x14) = 0;
                                                                                    sub_4267d0(*arg1, 0x64);
                                                                                }
                                                                                else
                                                                                {
                                                                                    **(arg1 + 0x14) = 2;
                                                                                }
                                                                                break;
                                                                            }
                                                                            bool cond:6_1 = (var_524_7 + 1) < 5;
                                                                            var_524_7 = (var_524_7 + 1);
                                                                            if ((!cond:6_1))
                                                                            {
                                                                                **(arg1 + 0x14) = 2;
                                                                                break;
                                                                            }
                                                                        }
                                                                        if (eax_61 == 0)
                                                                        {
                                                                            goto label_42267d;
                                                                        }
                                                                        goto label_422e71;
                                                                    }
                                                                    int32_t var_510_1 = 0;
                                                                    int32_t var_51c_1 = 0;
                                                                label_422b84:
                                                                    int32_t var_524_6 = 0;
                                                                    uint32_t ecx_53 = (eax_46 >> 0x10);
                                                                    uint32_t edx_22 = (eax_46 >> 8);
                                                                    uint32_t var_50c_1 = ecx_53;
                                                                    uint32_t var_504_1 = edx_22;
                                                                    while (true)
                                                                    {
                                                                        char var_4ff_3 = ecx_53;
                                                                        char var_4fd_3 = eax_46;
                                                                        int32_t eax_47 = *(arg1 + 0xc);
                                                                        var_500 = 0;
                                                                        char var_4fe_3 = edx_22;
                                                                        int32_t i_8 = 0x40;
                                                                        char* eax_48 = (((((esi_6 & 1) + ((esi_6 >> 1) << 1)) << 6) + eax_47) + 0xc04);
                                                                        int32_t ecx_55 = (&var_4fc - eax_48);
                                                                        int32_t i_6;
                                                                        do
                                                                        {
                                                                            edx_22 = *eax_48;
                                                                            eax_48[ecx_55] = edx_22;
                                                                            eax_48 = &eax_48[1];
                                                                            i_6 = i_8;
                                                                            i_8 = (i_8 - 1);
                                                                        } while (i_6 != 1);
                                                                        sub_4216f0(0x82, &var_500, &var_300, 0x44);
                                                                        if (sub_416940((arg1 + 0x18), &var_300, 0x4b) != 0)
                                                                        {
                                                                            uint32_t eax_50 = edi_3();
                                                                            int32_t ebp_7 = 0;
                                                                            uint32_t i_7;
                                                                            do
                                                                            {
                                                                                uint32_t eax_52 = sub_4169c0((arg1 + 0x18), &var_500, (8 - ebp_7));
                                                                                if (eax_52 > 0)
                                                                                {
                                                                                    __builtin_memcpy(((&var_534 + ebp_7) + 0x334), &var_500, ((eax_52 >> 2) << 2));
                                                                                    int32_t esi_10;
                                                                                    int32_t edi_13;
                                                                                    __builtin_memcpy(edi_13, esi_10, (eax_52 & 3));
                                                                                    edi_3 = GetTickCount;
                                                                                }
                                                                                ebp_7 = (ebp_7 + eax_52);
                                                                                if (ebp_7 == 8)
                                                                                {
                                                                                    break;
                                                                                }
                                                                                sub_405320(0xa);
                                                                                i_7 = (edi_3() - eax_50);
                                                                            } while (i_7 < 0x1f4);
                                                                            if ((ebp_7 == 8 && (var_1fb == 0x11 && var_1fc == 0x81)))
                                                                            {
                                                                                if (var_524_6 >= 3)
                                                                                {
                                                                                    goto label_42283a;
                                                                                }
                                                                                sub_4267d0(*arg1, (COMBINE(0, var_510_1) / (*(*(arg1 + 0xc) + 0x23008) >> 6)));
                                                                                var_51c_1 = (var_51c_1 + 0x40);
                                                                                bool cond:7_1 = (var_518_1 + 1) >= (*(*(arg1 + 0xc) + 0x23008) >> 6);
                                                                                var_518_1 = (var_518_1 + 1);
                                                                                var_510_1 = (var_510_1 + 0x64);
                                                                                if (cond:7_1)
                                                                                {
                                                                                    goto label_422d0f;
                                                                                }
                                                                                eax_46 = var_51c_1;
                                                                                esi_6 = var_518_1;
                                                                                goto label_422b84;
                                                                            }
                                                                        }
                                                                        bool cond:5_1 = (var_524_6 + 1) >= 3;
                                                                        var_524_6 = (var_524_6 + 1);
                                                                        if (cond:5_1)
                                                                        {
                                                                            break;
                                                                        }
                                                                        eax_46 = var_51c_1;
                                                                        edx_22 = var_504_1;
                                                                        ecx_53 = var_50c_1;
                                                                    }
                                                                    goto label_42283a;
                                                                }
                                                                **(arg1 + 0x14) = 2;
                                                                goto label_422e71;
                                                            }
                                                            bool cond:4_1 = (var_524_5 + 1) < 5;
                                                            var_524_5 = (var_524_5 + 1);
                                                            if ((!cond:4_1))
                                                            {
                                                                **(arg1 + 0x14) = 2;
                                                                break;
                                                            }
                                                        }
                                                        if (eax_37 != 0)
                                                        {
                                                            goto label_422e71;
                                                        }
                                                        goto label_42281e;
                                                    }
                                                    **(arg1 + 0x14) = 2;
                                                    goto label_422e71;
                                                }
                                                bool cond:3_1 = (var_524_4 + 1) < 5;
                                                var_524_4 = (var_524_4 + 1);
                                                if ((!cond:3_1))
                                                {
                                                    **(arg1 + 0x14) = 2;
                                                    break;
                                                }
                                            }
                                            if (eax_30 == 0)
                                            {
                                                goto label_42267d;
                                            }
                                            goto label_422e71;
                                        }
                                        **(arg1 + 0x14) = 2;
                                        goto label_422e71;
                                    }
                                    bool cond:2_1 = (var_524_3 + 1) < 5;
                                    var_524_3 = (var_524_3 + 1);
                                    if ((!cond:2_1))
                                    {
                                        **(arg1 + 0x14) = 2;
                                        break;
                                    }
                                }
                                if (eax_21 != 0)
                                {
                                    break;
                                }
                            }
                        }
                    label_42281e:
                        **(arg1 + 0x14) = 2;
                        break;
                    }
                }
                break;
            }
            bool cond:0_1 = (var_524_1 + 1) < 5;
            var_524_1 = (var_524_1 + 1);
            if ((!cond:0_1))
            {
                **(arg1 + 0x14) = 2;
                break;
            }
            esi = arg1;
        }
    label_422e71:
        sub_416a40((arg1 + 0x18));
    }
    PostMessageA(*(arg1 + 8), 0x468, nullptr, nullptr);
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

uint32_t sub_422ec0(void* arg1)
{
    void* ecx = *arg1;
    uint32_t lpExitCode = 0;
    sub_4267d0(ecx, 0);
    HANDLE eax_1;
    int32_t* edi_1;
    eax_1 = sub_4165f0((arg1 + 0x18), (data_433b0c + 1), data_433b10, data_4360fc);
    if (eax_1 == 0)
    {
        *edi_1[5] = 1;
    }
    else
    {
        int32_t var_520_1 = 0;
        while (true)
        {
            sub_4167f0((arg1 + 0x18), data_433b10, 0);
            int32_t eax_3 = data_4360f8;
            char var_534_1;
            if (eax_3 == 0)
            {
                var_534_1 = 0x4e;
            }
            if (eax_3 == 1)
            {
                var_534_1 = 0x4f;
            }
            if (eax_3 == 2)
            {
                var_534_1 = 0x45;
            }
            if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
            {
                sub_416890((arg1 + 0x18), var_534_1);
            }
            sub_405320(0x64);
            char var_500 = 0xa5;
            char var_4ff_1 = 0xa5;
            char var_4fe_1 = 0xef;
            char var_4fd_1 = 0x1a;
            char var_4fc_1 = 1;
            char var_4fb = 0xa;
            if (sub_416940((arg1 + 0x18), &var_500, 6) != 0)
            {
                uint32_t eax_5 = GetTickCount();
                int32_t ebp_1 = 0;
                var_530;
                void var_200;
                uint32_t eax_7;
                uint32_t i;
                do
                {
                    eax_7 = sub_4169c0((arg1 + 0x18), &var_200, (6 - ebp_1));
                    if (eax_7 > 0)
                    {
                        __builtin_memcpy(((&var_530 + ebp_1) + 0x130), &var_200, ((eax_7 >> 2) << 2));
                        int32_t esi;
                        int32_t edi_3;
                        __builtin_memcpy(edi_3, esi, (eax_7 & 3));
                        edi_1 = arg1;
                    }
                    ebp_1 = (ebp_1 + eax_7);
                    if (ebp_1 == 6)
                    {
                        break;
                    }
                    i = (GetTickCount() - eax_5);
                } while (i < 0x1f4);
                if (ebp_1 != 6)
                {
                    goto label_42302e;
                }
                char var_400;
                if (var_400 != 0xa5)
                {
                label_42302e:
                    bool cond:0_1 = (var_520_1 + 1) < 5;
                    var_520_1 = (var_520_1 + 1);
                    if ((!cond:0_1))
                    {
                        *edi_1[5] = 2;
                        break;
                    }
                    continue;
                }
                else
                {
                    char var_3ff;
                    if (var_3ff != 0xa5)
                    {
                        goto label_42302e;
                    }
                    char var_3fe;
                    eax_7 = var_3fe;
                    if (eax_7 != 0)
                    {
                        goto label_42302e;
                    }
                    char var_3fd;
                    if (var_3fd != 1)
                    {
                        goto label_42302e;
                    }
                    char var_3fc;
                    if (var_3fc != 0x30)
                    {
                        goto label_42302e;
                    }
                    char var_3fb;
                    if (var_3fb != 0x31)
                    {
                        goto label_42302e;
                    }
                    if (var_520_1 >= 5)
                    {
                        *edi_1[5] = 2;
                        break;
                    }
                    sub_405320(0xc8);
                    sub_416a40((arg1 + 0x18));
                    sub_405320(0x64);
                    edi_1 = sub_4165f0((arg1 + 0x18), (data_433b0c + 1), 0x2580, data_4360fc);
                    sub_4167f0((arg1 + 0x18), 0x2580, 0);
                    sub_416890((arg1 + 0x18), 0x4e);
                    int32_t ebx_1 = 0;
                    int32_t var_514_1 = 0;
                    if (*(edi_1[3] + 0x23004) <= 0)
                    {
                    label_4232ae:
                        sub_405320(0x1f4);
                        *edi_1[5] = 0;
                        sub_4267d0(*edi_1, 0x64);
                        break;
                    }
                    int32_t var_518_2 = 0;
                label_4230c8:
                    int32_t eax_14 = (ebx_1 + 1);
                    int32_t var_520_2 = 0;
                    uint8_t var_50c_1 = (eax_14 >> 8);
                    uint8_t eax_15 = (ebx_1 + 1);
                    int32_t ebp_3 = (ebx_1 << 7);
                    int32_t var_508_1 = ebp_3;
                    bool cond:1_1;
                    do
                    {
                        sub_405320(0x96);
                        uint8_t var_4fd_2 = eax_15;
                        void* eax_17 = edi_1[3];
                        var_500 = 0xaa;
                        char var_4ff_2 = 0x55;
                        uint8_t var_4fe_2 = var_50c_1;
                        if (ebx_1 != (*(eax_17 + 0x23004) - 1))
                        {
                            char var_4fc_3 = 0x80;
                        }
                        else
                        {
                            int32_t ecx_20;
                            ecx_20 = *(eax_17 + 0x2300c);
                            char var_4fc_2 = ecx_20;
                        }
                        void* eax_18 = ((eax_17 + ebp_3) + 0xc04);
                        uint8_t* ecx_21 = (&var_4fb - eax_18);
                        int32_t i_3 = 0x80;
                        int32_t i_1;
                        do
                        {
                            *(ecx_21 + eax_18) = *eax_18;
                            eax_18 = (eax_18 + 1);
                            i_1 = i_3;
                            i_3 = (i_3 - 1);
                        } while (i_1 != 1);
                        int16_t eax_19 = sub_41e860(&var_500, 0x85);
                        char var_47a_1 = *eax_19[1];
                        char var_47b_1 = eax_19;
                        if (sub_416940(&edi_1[6], &var_500, 0x87) != 0)
                        {
                            uint32_t eax_21 = GetTickCount();
                            int32_t ebp_4 = 0;
                            uint32_t eax_23;
                            uint32_t i_2;
                            do
                            {
                                eax_23 = sub_4169c0((arg1 + 0x18), &var_200, (6 - ebp_4));
                                if (eax_23 > 0)
                                {
                                    __builtin_memcpy(((&var_530 + ebp_4) + 0x130), &var_200, ((eax_23 >> 2) << 2));
                                    int32_t esi_1;
                                    int32_t edi_5;
                                    __builtin_memcpy(edi_5, esi_1, (eax_23 & 3));
                                }
                                ebp_4 = (ebp_4 + eax_23);
                                if (ebp_4 == 6)
                                {
                                    break;
                                }
                                sub_405320(0xa);
                                i_2 = (GetTickCount() - eax_21);
                            } while (i_2 < 0x1f4);
                            if ((ebp_4 == 6 && (var_400 == 0xa5 && var_3ff == 0xa5)))
                            {
                                eax_23 = var_3fc;
                                if (eax_23 == 0x30)
                                {
                                    if (var_520_2 >= 3)
                                    {
                                        edi_1 = arg1;
                                        goto label_42329a;
                                    }
                                    int32_t* esi_2 = arg1;
                                    sub_4267d0(*esi_2, (COMBINE(0, var_518_2) / *(esi_2[3] + 0x23004)));
                                    var_514_1 = eax_14;
                                    var_518_2 = (var_518_2 + 0x64);
                                    if (eax_14 < *(esi_2[3] + 0x23004))
                                    {
                                        ebx_1 = eax_14;
                                        edi_1 = esi_2;
                                        goto label_4230c8;
                                    }
                                label_4232a2:
                                    edi_1 = arg1;
                                    goto label_4232ae;
                                }
                                if (eax_23 == 0x55)
                                {
                                    goto label_4232a2;
                                }
                            }
                            ebx_1 = var_514_1;
                            edi_1 = arg1;
                            ebp_3 = var_508_1;
                        }
                        cond:1_1 = (var_520_2 + 1) >= 3;
                        var_520_2 = (var_520_2 + 1);
                    } while ((!cond:1_1));
                }
            }
        label_42329a:
            *edi_1[5] = 2;
            break;
        }
        sub_416a40(&edi_1[6]);
    }
    PostMessageA(edi_1[2], 0x468, nullptr, nullptr);
    sub_404a80();
    GetExitCodeThread(data_4360ec, &lpExitCode);
    AfxEndThread(lpExitCode, 1);
    return 0;
}

void*** __thiscall sub_423320(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_4295bd;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x86, arg2);
    int32_t var_4 = 0;
    CWnd::CWnd(&esi[0x18]);
    esi[0x18] = 0x42ab00;
    var_4 = 1;
    CWnd::CWnd(&esi[0x28]);
    esi[0x28] = 0x42ab00;
    var_4 = 2;
    CWnd::CWnd(&esi[0x38]);
    esi[0x38] = 0x42ab00;
    var_4 = 3;
    CWnd::CWnd(&esi[0x48]);
    esi[0x48] = 0x42ab00;
    var_4 = 4;
    CWnd::CWnd(&esi[0x58]);
    int32_t ecx_5 = var_c;
    esi[0x58] = 0x42ab00;
    *esi = &data_42c248;
    esi[0x68] = 0;
    *fsbase = ecx_5;
    return esi;
}

CDialog* __thiscall sub_4233f0(CDialog* arg1, char arg2)
{
    sub_414c20(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __thiscall sub_423410(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x3f0, (arg1 + 0x60));
    DDX_Control(arg2, 0x3f1, (arg1 + 0xa0));
    DDX_Control(arg2, 0x3f3, (arg1 + 0xe0));
    DDX_Control(arg2, 0x3f2, (arg1 + 0x120));
    DDX_Control(arg2, 0x3f4, (arg1 + 0x160));
    return DDX_Check(arg2, 0x44e, (arg1 + 0x1a0));
}

int32_t sub_423490() __pure
{
    return CDialog::messageMap;
}

int32_t sub_4234a0() __pure
{
    return 0x42c1f8;
}

int32_t __fastcall sub_4234b0(CDialog* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429600;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* _Buffer_1;
    char* _Buffer = _Buffer_1;
    int32_t esi;
    int32_t var_64 = esi;
    int32_t edi;
    int32_t var_68 = edi;
    int32_t var_54;
    CString::CString(&var_54);
    int32_t var_4 = 0;
    CString var_58;
    CString::CString(&var_58);
    var_4 = 1;
    void var_5c;
    CString::CString(&var_5c);
    var_4 = 2;
    void var_48;
    sub_416590(&var_48);
    var_4 = 3;
    CWnd::UpdateData(arg1, 1);
    HWND hWnd = *(arg1 + 0x80);
    LPARAM __saved_ebx_1 = nullptr;
    WPARAM wParam = nullptr;
    int32_t var_74 = 0x147;
    LRESULT eax_1 = SendMessageA(hWnd, 0x147, wParam, __saved_ebx_1);
    int32_t* esp_1 = &var_68;
    bool ebx;
    if (eax_1 != 0xffffffff)
    {
        void* const __saved_ebx_2 = 0;
        wParam = &var_58;
        CComboBox::GetLBText((arg1 + 0x60), eax_1, wParam);
        wParam = 3;
        void* var_74_3 = &data_435960;
        void var_50;
        ebx = _mbscmp(*CString::Left(&var_58, &var_50), &data_435960) == 0;
        CString::~CString(&var_50);
        esp_1 = &var_68;
        if (ebx != 0)
        {
            int32_t __saved_ebx_3 = 3;
            wParam = &var_50;
            wParam = CString::Mid(&var_58, wParam);
            var_8 = 4;
            CString::operator=(&_Buffer, wParam);
            var_8 = 3;
            CString::~CString(&var_54);
            wParam = 3;
            class CString* eax_6 = CString::Left(&_Buffer, &var_54);
            var_c = 5;
            CString::operator=(&_Buffer, eax_6);
            var_c = 3;
            CString::~CString(&var_58);
            void* var_78_2 = &data_431074;
            sscanf(_Buffer, &data_431074, &var_54, wParam, __saved_ebx_3);
            esp_1 = &wParam;
            data_433b0c = (var_54 - 1);
        }
    }
    if ((eax_1 == 0xffffffff || (eax_1 != 0xffffffff && ebx == 0)))
    {
        data_433b0c = 0xffffffff;
    }
    int32_t edx = *(arg1 + 0xc0);
    *(esp_1 - 4) = 0;
    *(esp_1 - 8) = 0;
    *(esp_1 - 0xc) = 0x147;
    *(esp_1 - 0x10) = edx;
    int32_t eax_8 = SendMessageA();
    void* esp_6 = esp_1;
    if (eax_8 != 0xffffffff)
    {
        *(esp_6 - 4) = (esp_6 + 0xc);
        *(esp_6 - 8) = eax_8;
        CComboBox::GetLBText((arg1 + 0xa0));
        int32_t edx_1 = *(esp_6 + 0xc);
        *(esp_6 - 4) = 0x433b10;
        *(esp_6 - 8) = &data_431074;
        *(esp_6 - 0xc) = edx_1;
        sscanf();
    }
    int32_t eax_9 = *(arg1 + 0x100);
    *(esp_6 - 4) = 0;
    *(esp_6 - 8) = 0;
    *(esp_6 - 0xc) = 0x147;
    *(esp_6 - 0x10) = eax_9;
    int32_t eax_10 = SendMessageA();
    if (eax_10 != 0xffffffff)
    {
        *(esp_6 - 4) = (esp_6 + 0xc);
        *(esp_6 - 8) = eax_10;
        CComboBox::GetLBText((arg1 + 0xe0));
        int32_t edx_2 = *(esp_6 + 0xc);
        *(esp_6 - 4) = 0x433b14;
        *(esp_6 - 8) = &data_431074;
        *(esp_6 - 0xc) = edx_2;
        sscanf();
    }
    int32_t eax_11 = *(arg1 + 0x140);
    *(esp_6 - 4) = 0;
    *(esp_6 - 8) = 0;
    *(esp_6 - 0xc) = 0x147;
    *(esp_6 - 0x10) = eax_11;
    data_4360f8 = SendMessageA();
    int32_t ecx_20 = *(arg1 + 0x180);
    *(esp_6 - 4) = 0;
    *(esp_6 - 8) = 0;
    *(esp_6 - 0xc) = 0x147;
    *(esp_6 - 0x10) = ecx_20;
    int32_t eax_13 = SendMessageA();
    int32_t edx_3 = data_433b10;
    data_4360fc = eax_13;
    *(esp_6 - 4) = eax_13;
    int32_t eax_15 = (data_433b0c + 1);
    *(esp_6 - 8) = edx_3;
    *(esp_6 - 0xc) = eax_15;
    void* esp_37 = esp_6;
    if (sub_4165f0((esp_6 + 0x20)) != 0)
    {
        int32_t edx_4 = data_433b10;
        *(esp_37 - 4) = data_4360fc;
        *(esp_37 - 8) = edx_4;
        sub_4167f0((esp_37 + 0x20));
        int32_t eax_17 = data_4360f8;
        void* esp_40;
        if (eax_17 == 0)
        {
            *(esp_37 - 4) = 0x4e;
            esp_40 = (esp_37 - 4);
        }
        if (eax_17 == 1)
        {
            *(esp_37 - 4) = 0x4f;
            esp_40 = (esp_37 - 4);
        }
        if (eax_17 == 2)
        {
            *(esp_37 - 4) = 0x45;
            esp_40 = (esp_37 - 4);
        }
        if (((eax_17 == 0 || eax_17 == 1) || eax_17 == 2))
        {
            sub_416890((esp_40 + 0x24));
            esp_37 = (esp_40 + 4);
        }
    }
    int32_t eax_18 = data_433b0c;
    void* esp_43;
    if (eax_18 != 0xffffffff)
    {
        int32_t edx_5 = data_433b14;
        *(esp_37 - 4) = data_4360f8;
        int32_t ecx_26 = data_433b10;
        *(esp_37 - 8) = edx_5;
        *(esp_37 - 0xc) = ecx_26;
        *(esp_37 - 0x10) = (eax_18 + 1);
        *(esp_37 - 0x14) = 0x433b74;
        *(esp_37 - 0x18) = (esp_37 + 0x14);
        CString::Format();
        esp_43 = esp_37;
    }
    else
    {
        *(esp_37 - 4) = 0x433ba4;
        *(esp_37 - 8) = (esp_37 + 0x14);
        CString::Format();
        esp_43 = esp_37;
    }
    *(esp_43 - 4) = *(arg1 + 0x20);
    *(esp_43 - 4) = GetParent();
    int32_t eax_23 = CWnd::FromHandle();
    *(esp_43 - 4) = *(esp_43 + 0x14);
    *(esp_43 - 8) = 0x3f6;
    CWnd::SetDlgItemTextA(eax_23);
    data_435fd0 = *(arg1 + 0x1a0);
    CDialog::OnOK(arg1);
    *(esp_43 + 0x64) = 2;
    sub_416a80((esp_43 + 0x20));
    *(esp_43 + 0x64) = 1;
    CString::~CString((esp_43 + 0xc));
    *(esp_43 + 0x64) = 0;
    CString::~CString((esp_43 + 0x10));
    *(esp_43 + 0x64) = 0xffffffff;
    int32_t eax_24 = CString::~CString((esp_43 + 0x14));
    *esp_43;
    *(esp_43 + 4);
    *(esp_43 + 8);
    *fsbase = *(esp_43 + 0x5c);
    return eax_24;
}

int32_t __fastcall sub_4237d0(CWnd* arg1)
{
    CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x3f5), 0);
    sub_423b60(arg1);
    return CWnd::EnableWindow(CWnd::GetDlgItem(arg1, 0x3f5), 1);
}

int32_t __fastcall sub_423810(CDialog* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429631;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_4a4 = 0;
    int32_t ebp;
    int32_t var_4a8 = ebp;
    int32_t esi;
    int32_t var_4ac = esi;
    int32_t edi;
    int32_t var_4b0 = edi;
    CDialog::OnInitDialog(arg1);
    int32_t i = 0;
    int32_t var_4b4 = 0x434244;
    int32_t var_49c = 0;
    void var_490;
    CString::CString(&var_490, &data_434244);
    int32_t var_4 = 0;
    void var_498;
    CString::CString(&var_498);
    var_4 = 1;
    void var_4a0;
    CString::CString(&var_4a0);
    int32_t var_4b4_1 = 0;
    int32_t var_4b8 = 0;
    int32_t var_4bc = 0x14b;
    var_4 = 2;
    SendMessageA(*(arg1 + 0x80), 0x14b, nullptr, nullptr);
    int32_t* esp_1 = &var_4b0;
    void var_40c;
    void* var_494 = &var_40c;
    do
    {
        __builtin_memset(&esp_1[9], 0, 0x80);
        *(esp_1 - 4) = (i + 1);
        void* esp_4;
        if (i >= 0xa)
        {
            *(esp_1 - 8) = "\\.\COM%d";
            *(esp_1 - 0xc) = &esp_1[9];
            esp_4 = (esp_1 - 0xc);
        }
        else
        {
            *(esp_1 - 8) = "com%d";
            *(esp_1 - 0xc) = &esp_1[9];
            esp_4 = (esp_1 - 0xc);
        }
        wsprintfA();
        *(esp_4 + 0x10) = 0;
        *(esp_4 + 0xc) = 0x40000000;
        *(esp_4 + 8) = 3;
        *(esp_4 + 4) = 0;
        *esp_4 = 0;
        *(esp_4 - 4) = 0xc0000000;
        *(esp_4 - 8) = (esp_4 + 0x38);
        int32_t eax_3 = CreateFileA();
        esp_1 = (esp_4 + 0x14);
        if (eax_3 != 0xffffffff)
        {
            int32_t* ecx_4 = esp_1[7];
            *(esp_1 - 4) = eax_3;
            *ecx_4 = i;
            esp_1[5] = (esp_1[5] + 1);
            esp_1[7] = &ecx_4[1];
            CloseHandle();
        }
        i = (i + 1);
    } while (i < 0x100);
    int32_t i_2 = esp_1[5];
    void* esp_39;
    if (i_2 == 0)
    {
        int32_t edx_6 = *(arg1 + 0x80);
        *(esp_1 - 4) = "Invalid";
        *(esp_1 - 8) = 0;
        *(esp_1 - 0xc) = 0x14a;
        *(esp_1 - 0x10) = edx_6;
        SendMessageA();
        *(esp_1 - 4) = 0;
        CWnd::EnableWindow((arg1 + 0x60));
        *(esp_1 - 4) = 0;
        CWnd::EnableWindow((arg1 + 0xa0));
        esp_39 = esp_1;
    }
    else
    {
        if (i_2 > 0)
        {
            void* edi_3 = &esp_1[0x29];
            int32_t i_1;
            do
            {
                *(esp_1 - 4) = 1;
                CWnd::EnableWindow((arg1 + 0x60));
                *(esp_1 - 4) = (*edi_3 + 1);
                *(esp_1 - 8) = "COM%d";
                *(esp_1 - 0xc) = &esp_1[6];
                CString::Format();
                int32_t edx_4 = *(arg1 + 0x80);
                *(esp_1 - 4) = esp_1[6];
                *(esp_1 - 8) = 0;
                *(esp_1 - 0xc) = 0x143;
                *(esp_1 - 0x10) = edx_4;
                SendMessageA();
                edi_3 = (edi_3 + 4);
                i_1 = i_2;
                i_2 = (i_2 - 1);
            } while (i_1 != 1);
        }
        int32_t eax_5 = data_433b0c;
        if (eax_5 == 0xffffffff)
        {
            eax_5 = esp_1[0x29];
            data_433b0c = eax_5;
        }
        *(esp_1 - 4) = (eax_5 + 1);
        *(esp_1 - 8) = "COM%d";
        *(esp_1 - 0xc) = &esp_1[4];
        CString::Format();
        int32_t edx_5 = *(arg1 + 0x80);
        *(esp_1 - 4) = esp_1[4];
        *(esp_1 - 8) = 0;
        *(esp_1 - 0xc) = 0x14c;
        *(esp_1 - 0x10) = edx_5;
        int32_t eax_8 = SendMessageA();
        *(esp_1 - 4) = 0;
        if (eax_8 == 0xffffffff)
        {
            int32_t ecx_9 = *(arg1 + 0x80);
            *(esp_1 - 8) = 0;
            *(esp_1 - 0xc) = 0x14e;
            *(esp_1 - 0x10) = ecx_9;
            SendMessageA();
            esp_39 = esp_1;
        }
        else
        {
            *(esp_1 - 8) = eax_8;
            int32_t eax_9 = *(arg1 + 0x80);
            *(esp_1 - 0xc) = 0x14e;
            *(esp_1 - 0x10) = eax_9;
            SendMessageA();
            esp_39 = esp_1;
        }
    }
    *(esp_39 - 4) = data_433b10;
    *(esp_39 - 8) = &data_431074;
    *(esp_39 - 0xc) = (esp_39 + 0x10);
    CString::Format();
    int32_t eax_11 = *(arg1 + 0xc0);
    *(esp_39 - 4) = *(esp_39 + 0x10);
    *(esp_39 - 8) = 0;
    *(esp_39 - 0xc) = 0x14c;
    *(esp_39 - 0x10) = eax_11;
    int32_t eax_12 = SendMessageA();
    *(esp_39 - 4) = 0;
    void* esp_63;
    if (eax_12 == 0xffffffff)
    {
        int32_t edx_8 = *(arg1 + 0xc0);
        *(esp_39 - 8) = 0;
        *(esp_39 - 0xc) = 0x14e;
        *(esp_39 - 0x10) = edx_8;
        esp_63 = (esp_39 - 0x10);
    }
    else
    {
        int32_t ecx_13 = *(arg1 + 0xc0);
        *(esp_39 - 8) = eax_12;
        *(esp_39 - 0xc) = 0x14e;
        *(esp_39 - 0x10) = ecx_13;
        esp_63 = (esp_39 - 0x10);
    }
    SendMessageA();
    *(esp_63 + 0xc) = data_433b10;
    *(esp_63 + 8) = &data_431074;
    *(esp_63 + 4) = (esp_63 + 0x20);
    CString::Format();
    int32_t eax_14 = *(arg1 + 0xc0);
    *(esp_63 + 0xc) = *(esp_63 + 0x20);
    *(esp_63 + 8) = 0;
    *(esp_63 + 4) = 0x14c;
    *esp_63 = eax_14;
    int32_t eax_15 = SendMessageA();
    *(esp_63 + 0xc) = 0;
    void* esp_79;
    if (eax_15 == 0xffffffff)
    {
        int32_t edx_10 = *(arg1 + 0xc0);
        *(esp_63 + 8) = 0;
        *(esp_63 + 4) = 0x14e;
        *esp_63 = edx_10;
        esp_79 = esp_63;
    }
    else
    {
        int32_t ecx_15 = *(arg1 + 0xc0);
        *(esp_63 + 8) = eax_15;
        *(esp_63 + 4) = 0x14e;
        *esp_63 = ecx_15;
        esp_79 = esp_63;
    }
    SendMessageA();
    int32_t eax_16 = data_4360f8;
    int32_t ecx_16 = *(arg1 + 0x140);
    *(esp_79 + 0xc) = 0;
    *(esp_79 + 8) = eax_16;
    *(esp_79 + 4) = 0x14e;
    *esp_79 = ecx_16;
    SendMessageA();
    int32_t edx_11 = *(arg1 + 0x100);
    *(esp_79 + 0xc) = 0;
    *(esp_79 + 8) = 0;
    *(esp_79 + 4) = 0x14e;
    *esp_79 = edx_11;
    SendMessageA();
    int32_t eax_17 = *(arg1 + 0x180);
    *(esp_79 + 0xc) = 0;
    *(esp_79 + 8) = 0;
    *(esp_79 + 4) = 0x14e;
    *esp_79 = eax_17;
    SendMessageA();
    if (data_435fd0 == 0)
    {
        *(arg1 + 0x1a0) = 0;
    }
    else
    {
        *(arg1 + 0x1a0) = 1;
    }
    *(esp_79 + 0xc) = 0;
    CWnd::UpdateData(arg1);
    *(esp_79 + 0x4bc) = 1;
    CString::~CString((esp_79 + 0x20));
    *(esp_79 + 0x4bc) = 0;
    CString::~CString((esp_79 + 0x28));
    *(esp_79 + 0x4bc) = 0xffffffff;
    CString::~CString((esp_79 + 0x30));
    void* esp_97;
    *esp_97;
    *(esp_79 + 0x14);
    *(esp_97 + 8);
    *(esp_97 + 0xc);
    *fsbase = *(esp_79 + 0x4b4);
    return 1;
}

int32_t __fastcall sub_423b60(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429658;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    LPARAM var_1c;
    CString::CString(&var_1c);
    int32_t var_4 = 0;
    WPARAM wParam_1 = nullptr;
    void var_10;
    CString::CString(&var_10, &data_434244);
    var_4 = 1;
    void var_14;
    CString::CString(&var_14);
    var_4 = 2;
    SendMessageA(*(arg1 + 0x80), 0x14b, nullptr, nullptr);
    int32_t ebp = 1;
    do
    {
        int32_t var_30_1 = ebp;
        CString::Format(&var_1c, "\\.\COM%d");
        HANDLE hObject = CreateFileA(var_1c, 0xc0000000, FILE_SHARE_NONE, nullptr, OPEN_EXISTING, 0x40000080, nullptr);
        if (hObject != 0xffffffff)
        {
            int32_t var_30_2 = ebp;
            CString::Format(&var_1c, "COM %d");
            SendMessageA(*(arg1 + 0x80), 0x14a, wParam_1, var_1c);
            wParam_1 = (wParam_1 + 1);
            CloseHandle(hObject);
        }
        ebp = (ebp + 1);
    } while ((ebp - 1) < 0x100);
    if (wParam_1 == 0)
    {
        SendMessageA(*(arg1 + 0x80), 0x14a, nullptr, "Invalid");
        CWnd::UpdateData(arg1, 0);
        CWnd::EnableWindow((arg1 + 0x60), 0);
        CWnd::EnableWindow((arg1 + 0xa0), 0);
        CWnd::EnableWindow((arg1 + 0xe0), 0);
        CWnd::EnableWindow((arg1 + 0x120), 0);
        CWnd::EnableWindow((arg1 + 0x160), 0);
    }
    else
    {
        CWnd::EnableWindow((arg1 + 0x60), 1);
        CWnd::EnableWindow((arg1 + 0xa0), 1);
        int32_t eax_4 = data_433b0c;
        HWND hWnd;
        LRESULT wParam;
        if (eax_4 == 0xffffffff)
        {
            int32_t var_30_8 = 0;
            wParam = nullptr;
            int32_t var_38_5 = 0x14e;
            hWnd = *(arg1 + 0x80);
        }
        else
        {
            int32_t var_30_5 = (eax_4 + 1);
            CString::Format(&var_1c, "COM %d");
            int32_t var_30_7 = 0;
            wParam = SendMessageA(*(arg1 + 0x80), 0x14c, nullptr, var_1c);
            int32_t var_38_4 = 0x14e;
            hWnd = *(arg1 + 0x80);
        }
        SendMessageA(hWnd, 0x14e, wParam, nullptr);
        SendMessageA(*(arg1 + 0xc0), 0x14e, data_433b10, nullptr);
        SendMessageA(*(arg1 + 0x100), 0x14e, data_433b14, nullptr);
        SendMessageA(*(arg1 + 0x140), 0x14e, data_4360f8, nullptr);
        SendMessageA(*(arg1 + 0x180), 0x14e, data_4360fc, nullptr);
    }
    var_4 = 1;
    CString::~CString(&var_14);
    var_4 = 0;
    CString::~CString(&var_10);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_11 = CString::~CString(&var_1c);
    *fsbase = var_c;
    return eax_11;
}

int32_t __stdcall sub_423dc0(struct tagMSG* arg1)
{
    if (*(arg1 + 4) == 0x100)
    {
        int32_t edx_1 = *(arg1 + 8);
        if ((edx_1 == 0x1b || edx_1 == 0xd))
        {
            return 1;
        }
    }
    CDialog* ecx;
    return CDialog::PreTranslateMessage(ecx, arg1);
}

long __fastcall sub_423df0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

CWnd* __fastcall sub_423e30(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429683;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    CWnd* var_10_1 = arg1;
    CWnd::CWnd(arg1);
    int32_t var_4 = 0;
    *(arg1 + 0x64) = 0;
    *(arg1 + 0x60) = 0x42b11c;
    var_4 = 1;
    *arg1 = &data_42c370;
    *(arg1 + 0x48) = 0;
    *(arg1 + 0x4c) = 0x64;
    *(arg1 + 0x50) = 0;
    *(arg1 + 0x54) = 0x14f046;
    *(arg1 + 0x58) = 0x96000a;
    *(arg1 + 0x5c) = 0xa0a0a0;
    CGdiObject::Attach((arg1 + 0x60), CreatePen(PS_COSMETIC, 0, 0xffff));
    *fsbase = var_c;
    return arg1;
}

void*** __thiscall sub_423ec0(void*** arg1, char arg2)
{
    sub_423ee0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_423ee0(void*** arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4296ab;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void*** var_14 = arg1;
    *arg1 = &data_42c370;
    int32_t var_4 = 1;
    CGdiObject::DeleteObject(&arg1[0x18]);
    void* var_10 = &arg1[0x18];
    arg1[0x18] = 0x42a6d0;
    var_4 = 2;
    CGdiObject::DeleteObject(&arg1[0x18]);
    arg1[0x18] = 0x42a6e4;
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CProgressCtrl::~CProgressCtrl(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t sub_423f60() __pure
{
    return CWnd::messageMap;
}

int32_t sub_423f70() __pure
{
    return &data_42c320;
}

int32_t GSI1::delFromAddrMap() __pure
{
    return 1;
}

long double __fastcall sub_423f90(class CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429704;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void var_60;
    CPaintDC::CPaintDC(&var_60, arg1);
    int32_t var_4 = 0;
    int32_t lpRect;
    GetWindowRect(*(arg1 + 0x20), &lpRect);
    int32_t var_a4 = 0;
    int32_t var_a8 = 0x42b144;
    var_4 = 1;
    int32_t var_88;
    int32_t var_84;
    int32_t var_80;
    HDC hdc;
    CGdiObject::Attach(&var_a8, CreateCompatibleBitmap(hdc, (var_84 - lpRect), (var_80 - var_88)));
    int32_t var_9c;
    CDC::CDC(&var_9c);
    var_4 = 2;
    CDC::Attach(&var_9c, CreateCompatibleDC(nullptr));
    int32_t eax_5 = (-&var_a8);
    struct HDC__* var_98;
    CDC::SelectGdiObject(var_98, ((eax_5 - eax_5) & var_a4));
    CDC::SetBkMode(&var_9c, 1);
    int32_t eax_9 = ((var_84 - lpRect) - 2);
    *(arg1 + 0x40) = eax_9;
    unsigned long edx_4 = *(arg1 + 0x5c);
    *(arg1 + 0x44) = ((var_80 - var_88) - 2);
    CDC::FillSolidRect(&var_9c, 0, 0, eax_9, ((var_80 - var_88) - 2), edx_4);
    long double x87_r7_1 = (*(arg1 + 0x50) / (*(arg1 + 0x4c) - *(arg1 + 0x48)));
    long double x87_r6_1 = (x87_r7_1 * 28f);
    long double temp1 = 27f;
    (x87_r6_1 - temp1);
    int32_t eax_11;
    eax_11 = ((((x87_r6_1 < temp1) ? 1 : 0) << 8) | ((((0) ? 1 : 0) << 9) | (((((FCMP_UO(x87_r6_1, temp1))) ? 1 : 0) << 0xa) | ((((x87_r6_1 == temp1) ? 1 : 0) << 0xe) | 0x3800))));
    int32_t var_ac_1;
    int32_t edi_2;
    long double x87_r7_4;
    if ((*eax_11[1] & 0x41) != 0)
    {
        edi_2 = *(arg1 + 0x44);
        x87_r7_4 = (x87_r7_1 * 0.933333337f);
        var_ac_1 = edi_2;
    }
    else
    {
        edi_2 = *(arg1 + 0x44);
        var_ac_1 = edi_2;
        x87_r7_4 = ((x87_r6_1 - 18f) * 0.100000001f);
    }
    int32_t eax_12 = _ftol();
    CDC::FillSolidRect(&var_9c, 0, (edi_2 - eax_12), *(arg1 + 0x40), eax_12, *(arg1 + 0x54));
    int32_t eax_13 = *(arg1 + 0x44);
    int32_t var_68 = *(arg1 + 0x40);
    int32_t var_70 = 0;
    int32_t var_6c = 0;
    int32_t var_64 = eax_13;
    void* var_a0;
    CString::CString(&var_a0);
    int32_t var_bc_8 = *(arg1 + 0x50);
    var_4 = 3;
    CString::Format(&var_a0, "%d%%");
    int32_t var_78 = 0;
    int32_t var_7c = 0x42b3c8;
    var_4 = 4;
    CDC::SetBkMode(&var_9c, 1);
    CDC::SetTextColor(&var_9c, *(arg1 + 0x58));
    void* eax_15 = var_a0;
    *(var_9c + 0x70)(eax_15, *(eax_15 - 8), &var_70, 0x25);
    int32_t eax_18 = (-&var_9c);
    BitBlt(hdc, 0, 0, (var_84 - lpRect), (var_80 - var_88), ((eax_18 - eax_18) & var_98), 0, 0, SRCCOPY);
    CGdiObject::DeleteObject(&var_a8);
    CDC::DeleteDC(&var_9c);
    var_7c = 0x42a6d0;
    var_4 = 5;
    CGdiObject::DeleteObject(&var_7c);
    var_7c = 0x42a6e4;
    var_4 = 2;
    CString::~CString(&var_a0);
    var_4 = 1;
    CDC::~CDC(&var_9c);
    var_a8 = 0x42a6d0;
    var_4 = 6;
    CGdiObject::DeleteObject(&var_a8);
    var_a8 = 0x42a6e4;
    int32_t var_4_1 = 0xffffffff;
    CPaintDC::~CPaintDC(&var_60);
    *fsbase = var_c;
    return (x87_r7_4 * var_ac_1);
}

long double __thiscall sub_424260(void* arg1, CDC* arg2)
{
    int32_t esi;
    int32_t var_c = esi;
    int32_t edi;
    int32_t var_10 = edi;
    *(arg1 + 0x44);
    int32_t eax = _ftol();
    void var_8;
    CDC::MoveTo(arg2, &var_8, 0);
    CDC::LineTo(arg2, 0, (*(arg1 + 0x44) - 1));
    CDC::LineTo(arg2, (*(arg1 + 0x40) - 1), (*(arg1 + 0x44) - 1));
    *(arg1 + 0x44);
    int32_t eax_3 = _ftol(eax);
    CDC::LineTo(arg2, (*(arg1 + 0x40) - 1), eax_3);
    *(arg1 + 0x44);
    int32_t eax_4 = _ftol();
    *(arg1 + 0x40);
    CDC::LineTo(arg2, _ftol(eax_4));
    *(arg1 + 0x40);
    CDC::LineTo(arg2, _ftol(0));
    *(arg1 + 0x40);
    CDC::LineTo(arg2, _ftol(0));
    *(arg1 + 0x44);
    int32_t eax_8 = _ftol();
    *(arg1 + 0x40);
    CDC::LineTo(arg2, _ftol(eax_8));
    long double x87_r7_3 = (*(arg1 + 0x44) * 0.100000001f);
    CDC::LineTo(arg2, 0, _ftol());
    return x87_r7_3;
}

long double __fastcall sub_424360(void* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429730;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    class CDC* eax_3 = CDC::FromHandle(GetDC(*(arg1 + 0x20)));
    int32_t lpRect;
    GetWindowRect(*(arg1 + 0x20), &lpRect);
    void** const var_24;
    sub_424720(&var_24);
    var_24 = &data_42c464;
    int32_t var_4 = 0;
    void** const var_2c;
    sub_424720(&var_2c);
    var_2c = &data_42c464;
    int32_t var_14;
    int32_t x2 = (var_14 - lpRect);
    int32_t var_18;
    int32_t var_10;
    int32_t y2_3 = (var_10 - var_18);
    var_4 = 1;
    *(arg1 + 0x40) = x2;
    *(arg1 + 0x44) = y2_3;
    CGdiObject::Attach(&var_24, CreateRectRgn(0, 0, x2, y2_3));
    CGdiObject::Attach(&var_2c, CreateRectRgn(0, 0, *(arg1 + 0x40), 1));
    int32_t eax_8 = (-&var_2c);
    int32_t ecx_6 = (-&var_24);
    int32_t var_28;
    HRGN hrgnDst;
    CombineRgn(hrgnDst, ((ecx_6 - ecx_6) & hrgnDst), ((eax_8 - eax_8) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    int32_t y2 = *(arg1 + 0x44);
    CGdiObject::Attach(&var_2c, CreateRectRgn(0, (y2 - 1), *(arg1 + 0x40), y2));
    int32_t eax_12 = (-&var_2c);
    int32_t ecx_13 = (-&var_24);
    CombineRgn(hrgnDst, ((ecx_13 - ecx_13) & hrgnDst), ((eax_12 - eax_12) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    CGdiObject::Attach(&var_2c, CreateRectRgn(0, 0, 1, *(arg1 + 0x44)));
    int32_t eax_17 = (-&var_2c);
    int32_t ecx_19 = (-&var_24);
    CombineRgn(hrgnDst, ((ecx_19 - ecx_19) & hrgnDst), ((eax_17 - eax_17) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    int32_t x2_1 = *(arg1 + 0x40);
    CGdiObject::Attach(&var_2c, CreateRectRgn((x2_1 - 1), 0, x2_1, *(arg1 + 0x44)));
    int32_t eax_21 = (-&var_2c);
    int32_t ecx_26 = (-&var_24);
    CombineRgn(hrgnDst, ((ecx_26 - ecx_26) & hrgnDst), ((eax_21 - eax_21) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    int32_t eax_24;
    int32_t edx_7;
    edx_7 = HIGHD((0x66666667 * *(arg1 + 0x44)));
    eax_24 = LOWD((0x66666667 * *(arg1 + 0x44)));
    int32_t edx_8 = (edx_7 >> 2);
    int32_t var_38 = (edx_8 + (edx_8 >> 0x1f));
    int32_t y2_1 = _ftol();
    *(arg1 + 0x40);
    CGdiObject::Attach(&var_2c, CreateRectRgn(1, 1, _ftol(), y2_1));
    int32_t eax_29 = (-&var_2c);
    int32_t ecx_34 = (-&var_24);
    CombineRgn(hrgnDst, ((ecx_34 - ecx_34) & hrgnDst), ((eax_29 - eax_29) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    int32_t eax_32;
    int32_t edx_11;
    edx_11 = HIGHD((0x66666667 * *(arg1 + 0x44)));
    eax_32 = LOWD((0x66666667 * *(arg1 + 0x44)));
    int32_t edx_12 = (edx_11 >> 2);
    int32_t var_38_2 = (edx_12 + (edx_12 >> 0x1f));
    int32_t y2_2 = _ftol();
    int32_t ecx_39 = *(arg1 + 0x40);
    CGdiObject::Attach(&var_2c, CreateRectRgn(_ftol(), 1, (ecx_39 - 1), y2_2));
    int32_t eax_40 = (-&var_2c);
    int32_t ecx_42 = (-&var_24);
    CombineRgn(hrgnDst, ((ecx_42 - ecx_42) & hrgnDst), ((eax_40 - eax_40) & var_28), RGN_XOR);
    CGdiObject::DeleteObject(&var_2c);
    int32_t eax_43 = (-&var_24);
    SetWindowRgn(*(arg1 + 0x20), ((eax_43 - eax_43) & hrgnDst), 1);
    CGdiObject::DeleteObject(&var_24);
    ReleaseDC(*(arg1 + 0x20), *(eax_3 + 4));
    CDC::DeleteDC(eax_3);
    var_2c = &data_42a6d0;
    var_4 = 2;
    CGdiObject::DeleteObject(&var_2c);
    var_2c = &data_42a6e4;
    var_24 = &data_42a6d0;
    int32_t var_4_1 = 3;
    CGdiObject::DeleteObject(&var_24);
    *fsbase = var_c;
    return ((ecx_39 / 3) << 1);
}

int32_t __thiscall sub_4246a0(void* arg1, int32_t arg2, int32_t arg3)
{
    if (arg2 <= arg3)
    {
        *(arg1 + 0x48) = arg2;
        *(arg1 + 0x4c) = arg3;
        return arg2;
    }
    *(arg1 + 0x48) = arg3;
    *(arg1 + 0x4c) = arg2;
    return arg2;
}

BOOL __thiscall sub_4246c0(void* arg1, BOOL arg2)
{
    BOOL eax_1 = arg2;
    if ((eax_1 >= *(arg1 + 0x48) && eax_1 <= *(arg1 + 0x4c)))
    {
        *(arg1 + 0x50) = eax_1;
        eax_1 = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    return eax_1;
}

int32_t __thiscall sub_4246f0(void* arg1, int32_t arg2)
{
    *(arg1 + 0x54) = arg2;
    return arg2;
}

int32_t __thiscall sub_424700(void* arg1, int32_t arg2)
{
    *(arg1 + 0x5c) = arg2;
    return arg2;
}

int32_t __thiscall sub_424710(void* arg1, int32_t arg2)
{
    *(arg1 + 0x58) = arg2;
    return arg2;
}

int32_t* __fastcall sub_424720(int32_t* arg1)
{
    *arg1 = 0x42a6d0;
    arg1[1] = 0;
    return arg1;
}

void* __thiscall sub_424730(CGdiObject* arg1, char arg2)
{
    void* esi = arg1;
    sub_424750(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(esi);
    }
    return esi;
}

int32_t __fastcall sub_424750(CGdiObject* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429748;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CGdiObject* var_10 = arg1;
    int32_t* esi = arg1;
    int32_t* var_10_1 = esi;
    *esi = 0x42a6d0;
    int32_t var_4 = 0;
    int32_t eax_1 = CGdiObject::DeleteObject(arg1);
    int32_t ecx = var_c;
    *esi = 0x42a6e4;
    *fsbase = ecx;
    return eax_1;
}

int32_t* __fastcall sub_4247a0(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429793;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* esi = arg1;
    int32_t* var_18 = esi;
    CWnd::CWnd(arg1);
    *esi = 0x42aa40;
    int32_t var_4 = 0;
    CString::CString(&esi[0x12]);
    esi[0x16] = 0;
    esi[0x15] = 0x42b144;
    var_4 = 2;
    CDC::CDC(&esi[0x17]);
    uint32_t var_24 = 0x4c;
    var_4 = 3;
    *esi = 0x42c4e0;
    esi[0x10] = 0xff;
    esi[0x11] = 0x4080ff;
    esi[0x1f] = 0xa;
    esi[0x13] = 0;
    void* eax_1;
    uint32_t ecx_2;
    eax_1 = operator new(var_24);
    void* var_14 = eax_1;
    var_4 = 4;
    int32_t* eax_2;
    if (eax_1 == 0)
    {
        eax_2 = nullptr;
    }
    else
    {
        var_24 = ecx_2;
        uint32_t* var_10_1 = &var_24;
        CString::CString(&var_24, &data_434244);
        eax_2 = sub_4010f0(eax_1);
    }
    var_24 = 0x18;
    var_4 = 3;
    esi[0x20] = eax_2;
    sub_401340(eax_2, var_24);
    CGdiObject* ecx_6 = esi[0x20];
    var_24 = 0xc;
    sub_4013b0(ecx_6, var_24);
    esi[0x20];
    var_24 = 0;
    sub_401680(var_24);
    *fsbase = var_c;
    return esi;
}

int32_t* __thiscall sub_4248a0(int32_t* arg1, char arg2)
{
    sub_4248c0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_4248c0(int32_t* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4297d1;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_14 = arg1;
    *arg1 = 0x42c4e0;
    int32_t* ecx = arg1[0x20];
    int32_t var_4 = 3;
    if (ecx != 0)
    {
        *(*ecx + 4)(1);
    }
    var_4 = 2;
    CDC::~CDC(&arg1[0x17]);
    void* var_10 = &arg1[0x15];
    arg1[0x15] = 0x42a6d0;
    var_4 = 4;
    CGdiObject::DeleteObject(&arg1[0x15]);
    arg1[0x15] = 0x42a6e4;
    var_4 = 0;
    CString::~CString(&arg1[0x12]);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_2 = CStatic::~CStatic(arg1);
    *fsbase = var_c;
    return eax_2;
}

int32_t sub_424960() __pure
{
    return CWnd::messageMap;
}

int32_t sub_424970() __pure
{
    return &data_42c478;
}

int32_t __fastcall sub_424980(class CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_42981f;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void* const var_a0 = 0;
    int32_t ebp;
    int32_t var_a4 = ebp;
    int32_t esi;
    int32_t var_a8 = esi;
    class CWnd* edi;
    class CWnd* var_ac = edi;
    class CWnd* hdc_2 = arg1;
    int32_t var_68;
    CPaintDC::CPaintDC(&var_68, hdc_2);
    HWND hWnd = *(arg1 + 0x20);
    hdc_2 = (arg1 + 0x6c);
    int32_t var_4 = 0;
    GetClientRect(hWnd, hdc_2);
    class CWnd** esp_1 = &var_ac;
    int32_t var_9c;
    CDC::CDC(&var_9c);
    var_4 = 1;
    class CWnd var_8c;
    sub_425040(&var_8c);
    int32_t var_5c;
    int32_t eax_1 = var_5c;
    int32_t edx;
    edx = eax_1 == 0;
    var_4 = 2;
    var_9c = 0x42c5a0;
    int32_t* var_80 = &var_68;
    int32_t var_84 = 0;
    int32_t lppt;
    class CWnd* hdc_5;
    int32_t var_74;
    int32_t var_70;
    if (arg1 != 0xffffff94)
    {
        lppt = *(arg1 + 0x6c);
        hdc_5 = *(arg1 + 0x70);
        var_74 = *(arg1 + 0x74);
        var_70 = *(arg1 + 0x78);
    }
    else
    {
        int32_t edx_1 = var_68;
        hdc_2 = &lppt;
        *(edx_1 + 0x58)(hdc_2);
        esp_1 = &var_ac;
        eax_1 = var_5c;
    }
    HDC hdc;
    HDC hdc_1;
    if (edx != 0)
    {
        int32_t eax_2 = (-&var_68);
        hdc_2 = ((eax_2 - eax_2) & hdc);
        hdc_2 = CreateCompatibleDC(hdc_2);
        CDC::Attach(&var_9c, hdc_2);
        hdc_2 = 2;
        LPtoDP(hdc_1, &lppt, hdc_2);
        int32_t lppt_2 = lppt;
        hdc_2 = (var_70 - hdc_5);
        hdc_2 = CreateCompatibleBitmap(hdc, (var_74 - lppt_2), hdc_2);
        CGdiObject::Attach(&var_8c, hdc_2);
        hdc_2 = &var_8c;
        class CGdiObject* var_84_1 = sub_425050(&var_9c, hdc_2);
        hdc_2 = hdc_1;
        hdc_2 = GetMapMode(hdc_2);
        CDC::SetMapMode(&var_9c, hdc_2);
        hdc_2 = 2;
        DPtoLP(hdc_1, &lppt, hdc_2);
        int32_t lppt_1 = lppt;
        hdc_2 = hdc_5;
        void var_14;
        CDC::SetWindowOrg(&var_9c, &var_14, lppt_1);
        esp_1 = &hdc_2;
    }
    else
    {
        if (eax_1 != 0)
        {
            int32_t var_90_1 = eax_1;
        }
        HDC hdc_3 = hdc;
        HDC hdc_4 = hdc_1;
    }
    *(esp_1 - 4) = esp_1[0x13];
    *(esp_1 - 4) = GetBkColor();
    *(esp_1 - 8) = &esp_1[0xc];
    CDC::FillSolidRect(&esp_1[4]);
    void* esp_6 = esp_1;
    *(esp_6 + 0xa8) = 3;
    if (((arg1 == 0xffffffa4 || (arg1 != 0xffffffa4 && *(arg1 + 0x60) == 0)) || ((arg1 != 0xffffffa4 && *(arg1 + 0x60) != 0) && *(arg1 + 0x58) == 0)))
    {
        int32_t eax_20 = (-(esp_6 + 0x44));
        *(esp_6 - 4) = ((eax_20 - eax_20) & *(esp_6 + 0x48));
        *(esp_6 - 4) = CreateCompatibleDC();
        CDC::Attach((arg1 + 0x5c));
        int32_t ebp_1 = *(arg1 + 0x6c);
        int32_t ecx_19 = *(arg1 + 0x74);
        *(esp_6 - 4) = (*(arg1 + 0x78) - *(arg1 + 0x70));
        void* ebp_2 = (arg1 + 0x54);
        *(esp_6 - 8) = (ecx_19 - ebp_1);
        *(esp_6 - 0xc) = *(esp_6 + 0x48);
        *(esp_6 - 4) = CreateCompatibleBitmap();
        CGdiObject::Attach(ebp_2);
        if (ebp_2 != 0)
        {
            ebp_2 = *(ebp_2 + 4);
        }
        int32_t edx_8 = *(arg1 + 0x60);
        *(esp_6 - 4) = ebp_2;
        *(esp_6 - 8) = edx_8;
        *(arg1 + 0x50) = CDC::SelectGdiObject();
    }
    *(esp_6 - 4) = (arg1 + 0x6c);
    *(esp_6 - 8) = (arg1 + 0x5c);
    sub_424dc0(arg1);
    int32_t eax_29 = (*(arg1 + 0x78) - *(arg1 + 0x70));
    int32_t ecx_25 = (*(arg1 + 0x74) - *(arg1 + 0x6c));
    int32_t ebx_3;
    if (arg1 != 0xffffffa4)
    {
        ebx_3 = *(arg1 + 0x60);
    }
    else
    {
        ebx_3 = 0;
    }
    *(esp_6 - 4) = 0xcc0020;
    *(esp_6 - 8) = 0;
    *(esp_6 - 0xc) = 0;
    *(esp_6 - 0x10) = ebx_3;
    *(esp_6 - 0x14) = eax_29;
    int32_t eax_30 = *(esp_6 + 0x14);
    *(esp_6 - 0x18) = ecx_25;
    *(esp_6 - 0x1c) = 0;
    *(esp_6 - 0x20) = 0;
    *(esp_6 - 0x24) = eax_30;
    BitBlt();
    *(esp_6 + 0x10) = 0x42c5a0;
    int32_t eax_31 = *(esp_6 + 0x40);
    *(esp_6 + 0xa8) = 5;
    if (eax_31 == 0)
    {
        *(esp_6 + 0x18) = 0;
        *(esp_6 + 0x14) = 0;
    }
    else
    {
        int32_t esi_2 = *(esp_6 + 0x34);
        int32_t edi_3 = *(esp_6 + 0x30);
        int32_t ecx_27 = (*(esp_6 + 0x3c) - esi_2);
        int32_t edx_10 = (*(esp_6 + 0x38) - edi_3);
        *(esp_6 - 4) = 0xcc0020;
        int32_t eax_33 = (-(esp_6 + 0x10));
        *(esp_6 - 8) = esi_2;
        int32_t eax_35 = ((eax_33 - eax_33) & *(esp_6 + 0x14));
        *(esp_6 - 0xc) = edi_3;
        *(esp_6 - 0x10) = eax_35;
        *(esp_6 - 0x14) = ecx_27;
        void* ecx_28 = *(esp_6 + 0x2c);
        *(esp_6 - 0x18) = edx_10;
        *(esp_6 - 0x1c) = esi_2;
        *(esp_6 - 0x20) = edi_3;
        *(esp_6 - 0x24) = *(ecx_28 + 4);
        BitBlt();
        void* eax_36 = *(esp_6 + 0x28);
        if (eax_36 != 0)
        {
            *(esp_6 - 4) = *(eax_36 + 4);
            *(esp_6 - 8) = *(esp_6 + 0x14);
            CDC::SelectGdiObject();
        }
        else
        {
            *(esp_6 - 4) = 0;
            *(esp_6 - 8) = *(esp_6 + 0x14);
            CDC::SelectGdiObject();
        }
    }
    *(esp_6 + 0xa8) = 4;
    *(esp_6 + 0x20) = 0x42b144;
    sub_401ea0((esp_6 + 0x20));
    *(esp_6 + 0xa8) = 0;
    CDC::~CDC((esp_6 + 0x10));
    *(esp_6 + 0xa8) = 0xffffffff;
    int32_t eax_40 = CPaintDC::~CPaintDC((esp_6 + 0x44));
    *esp_6;
    *(esp_6 + 4);
    *(esp_6 + 8);
    *(esp_6 + 0xc);
    *fsbase = *(esp_6 + 0xa0);
    return eax_40;
}

int32_t __fastcall sub_424cc0(int32_t* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_42984b;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t* var_14 = arg1;
    *arg1 = 0x42c5a0;
    HDC hdcSrc = nullptr;
    int32_t var_4 = 1;
    if (arg1[0xc] == 0)
    {
        arg1[2] = 0;
        arg1[1] = 0;
    }
    else
    {
        int32_t edx_1 = arg1[9];
        int32_t edi_1 = arg1[8];
        if (arg1 != 0)
        {
            hdcSrc = arg1[1];
        }
        BitBlt(*(arg1[7] + 4), edi_1, edx_1, (arg1[0xa] - edi_1), (arg1[0xb] - edx_1), hdcSrc, edi_1, edx_1, SRCCOPY);
        void* eax_5 = arg1[6];
        if (eax_5 != 0)
        {
            CDC::SelectGdiObject(arg1[1], *(eax_5 + 4));
        }
        else
        {
            CDC::SelectGdiObject(arg1[1], eax_5);
        }
    }
    void* var_10 = &arg1[4];
    arg1[4] = 0x42a6d0;
    var_4 = 2;
    CGdiObject::DeleteObject(&arg1[4]);
    arg1[4] = 0x42a6e4;
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_7 = CDC::~CDC(arg1);
    *fsbase = var_c;
    return eax_7;
}

int32_t* __thiscall sub_424da0(int32_t* arg1, char arg2)
{
    sub_424cc0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __thiscall sub_424dc0(void* arg1, class CBrush* arg2)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429870;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_18 = 0;
    int32_t var_1c = 0x42ba48;
    int32_t* h_1 = h;
    int32_t var_4 = 0;
    int32_t ebp_1 = (h_1[2] - *h_1);
    int32_t eax_3 = (h_1[3] - h_1[1]);
    CGdiObject::DeleteObject(&var_1c);
    CGdiObject::Attach(&var_1c, CreateSolidBrush(*(arg1 + 0x40)));
    CDC* esi_1 = arg2;
    class CBrush* eax_6 = CDC::SelectObject(esi_1, &var_1c);
    Rectangle(*(esi_1 + 4), *h_1, h_1[1], h_1[2], h_1[3]);
    *(*esi_1 + 0x34)(*(arg1 + 0x40));
    *(*esi_1 + 0x38)(*(arg1 + 0x44));
    h = *(*esi_1 + 0x30)(*(arg1 + 0x80));
    uint8_t* lpString = *(arg1 + 0x48);
    int32_t psizl;
    GetTextExtentPoint32A(*(esi_1 + 8), lpString, *(lpString - 8), &psizl);
    int32_t eax_15;
    int32_t edx_5;
    edx_5 = HIGHD((ebp_1 - psizl));
    eax_15 = LOWD((ebp_1 - psizl));
    int32_t var_10;
    int32_t eax_19;
    int32_t edx_6;
    edx_6 = HIGHD((eax_3 - var_10));
    eax_19 = LOWD((eax_3 - var_10));
    void* ebx_1 = *(arg1 + 0x48);
    *(*esi_1 + 0x64)(((eax_15 - edx_5) >> 1), ((eax_19 - edx_6) >> 1), ebx_1, *(ebx_1 - 8));
    CDC::SelectObject(esi_1, eax_6);
    if (&h != 0)
    {
        SelectObject(*(esi_1 + 4), &h);
    }
    CGdiObject::DeleteObject(&var_1c);
    var_1c = 0x42a6d0;
    int32_t var_4_1 = 1;
    int32_t eax_22 = CGdiObject::DeleteObject(&var_1c);
    *fsbase = var_c;
    return eax_22;
}

int32_t __fastcall sub_424f20(void* arg1)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_429888;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t var_4_1 = 0;
    CString::operator=((arg1 + 0x48), &arg_4);
    InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax = CString::~CString(&arg_4);
    *fsbase = var_c;
    return eax;
}

BOOL __thiscall sub_424f80(void* arg1, int32_t arg2)
{
    *(arg1 + 0x40) = arg2;
    return InvalidateRect(*(arg1 + 0x20), nullptr, 1);
}

uint32_t* __thiscall sub_424fa0(void* arg1, int32_t arg2)
{
    uint32_t* eax = *(arg1 + 0x4c);
    if (eax == 0)
    {
        if (arg2 != 0)
        {
            eax = SetTimer(*(arg1 + 0x20), *(arg1 + 0x7c), 0x2ee, nullptr);
        }
    }
    else if (arg2 == 0)
    {
        BOOL eax_2 = KillTimer(*(arg1 + 0x20), *(arg1 + 0x7c));
        *(arg1 + 0x4c) = arg2;
        return eax_2;
    }
    *(arg1 + 0x4c) = arg2;
    return eax;
}

long __fastcall sub_424ff0(CWnd* arg1)
{
    HWND hWnd = *(arg1 + 0x20);
    int32_t eax_1 = (*(arg1 + 0x40) - 0xff);
    int32_t eax_2 = (-eax_1);
    int32_t eax_3;
    *eax_3[1] = (*(eax_2 - eax_2)[1] & 1);
    *(arg1 + 0x40) = (eax_3 + 0xff00);
    InvalidateRect(hWnd, nullptr, 1);
    return CWnd::Default(arg1);
}

int32_t DBI1::DeleteModW() __pure
{
    return 1;
}

int32_t* __fastcall sub_425040(int32_t* arg1)
{
    arg1[1] = 0;
    *arg1 = 0x42b144;
    return arg1;
}

class CGdiObject* __thiscall sub_425050(void* arg1, void* arg2)
{
    if (arg2 != 0)
    {
        return CDC::SelectGdiObject(*(arg1 + 4), *(arg2 + 4));
    }
    return CDC::SelectGdiObject(*(arg1 + 4), arg2);
}

BOOL __thiscall sub_425080(void* arg1, int32_t arg2, int32_t arg3)
{
    return PtVisible(*(arg1 + 4), arg2, arg3);
}

BOOL __thiscall sub_4250a0(void* arg1, struct RECT* arg2)
{
    return RectVisible(*(arg1 + 4), arg2);
}

BOOL __thiscall sub_4250c0(void* arg1, int32_t arg2, int32_t arg3, uint8_t* arg4, int32_t arg5)
{
    return TextOutA(*(arg1 + 4), arg2, arg3, arg4, arg5);
}

BOOL __thiscall sub_4250f0(void* arg1, int32_t arg2, int32_t arg3, enum ETO_OPTIONS arg4, struct RECT* arg5, uint8_t* arg6, uint32_t arg7, int32_t* arg8)
{
    return ExtTextOutA(*(arg1 + 4), arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int32_t* __thiscall sub_425120(void* arg1, int32_t* arg2, int32_t arg3, int32_t arg4, uint8_t* arg5, int32_t arg6, int32_t arg7, int32_t* arg8, int32_t arg9)
{
    int32_t eax_3 = TabbedTextOutA(*(arg1 + 4), arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    arg2[1] = (eax_3 >> 0x10);
    *arg2 = eax_3;
    return arg2;
}

int32_t __thiscall sub_425170(void* arg1, uint8_t* arg2, int32_t arg3, struct RECT* arg4, enum DRAW_TEXT_FORMAT arg5)
{
    return DrawTextA(*(arg1 + 4), arg2, arg3, arg4, arg5);
}

BOOL __thiscall sub_4251a0(void* arg1, HBRUSH arg2, GRAYSTRINGPROC arg3, LPARAM arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8, int32_t arg9)
{
    HBRUSH hBrush = arg2;
    if (hBrush != 0)
    {
        hBrush = hBrush[1];
    }
    return GrayStringA(*(arg1 + 4), hBrush, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
}

int32_t __thiscall sub_4251e0(void* arg1, int32_t arg2, int32_t arg3, PSTR arg4, void* arg5)
{
    return Escape(*(arg1 + 4), arg2, arg3, arg4, arg5);
}

void*** __thiscall sub_425210(CDialog* arg1, class CWnd* arg2)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429931;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CDialog::CDialog(arg1, 0x84, arg2);
    int32_t var_4 = 0;
    CWnd::CWnd(&esi[0x18]);
    esi[0x18] = 0x42ab00;
    var_4 = 1;
    CWnd::CWnd(&esi[0x28]);
    esi[0x28] = 0x42ab00;
    var_4 = 2;
    CWnd::CWnd(&esi[0x38]);
    esi[0x38] = 0x42ab00;
    var_4 = 3;
    CString::CString(&esi[0x49]);
    var_4 = 4;
    CString::CString(&esi[0x4a]);
    var_4 = 5;
    CString::CString(&esi[0x4b]);
    var_4 = 6;
    CString::CString(&esi[0x4c]);
    var_4 = 7;
    CString::CString(&esi[0x4d]);
    var_4 = 8;
    CString::CString(&esi[0x50]);
    var_4 = 9;
    CString::CString(&esi[0x51]);
    var_4 = 0xa;
    *esi = &data_42c6d0;
    esi[0x48] = 0;
    CString::operator=(&esi[0x49], &data_435ef0);
    CString::operator=(&esi[0x4a], &data_435ef0);
    CString::operator=(&esi[0x4b], &data_435ef0);
    CString::operator=(&esi[0x4c], &data_435ef0);
    CString::operator=(&esi[0x4d], "0000");
    esi[0x4e] = 0;
    esi[0x4f] = 0;
    CString::operator=(&esi[0x50], &data_435ef0);
    CString::operator=(&esi[0x51], &data_435ef0);
    *fsbase = var_c;
    return esi;
}

CDialog* __thiscall sub_4253a0(CDialog* arg1, char arg2)
{
    sub_4253c0(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_4253c0(CDialog* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4299c3;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CDialog* var_10 = arg1;
    CDialog* var_10_1 = arg1;
    int32_t var_4 = 9;
    CString::~CString((arg1 + 0x144));
    var_4 = 8;
    CString::~CString((arg1 + 0x140));
    var_4 = 7;
    CString::~CString((arg1 + 0x134));
    var_4 = 6;
    CString::~CString((arg1 + 0x130));
    var_4 = 5;
    CString::~CString((arg1 + 0x12c));
    var_4 = 4;
    CString::~CString((arg1 + 0x128));
    var_4 = 3;
    CString::~CString((arg1 + 0x124));
    var_4 = 2;
    CComboBox::~CComboBox((arg1 + 0xe0));
    var_4 = 1;
    CComboBox::~CComboBox((arg1 + 0xa0));
    var_4 = 0;
    CComboBox::~CComboBox((arg1 + 0x60));
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CDialog::~CDialog(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t __thiscall sub_4254a0(void* arg1, class CDataExchange* arg2)
{
    DDX_Control(arg2, 0x558, (arg1 + 0x60));
    DDX_Control(arg2, 0x55b, (arg1 + 0xa0));
    DDX_Control(arg2, 0x555, (arg1 + 0xe0));
    DDX_Text(arg2, 0x559, (arg1 + 0x120));
    DDX_Text(arg2, 0x55c, (arg1 + 0x124));
    DDX_Text(arg2, 0x561, (arg1 + 0x128));
    DDX_Text(arg2, 0x55f, (arg1 + 0x12c));
    DDX_Text(arg2, 0x560, (arg1 + 0x130));
    DDX_Text(arg2, 0x562, (arg1 + 0x134));
    DDX_Check(arg2, 0x55e, (arg1 + 0x138));
    DDX_Check(arg2, 0x56b, (arg1 + 0x13c));
    DDX_Text(arg2, 0x45c, (arg1 + 0x140));
    return DDX_Text(arg2, 0x56d, (arg1 + 0x144));
}

int32_t sub_4255a0() __pure
{
    return CDialog::messageMap;
}

int32_t sub_4255b0() __pure
{
    return 0x42c620;
}

long __fastcall sub_4255c0(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    if (eax != 0xffffffff)
    {
        Ordinal_SkinMagic_9(*(arg1 + 0x20), "Dialog");
        Ordinal_SkinMagic_11(*(arg1 + 0x20), 3);
        return 0;
    }
    return eax;
}

int32_t __fastcall sub_425600(CDialog* arg1)
{
    CWnd* esi = arg1;
    CDialog::OnInitDialog(arg1);
    SendMessageA(*(esi + 0x100), 0x14e, 3, nullptr);
    SendMessageA(*(esi + 0xc0), 0x14e, nullptr, nullptr);
    SendMessageA(*(esi + 0x80), 0x14e, nullptr, nullptr);
    CWnd::SetDlgItemTextA(esi, 0x56a, &data_43598c);
    CWnd::UpdateData(esi, 0);
    return 1;
}

int32_t __thiscall sub_425670(CWnd* arg1, struct tagMSG* arg2)
{
    if (*(arg2 + 4) == 0x100)
    {
        int32_t eax_1 = *(arg2 + 8);
        if (eax_1 == 0x1b)
        {
            return 1;
        }
        if (eax_1 == 0xd)
        {
            CWnd::UpdateData(arg1, 1);
            if (*(arg1 + 0x13c) == 1)
            {
                if (*(*(arg1 + 0x140) - 8) != 0)
                {
                    uint32_t eax_4 = GetTickCount();
                    HWND hWnd = *(arg1 + 0x20);
                    *(arg1 + 0x148) = eax_4;
                    SetTimer(hWnd, 1, 0xa, nullptr);
                }
                return 1;
            }
            CWnd::UpdateData(arg1, 0);
        }
    }
    return CDialog::PreTranslateMessage(arg1, arg2);
}

int32_t __fastcall sub_425700(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_4299d8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char var_14 = 0xdd;
    char var_13 = 0xa5;
    char var_11 = 0;
    char var_e = 0x77;
    class CString var_18;
    CString::CString(&var_18);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    char eax_2 = SendMessageA(*(arg1 + 0x100), 0x147, nullptr, nullptr);
    char var_12 = eax_2;
    char var_f = (0x10000 - eax_2);
    uint8_t var_10 = ((0x10000 - eax_2) >> 8);
    CString::operator=((arg1 + 0x128), &data_435ef0);
    char* edi = &var_14;
    int32_t i_1 = 7;
    int32_t i;
    do
    {
        int32_t eax_4;
        eax_4 = *edi;
        int32_t var_2c_1 = eax_4;
        CString::Format(&var_18, "%02X");
        CString::operator+=((arg1 + 0x128), &var_18);
        edi = &edi[1];
        i = i_1;
        i_1 = (i_1 - 1);
    } while (i != 1);
    CWnd::UpdateData(arg1, 0);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_5 = CString::~CString(&var_18);
    *fsbase = var_c;
    return eax_5;
}

int32_t __fastcall sub_4257f0(CWnd* arg1)
{
    int32_t var_4_3 = 0xffffffff;
    int32_t (* var_8)() = sub_4299f8;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char var_18 = 0xdd;
    char var_17 = 0x5a;
    char var_15 = 2;
    char var_14 = 0xff;
    char var_13 = 0xff;
    char var_12 = 0xff;
    char var_11 = 0xff;
    char var_10 = 0x77;
    class CString var_28;
    CString::CString(&var_28);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    char eax_2 = SendMessageA(*(arg1 + 0x80), 0x147, nullptr, nullptr);
    char var_16 = eax_2;
    uint32_t edx_1;
    if (*(arg1 + 0x138) == 0)
    {
        edx_1 = *(arg1 + 0x120);
    }
    else
    {
        void* esi_1 = *(arg1 + 0x134);
        char* var_40;
        char ecx_3;
        if (*(esi_1 - 8) == 4)
        {
            char i = 1;
            char i_3 = 1;
            do
            {
                uint32_t i_6 = i_3;
                ecx_3 = *((i_6 + esi_1) - 1);
                void var_21;
                *(&var_21 + i_6) = ecx_3;
                if (ecx_3 < 0x30)
                {
                    break;
                }
                if ((ecx_3 > 0x39 && ecx_3 < 0x41))
                {
                    break;
                }
                if (ecx_3 > 0x46)
                {
                    break;
                }
                i = (i + 1);
                i_3 = i;
            } while (i < 5);
            if (ecx_3 < 0x30)
            {
                int32_t __saved_edi_1 = 0x20;
                void* var_3c_2 = "Prompt";
                var_40 = &data_4359c0;
            }
            else
            {
                int32_t var_20;
                char* edx_3 = &var_20;
                int32_t i_5 = 4;
                int32_t i_1;
                do
                {
                    ecx_3 = *edx_3;
                    if (ecx_3 > 0x39)
                    {
                        ecx_3 = (ecx_3 - 0x37);
                    }
                    else
                    {
                        ecx_3 = (ecx_3 - 0x30);
                    }
                    *edx_3 = ecx_3;
                    edx_3 = &edx_3[1];
                    i_1 = i_5;
                    i_5 = (i_5 - 1);
                } while (i_1 != 1);
                edx_1 = (var_20 * 0x1111);
            }
        }
        else
        {
            int32_t __saved_edi = 0x20;
            void* var_3c_1 = "Prompt";
            var_40 = &data_4359e0;
        }
        if ((*(esi_1 - 8) != 4 || (*(esi_1 - 8) == 4 && ecx_3 < 0x30)))
        {
            CWnd::MessageBoxA(arg1, var_40, "Prompt", 0x20);
            int32_t var_4_1 = 0xffffffff;
            int32_t eax_3 = CString::~CString(&var_28);
            *fsbase = var_c;
            return eax_3;
        }
    }
    char var_13_1 = edx_1;
    int32_t ecx_17 = (((0xfffe - eax_2) - (edx_1 & 0xff)) - (edx_1 >> 8));
    char var_11_1 = ecx_17;
    uint8_t var_12_1 = (ecx_17 >> 8);
    CString::operator=((arg1 + 0x130), &data_435ef0);
    char* esi_5 = &var_18;
    int32_t i_4 = 9;
    int32_t i_2;
    do
    {
        int32_t ecx_19;
        ecx_19 = *esi_5;
        int32_t var_3c_3 = ecx_19;
        CString::Format(&var_28, "%02X");
        CString::operator+=((arg1 + 0x130), &var_28);
        esi_5 = &esi_5[1];
        i_2 = i_4;
        i_4 = (i_4 - 1);
    } while (i_2 != 1);
    CWnd::UpdateData(arg1, 0);
    int32_t var_4_2 = 0xffffffff;
    int32_t eax_7 = CString::~CString(&var_28);
    *fsbase = var_c;
    return eax_7;
}

int32_t __fastcall sub_425a10(CWnd* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429a18;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    class CString var_40;
    CString::CString(&var_40);
    int32_t var_4 = 0;
    CWnd::UpdateData(arg1, 1);
    HWND hWnd = *(arg1 + 0xc0);
    char var_3c = 0xdd;
    char var_3b = 0x5a;
    char eax_1 = SendMessageA(hWnd, 0x147, nullptr, nullptr);
    void* esi = *(arg1 + 0x124);
    char var_3a = (eax_1 - 0x60);
    int32_t ecx_2 = *(esi - 8);
    if (ecx_2 > 0x1f)
    {
        ecx_2 = 0x1f;
    }
    char var_38 = ecx_2;
    char var_39 = (ecx_2 + 1);
    int32_t ebx;
    ebx = 1;
    if (ecx_2 >= 1)
    {
        uint32_t eax_2 = 1;
        do
        {
            ebx = (ebx + 1);
            &var_38[eax_2] = *((eax_2 + esi) - 1);
            eax_2 = ebx;
        } while (eax_2 <= ecx_2);
    }
    int32_t ecx_3 = 0;
    uint32_t esi_2 = var_39;
    char i_2 = 0;
    if ((esi_2 + 2) > 0)
    {
        uint32_t i = 0;
        do
        {
            ebx = &var_3a[i];
            ecx_3 = (ecx_3 + ebx);
            i_2 = (i_2 + 1);
            i = i_2;
        } while (i < (esi_2 + 2));
    }
    &var_38[esi_2] = ((0x10000 - (ecx_3 & 0xffff)) >> 8);
    void var_37;
    *(&var_37 + var_39) = (0x10000 - (ecx_3 & 0xffff));
    void var_36;
    *(&var_36 + var_39) = 0x77;
    CString::operator=((arg1 + 0x12c), &data_435ef0);
    ebx = 0;
    if ((var_39 + 7) > 0)
    {
        uint32_t i_1 = 0;
        do
        {
            int32_t edx_2;
            edx_2 = &var_3c[i_1];
            int32_t var_58_1 = edx_2;
            CString::Format(&var_40, "%02X");
            CString::operator+=((arg1 + 0x12c), &var_40);
            ebx = (ebx + 1);
            i_1 = ebx;
        } while (i_1 < (var_39 + 7));
    }
    CWnd::UpdateData(arg1, 0);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_9 = CString::~CString(&var_40);
    *fsbase = var_c;
    return eax_9;
}

int32_t __fastcall sub_425bb0(char* arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429a38;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    char* var_10 = arg1;
    CWnd* esi = arg1;
    CString::CString(&var_10);
    int32_t var_4 = 0;
    CWnd::UpdateData(esi, 1);
    uint32_t eax_3 = SendMessageA(*(esi + 0x80), 0x147, nullptr, nullptr);
    char* var_18_1;
    if (eax_3 <= 0x41)
    {
        int32_t ecx_2;
        ecx_2 = *(eax_3 + 0x425e50);
        switch (ecx_2)
        {
            case 0:
            {
                var_18_1 = &data_43598c;
                goto label_425dca;
            }
            case 1:
            {
                CString::operator=(&var_10, &data_435e80);
                CString::operator+=(&var_10, &data_435e48);
                CString::operator+=(&var_10, &data_435e10);
            label_425ddb:
                CWnd::SetDlgItemTextA(esi, 0x56a, var_10);
                CWnd::UpdateData(esi, 0);
                int32_t var_4_1 = 0xffffffff;
                int32_t eax_4 = CString::~CString(&var_10);
                *fsbase = var_c;
                return eax_4;
                break;
            }
            case 2:
            {
                var_18_1 = &data_435dd4;
                goto label_425dca;
            }
            case 3:
            {
                var_18_1 = &data_435dbc;
                goto label_425dca;
            }
            case 4:
            {
                CString::operator=(&var_10, &data_435d88);
                CString::operator+=(&var_10, &data_435d58);
                CString::operator+=(&var_10, &data_435d24);
                goto label_425ddb;
            }
            case 5:
            {
                var_18_1 = &data_435d00;
                goto label_425dca;
            }
            case 6:
            {
                var_18_1 = &data_435ce4;
                goto label_425dca;
            }
            case 7:
            {
                var_18_1 = &data_435cc4;
                goto label_425dca;
            }
            case 8:
            {
                CString::operator=(&var_10, &data_435c9c);
                CString::operator+=(&var_10, &data_435c6c);
                goto label_425ddb;
            }
            case 9:
            {
                CString::operator=(&var_10, &data_435c4c);
                CString::operator+=(&var_10, &data_435c20);
                CString::operator+=(&var_10, &data_435bec);
                goto label_425ddb;
            }
            case 0xa:
            {
                CString::operator=(&var_10, &data_435c4c);
                CString::operator+=(&var_10, &data_435bbc);
                CString::operator+=(&var_10, &data_435b88);
                goto label_425ddb;
            }
            case 0xb:
            {
                CString::operator=(&var_10, &data_435c4c);
                CString::operator+=(&var_10, &data_435b58);
                CString::operator+=(&var_10, &data_435b24);
                goto label_425ddb;
            }
            case 0xc:
            {
                CString::operator=(&var_10, &data_435c4c);
                CString::operator+=(&var_10, &data_435af4);
                CString::operator+=(&var_10, &data_435ac0);
                goto label_425ddb;
            }
            case 0xd:
            {
                CString::operator=(&var_10, &data_435c4c);
                CString::operator+=(&var_10, &data_435a8c);
                CString::operator+=(&var_10, &data_435a50);
                goto label_425ddb;
            }
            case 0xe:
            {
                var_18_1 = &data_435a34;
                goto label_425dca;
            }
            case 0xf:
            {
                var_18_1 = &data_435a1c;
                goto label_425dca;
            }
        }
    }
    var_18_1 = &data_4359fc;
label_425dca:
    CString::operator=(&var_10, var_18_1);
    goto label_425ddb;
}

long __thiscall sub_425ea0(CWnd* arg1, int32_t arg2)
{
    if (arg2 == 1)
    {
        int32_t eax = sub_404a90();
        int32_t eax_10;
        if (eax == 0)
        {
            eax_10 = (GetTickCount() - *(arg1 + 0x148));
            if (eax_10 > 0x1388)
            {
                KillTimer(*(arg1 + 0x20), 1);
                CString::operator=((arg1 + 0x144), &data_4312e8);
                CString::operator=((arg1 + 0x140), &data_435ef0);
            }
        }
        else
        {
            sub_404a70();
            KillTimer(*(arg1 + 0x20), 1);
            HANDLE eax_2;
            int32_t edi_1;
            eax_2 = sub_4165f0(&data_4360b0, (data_433b0c + 1), data_433b10, 0);
            if (eax_2 == 0)
            {
                CString::operator=((arg1 + 0x144), &data_434df4);
                CString::operator=((arg1 + 0x140), &data_435ef0);
                sub_404a80();
            }
            else
            {
                int32_t eax_3 = data_4360f8;
                char __saved_ebp_1;
                if (eax_3 == 0)
                {
                    __saved_ebp_1 = 0x4e;
                }
                if (eax_3 == 1)
                {
                    __saved_ebp_1 = 0x4f;
                }
                if (eax_3 == 2)
                {
                    __saved_ebp_1 = 0x45;
                }
                if (((eax_3 == 0 || eax_3 == 1) || eax_3 == 2))
                {
                    sub_416890(&data_4360b0, __saved_ebp_1);
                }
                if (sub_41edb0(arg1, &data_4360b0, 0, 0x5678) == 0)
                {
                    CString::operator=((arg1 + 0x144), &data_434a3c);
                }
                else
                {
                    int32_t var_30_3 = edi_1;
                    void* edi_2 = *(arg1 + 0x140);
                    int32_t eax_4;
                    eax_4 = *(edi_2 - 8);
                    arg2 = eax_4;
                    if (eax_4 > 0x1f)
                    {
                        eax_4 = 0x1f;
                        arg2 = 0x1f;
                    }
                    char var_23_1 = eax_4;
                    char var_24 = (eax_4 + 1);
                    char edx_3 = 2;
                    int32_t ecx_2 = (arg2 + 1);
                    if (ecx_2 >= 2)
                    {
                        uint32_t eax_7 = 2;
                        do
                        {
                            edx_3 = (edx_3 + 1);
                            arg2 = edx_3;
                            &var_24[eax_7] = *((eax_7 + edi_2) - 2);
                            eax_7 = arg2;
                        } while (eax_7 <= ecx_2);
                    }
                    sub_41f3b0(&data_4360b0, 0xa2, &var_24);
                    sub_41edb0(arg1, &data_4360b0, 1, 0x2828);
                    CString::operator=((arg1 + 0x144), (arg1 + 0x140));
                    CString::operator+=((arg1 + 0x144), &data_435ea8);
                }
                CString::operator=((arg1 + 0x140), &data_435ef0);
                sub_416a40(&data_4360b0);
                sub_404a80();
            }
        }
        if (((eax == 0 && eax_10 > 0x1388) || eax != 0))
        {
            CWnd::UpdateData(arg1, 0);
        }
    }
    return CWnd::Default(arg1);
}

void*** __fastcall sub_426090(CWnd* arg1)
{
    int32_t var_4_1 = 0xffffffff;
    int32_t (* var_8)() = sub_429a63;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    CWnd* var_10 = arg1;
    void*** esi = arg1;
    void*** var_10_1 = esi;
    CWnd::CWnd(arg1);
    *esi = &data_42adb8;
    int32_t var_4 = 0;
    CString::CString(&esi[0x14]);
    var_4 = 1;
    *esi = &data_42c840;
    esi[0x10] = 0;
    esi[0x11] = 1;
    esi[0x12] = 0x64;
    esi[0x13] = 0;
    esi[0x15] = 1;
    CString::Empty(&esi[0x14]);
    esi[0x17] = GetSysColor(COLOR_HIGHLIGHT);
    esi[0x18] = GetSysColor(COLOR_WINDOW);
    esi[0x19] = GetSysColor(COLOR_HIGHLIGHT);
    uint32_t eax_4 = GetSysColor(COLOR_WINDOW);
    int32_t ecx_2 = var_c;
    esi[0x1a] = eax_4;
    esi[0x16] = 0xffffffff;
    *fsbase = ecx_2;
    return esi;
}

void*** __thiscall sub_426140(void*** arg1, char arg2)
{
    sub_426160(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_426160(void*** arg1)
{
    int32_t var_4_2 = 0xffffffff;
    int32_t (* var_8)() = sub_429a78;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    void*** var_10 = arg1;
    void*** var_10_1 = arg1;
    *arg1 = &data_42c840;
    int32_t var_4 = 0;
    CString::~CString(&arg1[0x14]);
    int32_t var_4_1 = 0xffffffff;
    int32_t eax_1 = CProgressCtrl::~CProgressCtrl(arg1);
    *fsbase = var_c;
    return eax_1;
}

int32_t sub_4261c0() __pure
{
    return CWnd::messageMap;
}

int32_t sub_4261d0() __pure
{
    return 0x42c7a8;
}

long __thiscall sub_4261e0(CWnd* arg1, char* arg2)
{
    long eax = CWnd::Default(arg1);
    uint8_t* _Str1 = *(arg1 + 0x50);
    int32_t eax_2;
    if (arg2 != 0)
    {
        eax_2 = _mbscmp(_Str1, arg2);
    }
    else if (*(_Str1 - 8) == 0)
    {
        return eax;
    }
    if (((arg2 != 0 && eax_2 != 0) || arg2 == 0))
    {
        CString::operator=((arg1 + 0x50), arg2);
        InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    return eax;
}

uint8_t* __thiscall sub_426240(void* arg1, uint32_t arg2, uint8_t* arg3)
{
    uint8_t* eax_2 = _mbsnbcpy(arg3, *(arg1 + 0x50), arg2);
    if (eax_2 == 0)
    {
        return eax_2;
    }
    uint32_t eax_3 = *(*(arg1 + 0x50) - 8);
    if (arg2 < eax_3)
    {
        eax_3 = arg2;
    }
    return eax_3;
}

int32_t MLI::Dump() __pure
{
    return 1;
}

long __fastcall sub_426290(CWnd* arg1)
{
    long eax = CWnd::Default(arg1);
    *(arg1 + 0x58) = 0xffffffff;
    return eax;
}

int32_t __fastcall sub_4262b0(void* arg1, int32_t arg2 @ ebp)
{
    int32_t var_4 = 0xffffffff;
    int32_t (* var_8)() = sub_429af0;
    int32_t* fsbase;
    int32_t var_c = *fsbase;
    *fsbase = &var_c;
    int32_t esi;
    int32_t var_e8 = esi;
    int32_t* esp_1 = &var_e8;
    int32_t eax = *(arg1 + 0x4c);
    if (eax < *(arg1 + 0x48))
    {
        HWND hWnd = *(arg1 + 0x20);
        void* const var_ec_1 = 0;
        void* edi;
        void* var_f0 = edi;
        void var_80;
        void* var_f4 = &var_80;
        GetClientRect(hWnd, var_f4);
        int32_t eax_1 = *(arg1 + 0x4c);
        int32_t edx_2 = (*(arg1 + 0x48) - eax_1);
        long double x87_r7_1 = (*(arg1 + 0x40) - eax_1);
        var_f4 = arg1;
        double var_70_1 = (x87_r7_1 / edx_2);
        int32_t var_68;
        CPaintDC::CPaintDC(&var_68, var_f4);
        void** esp_2 = &var_f0;
        int32_t var_4_1 = 0;
        int32_t var_d4;
        CDC::CDC(&var_d4);
        var_4_1 = 1;
        int32_t var_c4;
        sub_424720(&var_c4);
        var_c4 = 0x42b144;
        int32_t* var_b8_1 = &var_68;
        var_4_1 = 2;
        int32_t var_5c;
        int32_t eax_2;
        eax_2 = var_5c == 0;
        var_d4 = 0x42c5a0;
        int32_t var_bc_1 = 0;
        int32_t var_a4_1 = eax_2;
        int32_t var_64;
        if (eax_2 == 0)
        {
            int32_t var_c8_1 = var_5c;
            int32_t var_60;
            int32_t var_cc_1 = var_60;
            int32_t var_d0_1 = var_64;
        }
        else
        {
            int32_t edx_3 = var_68;
            int32_t var_b4;
            var_f4 = &var_b4;
            *(edx_3 + 0x58)(var_f4);
            int32_t eax_3 = (-&var_68);
            var_f4 = ((eax_3 - eax_3) & var_64);
            var_f4 = CreateCompatibleDC(var_f4);
            CDC::Attach(&var_d4, var_f4);
            int32_t edx_4 = var_b4;
            void* var_b0;
            int32_t var_a8;
            var_f4 = (var_a8 - var_b0);
            int32_t var_ac;
            sub_4268b0(&var_c4, &var_68, (var_ac - edx_4), var_f4);
            var_f4 = &var_c4;
            class CGdiObject* eax_9 = sub_425050(&var_d4, var_f4);
            int32_t edx_5 = var_b4;
            class CGdiObject* var_bc_2 = eax_9;
            var_f4 = var_b0;
            void var_14;
            CDC::SetWindowOrg(&var_d4, &var_14, edx_5);
            esp_2 = &var_f4;
        }
        int32_t eax_10 = esp_2[0x1e];
        int32_t edi_1 = esp_2[0x1c];
        esp_2[0x1a] = eax_10;
        esp_2[0x16] = eax_10;
        int32_t ecx_17 = esp_2[0x1d];
        int32_t edx_7 = esp_2[0x1f];
        esp_2[4] = (eax_10 - edi_1);
        esp_2[4];
        esp_2[0x3b] = 3;
        esp_2[0x18] = edi_1;
        esp_2[0x19] = ecx_17;
        esp_2[0x1b] = edx_7;
        *(esp_2 + 0x80);
        esp_2[0x14] = edi_1;
        esp_2[0x15] = ecx_17;
        esp_2[0x17] = edx_7;
        esp_2[0x16] = (_ftol() + edi_1);
        *(esp_2 - 4) = *(arg1 + 0x5c);
        *(esp_2 - 8) = &esp_2[0x14];
        CDC::FillSolidRect(&esp_2[7]);
        int32_t edx_8 = esp_2[0x16];
        *(esp_2 - 4) = *(arg1 + 0x60);
        *(esp_2 - 8) = &esp_2[0x18];
        esp_2[0x18] = edx_8;
        CDC::FillSolidRect(&esp_2[7]);
        void* esp_8 = esp_2;
        if (*(arg1 + 0x54) != 0)
        {
            CString::CString((esp_8 + 0xc));
            void* edx_9 = *(arg1 + 0x50);
            *(esp_8 + 0xec) = 4;
            void* esp_10;
            if (*(edx_9 - 8) == 0)
            {
                *(esp_8 + 0x80);
                *(esp_8 - 4) = _ftol();
                *(esp_8 - 8) = "%d%%";
                *(esp_8 - 0xc) = (esp_8 + 0xc);
                CString::Format();
                esp_10 = esp_8;
            }
            else
            {
                *(esp_8 - 4) = (arg1 + 0x50);
                CString::operator=((esp_8 + 0xc));
                esp_10 = esp_8;
            }
            *(esp_10 - 4) = 1;
            CDC::SetBkMode((esp_10 + 0x1c));
            *(esp_10 + 0x18) = 0;
            *(esp_10 + 0x14) = &data_42c464;
            int32_t edx_10 = *(esp_10 + 0x58);
            int32_t eax_19 = *(esp_10 + 0x54);
            *(esp_10 - 4) = *(esp_10 + 0x5c);
            int32_t ecx_26 = *(esp_10 + 0x50);
            *(esp_10 - 8) = edx_10;
            *(esp_10 - 0xc) = eax_19;
            *(esp_10 - 0x10) = ecx_26;
            *(esp_10 + 0xec) = 5;
            *(esp_10 - 4) = CreateRectRgn();
            CGdiObject::Attach((esp_10 + 0x14));
            *(esp_10 - 4) = (esp_10 + 0x14);
            CDC::SelectClipRgn((esp_10 + 0x1c));
            *(esp_10 - 4) = *(arg1 + 0x68);
            CDC::SetTextColor((esp_10 + 0x1c));
            void* eax_22 = *(esp_10 + 0xc);
            *(esp_10 - 4) = 0x25;
            *(esp_10 - 8) = (esp_10 + 0x70);
            *(esp_10 - 0xc) = *(eax_22 - 8);
            *(esp_10 - 0x10) = eax_22;
            *(*(esp_10 + 0x1c) + 0x70)();
            CGdiObject::DeleteObject((esp_10 + 0x14));
            int32_t edx_13 = *(esp_10 + 0x68);
            int32_t eax_24 = *(esp_10 + 0x64);
            *(esp_10 - 4) = *(esp_10 + 0x6c);
            int32_t ecx_34 = *(esp_10 + 0x60);
            *(esp_10 - 8) = edx_13;
            *(esp_10 - 0xc) = eax_24;
            *(esp_10 - 0x10) = ecx_34;
            *(esp_10 - 4) = CreateRectRgn();
            CGdiObject::Attach((esp_10 + 0x14));
            *(esp_10 - 4) = (esp_10 + 0x14);
            CDC::SelectClipRgn((esp_10 + 0x1c));
            *(esp_10 - 4) = *(arg1 + 0x64);
            CDC::SetTextColor((esp_10 + 0x1c));
            void* eax_27 = *(esp_10 + 0xc);
            *(esp_10 - 4) = 0x25;
            *(esp_10 - 8) = (esp_10 + 0x70);
            *(esp_10 - 0xc) = *(eax_27 - 8);
            *(esp_10 - 0x10) = eax_27;
            *(*(esp_10 + 0x1c) + 0x70)();
            esp_8 = esp_10;
            *(esp_8 + 0x14) = 0x42a6d0;
            *(esp_8 + 0xec) = 6;
            CGdiObject::DeleteObject((esp_8 + 0x14));
            *(esp_8 + 0x14) = 0x42a6e4;
            *(esp_8 + 0xec) = 3;
            CString::~CString((esp_8 + 0xc));
        }
        *(esp_8 + 0x1c) = 0x42c5a0;
        int32_t eax_29 = *(esp_8 + 0x4c);
        *(esp_8 + 0xec) = 8;
        if (eax_29 == 0)
        {
            *(esp_8 + 0x24) = 0;
            *(esp_8 + 0x20) = 0;
        }
        else
        {
            int32_t esi_2 = *(esp_8 + 0x40);
            int32_t edi_2 = *(esp_8 + 0x3c);
            int32_t ecx_43 = (*(esp_8 + 0x48) - esi_2);
            int32_t edx_17 = (*(esp_8 + 0x44) - edi_2);
            *(esp_8 - 4) = arg2;
            int32_t ebp = *(esp_8 + 0x20);
            *(esp_8 - 8) = 0xcc0020;
            int32_t eax_31 = (-(esp_8 + 0x1c));
            *(esp_8 - 0xc) = esi_2;
            *(esp_8 - 0x10) = edi_2;
            *(esp_8 - 0x14) = ((eax_31 - eax_31) & ebp);
            *(esp_8 - 0x18) = ecx_43;
            void* ecx_44 = *(esp_8 + 0x38);
            *(esp_8 - 0x1c) = edx_17;
            *(esp_8 - 0x20) = esi_2;
            *(esp_8 - 0x24) = edi_2;
            *(esp_8 - 0x28) = *(ecx_44 + 4);
            BitBlt();
            void* eax_34 = *(esp_8 + 0x34);
            *(esp_8 - 4);
            if (eax_34 != 0)
            {
                *(esp_8 - 4) = *(eax_34 + 4);
                *(esp_8 - 8) = *(esp_8 + 0x20);
                CDC::SelectGdiObject();
            }
            else
            {
                *(esp_8 - 4) = 0;
                *(esp_8 - 8) = *(esp_8 + 0x20);
                CDC::SelectGdiObject();
            }
        }
        *(esp_8 + 0xec) = 7;
        *(esp_8 + 0x2c) = 0x42b144;
        sub_401ea0((esp_8 + 0x2c));
        *(esp_8 + 0xec) = 0;
        CDC::~CDC((esp_8 + 0x1c));
        *(esp_8 + 0xec) = 0xffffffff;
        eax = CPaintDC::~CPaintDC((esp_8 + 0x88));
        *esp_8;
        *(esp_8 + 4);
        esp_1 = (esp_8 + 8);
    }
    *esp_1;
    *fsbase = esp_1[0x37];
    return eax;
}

int32_t __thiscall sub_4266f0(void* arg1, int32_t arg2)
{
    *(arg1 + 0x5c) = arg2;
    return arg2;
}

int32_t __thiscall sub_426700(void* arg1, int32_t arg2)
{
    *(arg1 + 0x60) = arg2;
    return arg2;
}

int32_t __thiscall sub_426710(void* arg1, int32_t arg2)
{
    *(arg1 + 0x64) = arg2;
    return arg2;
}

int32_t __thiscall sub_426720(void* arg1, int32_t arg2)
{
    *(arg1 + 0x68) = arg2;
    return arg2;
}

int32_t __fastcall sub_426730(void* arg1)
{
    return *(arg1 + 0x5c);
}

int32_t __fastcall sub_426740(void* arg1)
{
    return *(arg1 + 0x60);
}

int32_t __fastcall sub_426750(void* arg1)
{
    return *(arg1 + 0x64);
}

int32_t __fastcall sub_426760(void* arg1)
{
    return *(arg1 + 0x68);
}

BOOL __thiscall sub_426770(void* arg1, int32_t arg2)
{
    BOOL eax_1 = IsWindow(*(arg1 + 0x20));
    if (eax_1 == 0)
    {
        *(arg1 + 0x54) = arg2;
        return eax_1;
    }
    BOOL eax_2 = *(arg1 + 0x54);
    if (eax_2 != arg2)
    {
        eax_2 = InvalidateRect(*(arg1 + 0x20), nullptr, 1);
    }
    *(arg1 + 0x54) = arg2;
    return eax_2;
}

int32_t __thiscall sub_4267b0(void* arg1, int32_t arg2, int32_t arg3)
{
    *(arg1 + 0x48) = arg3;
    *(arg1 + 0x4c) = arg2;
    return arg3;
}

int32_t __thiscall sub_4267d0(void* arg1, int32_t arg2)
{
    if (IsWindow(*(arg1 + 0x20)) == 0)
    {
        return 0xffffffff;
    }
    HWND hWnd = *(arg1 + 0x20);
    int32_t edi = *(arg1 + 0x40);
    *(arg1 + 0x40) = arg2;
    int32_t lpRect;
    GetClientRect(hWnd, &lpRect);
    int32_t eax_3 = *(arg1 + 0x4c);
    ((*(arg1 + 0x40) - eax_3) / (*(arg1 + 0x48) - eax_3));
    int32_t eax_6 = _ftol();
    if (eax_6 != *(arg1 + 0x58))
    {
        HWND hWnd_1 = *(arg1 + 0x20);
        *(arg1 + 0x58) = eax_6;
        RedrawWindow(hWnd_1, nullptr, nullptr, RDW_INVALIDATE | RDW_ERASE | RDW_UPDATENOW);
    }
    return edi;
}

int32_t __fastcall sub_426870(void* arg1)
{
    return sub_4267d0(arg1, (*(arg1 + 0x44) + *(arg1 + 0x40)));
}

int32_t __thiscall sub_426880(void* arg1, int32_t arg2)
{
    return sub_4267d0(arg1, (*(arg1 + 0x40) + arg2));
}

int32_t __thiscall sub_4268a0(void* arg1, int32_t arg2)
{
    *(arg1 + 0x44) = arg2;
    return arg2;
}

int32_t __thiscall sub_4268b0(CGdiObject* arg1, void* arg2, int32_t arg3, int32_t arg4)
{
    return CGdiObject::Attach(arg1, CreateCompatibleBitmap(*(arg2 + 4), arg3, arg4));
}

struct CRuntimeClass* __thiscall CFont::GetRuntimeClass(CFont* this)
{
    /* tailcall */
    return CFont::GetRuntimeClass(this);
}

int32_t __thiscall CGdiObject::Attach(CGdiObject* this, void* arg2)
{
    /* tailcall */
    return CGdiObject::Attach(this, arg2);
}

void operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void __thiscall CString::~CString(CString* this)
{
    /* tailcall */
    return CString::~CString(this);
}

struct CRuntimeClass* __thiscall CGdiObject::GetRuntimeClass(CGdiObject* this)
{
    /* tailcall */
    return CGdiObject::GetRuntimeClass(this);
}

int32_t __thiscall CGdiObject::DeleteObject(CGdiObject* this)
{
    /* tailcall */
    return CGdiObject::DeleteObject(this);
}

struct CRuntimeClass* __thiscall CObject::GetRuntimeClass(CObject* this)
{
    /* tailcall */
    return CObject::GetRuntimeClass(this);
}

void __thiscall CString::CString(CString* this, class CString const& arg2)
{
    /* tailcall */
    return CString::CString(this, arg2);
}

void __thiscall CString::CString(CString* this, char const* arg2)
{
    /* tailcall */
    return CString::CString(this, arg2);
}

class CString const& __thiscall CString::operator+=(CString* this, class CString const& arg2)
{
    /* tailcall */
    return CString::operator+=(this, arg2);
}

class CString const& __thiscall CString::operator+=(CString* this, char const* arg2)
{
    /* tailcall */
    return CString::operator+=(this, arg2);
}

void CString::Format(CString* this, char const* arg2)
{
    /* tailcall */
    return CString::Format(this, arg2);
}

void __thiscall CString::CString(CString* this)
{
    /* tailcall */
    return CString::CString(this);
}

class CString __thiscall CString::Mid(CString* this, int32_t arg2)
{
    /* tailcall */
    return CString::Mid(this, arg2);
}

class CString const& __thiscall CString::operator=(CString* this, class CString const& arg2)
{
    /* tailcall */
    return CString::operator=(this, arg2);
}

class CString __thiscall CString::Left(CString* this, int32_t arg2)
{
    /* tailcall */
    return CString::Left(this, arg2);
}

int32_t __thiscall CString::Find(CString* this, char const* arg2)
{
    /* tailcall */
    return CString::Find(this, arg2);
}

void __thiscall CDialog::~CDialog(CDialog* this)
{
    /* tailcall */
    return CDialog::~CDialog(this);
}

void __thiscall CFontDialog::GetCurrentFont(CFontDialog* this, struct tagLOGFONTA* arg2)
{
    /* tailcall */
    return CFontDialog::GetCurrentFont(this, arg2);
}

int32_t __thiscall CFontDialog::DoModal(CFontDialog* this)
{
    /* tailcall */
    return CFontDialog::DoModal(this);
}

void __thiscall CFontDialog::CFontDialog(CFontDialog* this, struct tagLOGFONTA* arg2, unsigned long arg3, class CDC* arg4, class CWnd* arg5)
{
    /* tailcall */
    return CFontDialog::CFontDialog(this, arg2, arg3, arg4, arg5);
}

void __thiscall CDialog::PreInitDialog(CDialog* this)
{
    /* tailcall */
    return CDialog::PreInitDialog(this);
}

void __thiscall CDialog::OnCancel(CDialog* this)
{
    /* tailcall */
    return CDialog::OnCancel(this);
}

void __thiscall CDialog::OnOK(CDialog* this)
{
    /* tailcall */
    return CDialog::OnOK(this);
}

void __thiscall CDialog::OnSetFont(CDialog* this, class CFont* arg2)
{
    /* tailcall */
    return CDialog::OnSetFont(this, arg2);
}

int32_t __thiscall CDialog::OnInitDialog(CDialog* this)
{
    /* tailcall */
    return CDialog::OnInitDialog(this);
}

int32_t __thiscall CDialog::DoModal(CDialog* this)
{
    /* tailcall */
    return CDialog::DoModal(this);
}

int32_t __thiscall CDialog::SetOccDialogInfo(CDialog* this, struct _AFX_OCC_DIALOG_INFO* arg2)
{
    /* tailcall */
    return CDialog::SetOccDialogInfo(this, arg2);
}

int32_t __thiscall CWnd::IsFrameWnd(CWnd* this)
{
    /* tailcall */
    return CWnd::IsFrameWnd(this);
}

int32_t __thiscall CDialog::CheckAutoCenter(CDialog* this)
{
    /* tailcall */
    return CDialog::CheckAutoCenter(this);
}

int32_t __thiscall CWnd::OnChildNotify(CWnd* this, uint32_t arg2, uint32_t arg3, long arg4, long* arg5)
{
    /* tailcall */
    return CWnd::OnChildNotify(this, arg2, arg3, arg4, arg5);
}

void __thiscall CWnd::PostNcDestroy(CWnd* this)
{
    /* tailcall */
    return CWnd::PostNcDestroy(this);
}

long __thiscall CWnd::DefWindowProcA(CWnd* this, uint32_t arg2, uint32_t arg3, long arg4)
{
    /* tailcall */
    return CWnd::DefWindowProcA(this, arg2, arg3, arg4);
}

int32_t __thiscall CWnd::OnWndMsg(CWnd* this, uint32_t arg2, uint32_t arg3, long arg4, long* arg5)
{
    /* tailcall */
    return CWnd::OnWndMsg(this, arg2, arg3, arg4, arg5);
}

long __thiscall CWnd::WindowProc(CWnd* this, uint32_t arg2, uint32_t arg3, long arg4)
{
    /* tailcall */
    return CWnd::WindowProc(this, arg2, arg3, arg4);
}

int32_t __thiscall CWnd::OnAmbientProperty(CWnd* this, class COleControlSite* arg2, long arg3, struct tagVARIANT* arg4)
{
    /* tailcall */
    return CWnd::OnAmbientProperty(this, arg2, arg3, arg4);
}

long (__stdcall**)(struct HWND__*, uint32_t, uint32_t, long) __thiscall CWnd::GetSuperWndProcAddr(CWnd* this)
{
    /* tailcall */
    return CWnd::GetSuperWndProcAddr(this);
}

int32_t __thiscall CWnd::OnNotify(CWnd* this, uint32_t arg2, long arg3, long* arg4)
{
    /* tailcall */
    return CWnd::OnNotify(this, arg2, arg3, arg4);
}

int32_t __thiscall CWnd::OnCommand(CWnd* this, uint32_t arg2, long arg3)
{
    /* tailcall */
    return CWnd::OnCommand(this, arg2, arg3);
}

void __thiscall CWnd::EndModalLoop(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::EndModalLoop(this, arg2);
}

int32_t __thiscall CWnd::ContinueModal(CWnd* this)
{
    /* tailcall */
    return CWnd::ContinueModal(this);
}

void __thiscall CWnd::WinHelpA(CWnd* this, unsigned long arg2, uint32_t arg3)
{
    /* tailcall */
    return CWnd::WinHelpA(this, arg2, arg3);
}

class CScrollBar* __thiscall CWnd::GetScrollBarCtrl(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::GetScrollBarCtrl(this, arg2);
}

int32_t __thiscall CWnd::OnToolHitTest(CWnd* this, class CPoint arg2, struct tagTOOLINFOA* arg3)
{
    /* tailcall */
    return CWnd::OnToolHitTest();
}

void __thiscall CWnd::CalcWindowRect(CWnd* this, struct tagRECT* arg2, uint32_t arg3)
{
    /* tailcall */
    return CWnd::CalcWindowRect(this, arg2, arg3);
}

int32_t __thiscall CWnd::PreCreateWindow(CWnd* this, struct tagCREATESTRUCTA& arg2)
{
    /* tailcall */
    return CWnd::PreCreateWindow(this, arg2);
}

int32_t __thiscall CWnd::DestroyWindow(CWnd* this)
{
    /* tailcall */
    return CWnd::DestroyWindow(this);
}

int32_t __thiscall CWnd::Create(CWnd* this, char const* arg2, char const* arg3, unsigned long arg4, struct tagRECT const& arg5, class CWnd* arg6, uint32_t arg7, struct CCreateContext* arg8)
{
    /* tailcall */
    return CWnd::Create(this, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

void __thiscall CWnd::PreSubclassWindow(CWnd* this)
{
    /* tailcall */
    return CWnd::PreSubclassWindow(this);
}

struct IConnectionPoint* __thiscall CCmdTarget::GetConnectionHook(CCmdTarget* this, struct _GUID const& arg2)
{
    /* tailcall */
    return CCmdTarget::GetConnectionHook(this, arg2);
}

int32_t __thiscall CCmdTarget::GetExtraConnectionPoints(CCmdTarget* this, class CPtrArray* arg2)
{
    /* tailcall */
    return CCmdTarget::GetExtraConnectionPoints(this, arg2);
}

struct IUnknown* __thiscall CCmdTarget::GetInterfaceHook(CCmdTarget* this, void const* arg2)
{
    /* tailcall */
    return CCmdTarget::GetInterfaceHook(this, arg2);
}

int32_t __thiscall CCmdTarget::OnCreateAggregates(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::OnCreateAggregates(this);
}

struct AFX_EVENTSINKMAP const* __thiscall CCmdTarget::GetEventSinkMap(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetEventSinkMap(this);
}

struct AFX_INTERFACEMAP const* __thiscall CCmdTarget::GetInterfaceMap(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetInterfaceMap(this);
}

struct AFX_CONNECTIONMAP const* __thiscall CCmdTarget::GetConnectionMap(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetConnectionMap(this);
}

struct AFX_DISPMAP const* __thiscall CCmdTarget::GetDispatchMap(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetDispatchMap(this);
}

struct AFX_OLECMDMAP const* __thiscall CCmdTarget::GetCommandMap(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetCommandMap(this);
}

long __thiscall CCmdTarget::GetTypeLib(CCmdTarget* this, unsigned long arg2, struct ITypeLib** arg3)
{
    /* tailcall */
    return CCmdTarget::GetTypeLib(this, arg2, arg3);
}

class CTypeLibCache* __thiscall CCmdTarget::GetTypeLibCache(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetTypeLibCache(this);
}

uint32_t __thiscall CCmdTarget::GetTypeInfoCount(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::GetTypeInfoCount(this);
}

int32_t __thiscall CCmdTarget::GetDispatchIID(CCmdTarget* this, struct _GUID* arg2)
{
    /* tailcall */
    return CCmdTarget::GetDispatchIID(this, arg2);
}

int32_t __thiscall CCmdTarget::IsInvokeAllowed(CCmdTarget* this, long arg2)
{
    /* tailcall */
    return CCmdTarget::IsInvokeAllowed(this, arg2);
}

void __thiscall CWnd::OnFinalRelease(CWnd* this)
{
    /* tailcall */
    return CWnd::OnFinalRelease(this);
}

int32_t __thiscall CDialog::OnCmdMsg(CDialog* this, uint32_t arg2, int32_t arg3, void* arg4, struct AFX_CMDHANDLERINFO* arg5)
{
    /* tailcall */
    return CDialog::OnCmdMsg(this, arg2, arg3, arg4, arg5);
}

struct CRuntimeClass* __thiscall CDialog::GetRuntimeClass(CDialog* this)
{
    /* tailcall */
    return CDialog::GetRuntimeClass(this);
}

void __thiscall CDialog::CDialog(CDialog* this, uint32_t arg2, class CWnd* arg3)
{
    /* tailcall */
    return CDialog::CDialog(this, arg2, arg3);
}

void __stdcall DDX_Text(class CDataExchange* arg1, int32_t arg2, int32_t& arg3)
{
    /* tailcall */
    return DDX_Text(arg1, arg2, arg3);
}

void __stdcall DDX_Text(class CDataExchange* arg1, int32_t arg2, uint32_t& arg3)
{
    /* tailcall */
    return DDX_Text(arg1, arg2, arg3);
}

int32_t __thiscall CDialog::PreTranslateMessage(CDialog* this, struct tagMSG* arg2)
{
    /* tailcall */
    return CDialog::PreTranslateMessage(this, arg2);
}

class CString const& __thiscall CString::operator=(CString* this, char const* arg2)
{
    /* tailcall */
    return CString::operator=(this, arg2);
}

void __thiscall CWnd::SetWindowTextA(CWnd* this, char const* arg2)
{
    /* tailcall */
    return CWnd::SetWindowTextA(this, arg2);
}

class CWnd* __thiscall CWnd::GetDlgItem(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::GetDlgItem(this, arg2);
}

long __thiscall CWnd::Default(CWnd* this)
{
    /* tailcall */
    return CWnd::Default(this);
}

class CString __thiscall CString::Mid(CString* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CString::Mid(this, arg2, arg3);
}

int32_t __thiscall CString::Find(CString* this, char arg2)
{
    /* tailcall */
    return CString::Find(this, arg2);
}

void __thiscall CWnd::GetWindowTextA(CWnd* this, class CString& arg2)
{
    /* tailcall */
    return CWnd::GetWindowTextA(this, arg2);
}

int32_t __thiscall CWnd::UpdateData(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::UpdateData(this, arg2);
}

int32_t __thiscall CWnd::MessageBoxA(CWnd* this, char const* arg2, char const* arg3, uint32_t arg4)
{
    /* tailcall */
    return CWnd::MessageBoxA(this, arg2, arg3, arg4);
}

void __thiscall CWnd::SetDlgItemTextA(CWnd* this, int32_t arg2, char const* arg3)
{
    /* tailcall */
    return CWnd::SetDlgItemTextA(this, arg2, arg3);
}

void __thiscall CComboBox::DeleteItem(CComboBox* this, struct tagDELETEITEMSTRUCT* arg2)
{
    /* tailcall */
    return CComboBox::DeleteItem(this, arg2);
}

int32_t __thiscall CComboBox::CompareItem(CComboBox* this, struct tagCOMPAREITEMSTRUCT* arg2)
{
    /* tailcall */
    return CComboBox::CompareItem(this, arg2);
}

void __thiscall CComboBox::MeasureItem(CComboBox* this, struct tagMEASUREITEMSTRUCT* arg2)
{
    /* tailcall */
    return CComboBox::MeasureItem(this, arg2);
}

void __thiscall CComboBox::DrawItem(CComboBox* this, struct tagDRAWITEMSTRUCT* arg2)
{
    /* tailcall */
    return CComboBox::DrawItem(this, arg2);
}

int32_t __thiscall CComboBox::OnChildNotify(CComboBox* this, uint32_t arg2, uint32_t arg3, long arg4, long* arg5)
{
    /* tailcall */
    return CComboBox::OnChildNotify(this, arg2, arg3, arg4, arg5);
}

struct CRuntimeClass* __thiscall CComboBox::GetRuntimeClass(CComboBox* this)
{
    /* tailcall */
    return CComboBox::GetRuntimeClass(this);
}

int32_t __thiscall CWnd::SetOccDialogInfo(CWnd* this, struct _AFX_OCC_DIALOG_INFO* arg2)
{
    /* tailcall */
    return CWnd::SetOccDialogInfo(this, arg2);
}

int32_t __thiscall CWnd::CheckAutoCenter(CWnd* this)
{
    /* tailcall */
    return CWnd::CheckAutoCenter(this);
}

int32_t __thiscall CWnd::PreTranslateMessage(CWnd* this, struct tagMSG* arg2)
{
    /* tailcall */
    return CWnd::PreTranslateMessage(this, arg2);
}

struct AFX_MSGMAP const* __thiscall CWnd::GetMessageMap(CWnd* this)
{
    /* tailcall */
    return CWnd::GetMessageMap(this);
}

int32_t __thiscall CCmdTarget::OnCmdMsg(CCmdTarget* this, uint32_t arg2, int32_t arg3, void* arg4, struct AFX_CMDHANDLERINFO* arg5)
{
    /* tailcall */
    return CCmdTarget::OnCmdMsg(this, arg2, arg3, arg4, arg5);
}

struct CRuntimeClass* __thiscall CStatic::GetRuntimeClass(CStatic* this)
{
    /* tailcall */
    return CStatic::GetRuntimeClass(this);
}

void __thiscall CStatic::~CStatic(CStatic* this)
{
    /* tailcall */
    return CStatic::~CStatic(this);
}

void __thiscall CComboBox::~CComboBox(CComboBox* this)
{
    /* tailcall */
    return CComboBox::~CComboBox(this);
}

void __thiscall CWnd::CWnd(CWnd* this)
{
    /* tailcall */
    return CWnd::CWnd(this);
}

void __stdcall DDX_Text(class CDataExchange* arg1, int32_t arg2, class CString& arg3)
{
    /* tailcall */
    return DDX_Text(arg1, arg2, arg3);
}

void __stdcall DDX_Control(class CDataExchange* arg1, int32_t arg2, class CWnd& arg3)
{
    /* tailcall */
    return DDX_Control(arg1, arg2, arg3);
}

class CString __stdcall operator+(char const* arg1, class CString const& arg2)
{
    /* tailcall */
    return operator+(arg1, arg2);
}

class CString __thiscall CFileDialog::GetNextPathName(CFileDialog* this, struct __POSITION*& arg2)
{
    /* tailcall */
    return CFileDialog::GetNextPathName(this, arg2);
}

int32_t __thiscall CFileDialog::DoModal(CFileDialog* this)
{
    /* tailcall */
    return CFileDialog::DoModal(this);
}

void __thiscall CFileDialog::CFileDialog(CFileDialog* this, int32_t arg2, char const* arg3, char const* arg4, unsigned long arg5, char const* arg6, class CWnd* arg7)
{
    /* tailcall */
    return CFileDialog::CFileDialog(this, arg2, arg3, arg4, arg5, arg6, arg7);
}

int32_t __thiscall CWnd::EnableWindow(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::EnableWindow(this, arg2);
}

class CWinThread* __stdcall AfxBeginThread(uint32_t (__cdecl* arg1)(void*), void* arg2, int32_t arg3, uint32_t arg4, unsigned long arg5, struct _SECURITY_ATTRIBUTES* arg6)
{
    /* tailcall */
    return AfxBeginThread(arg1, arg2, arg3, arg4, arg5, arg6);
}

struct CRuntimeClass* __thiscall CProgressCtrl::GetRuntimeClass(CProgressCtrl* this)
{
    /* tailcall */
    return CProgressCtrl::GetRuntimeClass(this);
}

void __thiscall CProgressCtrl::~CProgressCtrl(CProgressCtrl* this)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl(this);
}

void __stdcall DDV_MinMaxUInt(class CDataExchange* arg1, uint32_t arg2, uint32_t arg3, uint32_t arg4)
{
    /* tailcall */
    return DDV_MinMaxUInt(arg1, arg2, arg3, arg4);
}

void __stdcall DDX_Check(class CDataExchange* arg1, int32_t arg2, int32_t& arg3)
{
    /* tailcall */
    return DDX_Check(arg1, arg2, arg3);
}

int32_t __thiscall CWnd::ShowWindow(CWnd* this, int32_t arg2)
{
    /* tailcall */
    return CWnd::ShowWindow(this, arg2);
}

class CString __thiscall CFileDialog::GetFileName(CFileDialog* this)
{
    /* tailcall */
    return CFileDialog::GetFileName(this);
}

void __thiscall CStdioFile::Close(CStdioFile* this)
{
    /* tailcall */
    return CStdioFile::Close(this);
}

void __thiscall CStdioFile::WriteString(CStdioFile* this, char const* arg2)
{
    /* tailcall */
    return CStdioFile::WriteString(this, arg2);
}

void __thiscall CStdioFile::~CStdioFile(CStdioFile* this)
{
    /* tailcall */
    return CStdioFile::~CStdioFile(this);
}

int32_t __thiscall CStdioFile::Open(CStdioFile* this, char const* arg2, uint32_t arg3, class CFileException* arg4)
{
    /* tailcall */
    return CStdioFile::Open(this, arg2, arg3, arg4);
}

void __thiscall CStdioFile::CStdioFile(CStdioFile* this)
{
    /* tailcall */
    return CStdioFile::CStdioFile(this);
}

char* __thiscall CString::GetBuffer(CString* this, int32_t arg2)
{
    /* tailcall */
    return CString::GetBuffer(this, arg2);
}

void __thiscall CString::ReleaseBuffer(CString* this, int32_t arg2)
{
    /* tailcall */
    return CString::ReleaseBuffer(this, arg2);
}

int32_t __thiscall CStdioFile::ReadString(CStdioFile* this, class CString& arg2)
{
    /* tailcall */
    return CStdioFile::ReadString(this, arg2);
}

void __thiscall CTabCtrl::DrawItem(CTabCtrl* this, struct tagDRAWITEMSTRUCT* arg2)
{
    /* tailcall */
    return CTabCtrl::DrawItem(this, arg2);
}

int32_t __thiscall CTabCtrl::OnChildNotify(CTabCtrl* this, uint32_t arg2, uint32_t arg3, long arg4, long* arg5)
{
    /* tailcall */
    return CTabCtrl::OnChildNotify(this, arg2, arg3, arg4, arg5);
}

struct CRuntimeClass* __thiscall CTabCtrl::GetRuntimeClass(CTabCtrl* this)
{
    /* tailcall */
    return CTabCtrl::GetRuntimeClass(this);
}

struct CRuntimeClass* __thiscall CPen::GetRuntimeClass(CPen* this)
{
    /* tailcall */
    return CPen::GetRuntimeClass(this);
}

void __thiscall CTabCtrl::~CTabCtrl(CTabCtrl* this)
{
    /* tailcall */
    return CTabCtrl::~CTabCtrl(this);
}

int32_t __thiscall CWnd::ModifyStyle(CWnd* this, unsigned long arg2, unsigned long arg3, uint32_t arg4)
{
    /* tailcall */
    return CWnd::ModifyStyle(this, arg2, arg3, arg4);
}

struct CRuntimeClass* __thiscall CBitmap::GetRuntimeClass(CBitmap* this)
{
    /* tailcall */
    return CBitmap::GetRuntimeClass(this);
}

void __thiscall CPaintDC::~CPaintDC(CPaintDC* this)
{
    /* tailcall */
    return CPaintDC::~CPaintDC(this);
}

void __thiscall CDC::~CDC(CDC* this)
{
    /* tailcall */
    return CDC::~CDC(this);
}

int32_t __thiscall CDC::DeleteDC(CDC* this)
{
    /* tailcall */
    return CDC::DeleteDC(this);
}

int32_t __thiscall CDC::SetROP2(CDC* this, int32_t arg2)
{
    /* tailcall */
    return CDC::SetROP2(this, arg2);
}

void __thiscall CDC::FillSolidRect(CDC* this, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, unsigned long arg6)
{
    /* tailcall */
    return CDC::FillSolidRect(this, arg2, arg3, arg4, arg5, arg6);
}

unsigned long __thiscall CDC::SetTextColor(CDC* this, unsigned long arg2)
{
    /* tailcall */
    return CDC::SetTextColor(this, arg2);
}

int32_t __thiscall CDC::SetBkMode(CDC* this, int32_t arg2)
{
    /* tailcall */
    return CDC::SetBkMode(this, arg2);
}

class CGdiObject* __stdcall CDC::SelectGdiObject(struct HDC__* arg1, void* arg2)
{
    /* tailcall */
    return CDC::SelectGdiObject(arg1, arg2);
}

int32_t __thiscall CDC::Attach(CDC* this, struct HDC__* arg2)
{
    /* tailcall */
    return CDC::Attach(this, arg2);
}

void __thiscall CDC::CDC(CDC* this)
{
    /* tailcall */
    return CDC::CDC(this);
}

void __thiscall CPaintDC::CPaintDC(CPaintDC* this, class CWnd* arg2)
{
    /* tailcall */
    return CPaintDC::CPaintDC(this, arg2);
}

void __thiscall CRect::DeflateRect(CRect* this, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    /* tailcall */
    return CRect::DeflateRect(this, arg2, arg3, arg4, arg5);
}

int32_t __thiscall CDC::LineTo(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::LineTo(this, arg2, arg3);
}

class CPoint __thiscall CDC::MoveTo(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::MoveTo(this, arg2, arg3);
}

class CPen* __thiscall CDC::SelectObject(CDC* this, class CPen* arg2)
{
    /* tailcall */
    return CDC::SelectObject(this, arg2);
}

void __thiscall CDC::FillSolidRect(CDC* this, struct tagRECT const* arg2, unsigned long arg3)
{
    /* tailcall */
    return CDC::FillSolidRect(this, arg2, arg3);
}

class CGdiObject* __stdcall CGdiObject::FromHandle(void* arg1)
{
    /* tailcall */
    return CGdiObject::FromHandle(arg1);
}

int32_t __thiscall CWnd::GetDlgCtrlID(CWnd* this)
{
    /* tailcall */
    return CWnd::GetDlgCtrlID(this);
}

void* operator new(uint32_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

int32_t __thiscall CWnd::SetWindowPos(CWnd* this, class CWnd const* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, uint32_t arg7)
{
    /* tailcall */
    return CWnd::SetWindowPos(this, arg2, arg3, arg4, arg5, arg6, arg7);
}

void __thiscall CWnd::ClientToScreen(CWnd* this, struct tagRECT* arg2)
{
    /* tailcall */
    return CWnd::ClientToScreen(this, arg2);
}

uint32_t __thiscall CArchive::Read(CArchive* this, void* arg2, uint32_t arg3)
{
    /* tailcall */
    return CArchive::Read(this, arg2, arg3);
}

void __thiscall CArchive::Write(CArchive* this, void const* arg2, uint32_t arg3)
{
    /* tailcall */
    return CArchive::Write(this, arg2, arg3);
}

unsigned long __thiscall CArchive::ReadCount(CArchive* this)
{
    /* tailcall */
    return CArchive::ReadCount(this);
}

void __thiscall CArchive::WriteCount(CArchive* this, unsigned long arg2)
{
    /* tailcall */
    return CArchive::WriteCount(this, arg2);
}

class CWnd* __thiscall CWnd::SetFocus(CWnd* this)
{
    /* tailcall */
    return CWnd::SetFocus(this);
}

void __thiscall CInternetSession::CInternetSession(CInternetSession* this, char const* arg2, unsigned long arg3, unsigned long arg4, char const* arg5, char const* arg6, unsigned long arg7)
{
    /* tailcall */
    return CInternetSession::CInternetSession(this, arg2, arg3, arg4, arg5, arg6, arg7);
}

void __thiscall CException::Delete(CException* this)
{
    /* tailcall */
    return CException::Delete(this);
}

void __thiscall CString::CString(CString* this, uint16_t const* arg2)
{
    /* tailcall */
    return CString::CString(this, arg2);
}

int32_t __thiscall CHttpFile::SendRequest(CHttpFile* this, char const* arg2, unsigned long arg3, void* arg4, unsigned long arg5)
{
    /* tailcall */
    return CHttpFile::SendRequest(this, arg2, arg3, arg4, arg5);
}

int32_t __thiscall CHttpFile::AddRequestHeaders(CHttpFile* this, char const* arg2, unsigned long arg3, int32_t arg4)
{
    /* tailcall */
    return CHttpFile::AddRequestHeaders(this, arg2, arg3, arg4);
}

class CHttpFile* __thiscall CHttpConnection::OpenRequest(CHttpConnection* this, char const* arg2, char const* arg3, char const* arg4, unsigned long arg5, char const** arg6, char const* arg7, unsigned long arg8)
{
    /* tailcall */
    return CHttpConnection::OpenRequest(this, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

class CHttpConnection* __thiscall CInternetSession::GetHttpConnection(CInternetSession* this, char const* arg2, unsigned long arg3, uint16_t arg4, char const* arg5, char const* arg6)
{
    /* tailcall */
    return CInternetSession::GetHttpConnection(this, arg2, arg3, arg4, arg5, arg6);
}

int32_t __stdcall AfxParseURL(char const* arg1, unsigned long& arg2, class CString& arg3, class CString& arg4, uint16_t& arg5)
{
    /* tailcall */
    return AfxParseURL(arg1, arg2, arg3, arg4, arg5);
}

void __thiscall CToolTipCtrl::~CToolTipCtrl(CToolTipCtrl* this)
{
    /* tailcall */
    return CToolTipCtrl::~CToolTipCtrl(this);
}

void __thiscall CString::Empty(CString* this)
{
    /* tailcall */
    return CString::Empty(this);
}

void __thiscall CToolTipCtrl::CToolTipCtrl(CToolTipCtrl* this)
{
    /* tailcall */
    return CToolTipCtrl::CToolTipCtrl(this);
}

class CWnd* __stdcall CWnd::FromHandle(struct HWND__* arg1)
{
    /* tailcall */
    return CWnd::FromHandle(arg1);
}

int32_t __thiscall CToolTipCtrl::AddTool(CToolTipCtrl* this, class CWnd* arg2, char const* arg3, struct tagRECT const* arg4, uint32_t arg5)
{
    /* tailcall */
    return CToolTipCtrl::AddTool(this, arg2, arg3, arg4, arg5);
}

int32_t __thiscall CToolTipCtrl::Create(CToolTipCtrl* this, class CWnd* arg2, unsigned long arg3)
{
    /* tailcall */
    return CToolTipCtrl::Create(this, arg2, arg3);
}

unsigned long __thiscall CWnd::GetStyle(CWnd* this)
{
    /* tailcall */
    return CWnd::GetStyle(this);
}

void __thiscall CToolTipCtrl::UpdateTipText(CToolTipCtrl* this, char const* arg2, class CWnd* arg3, uint32_t arg4)
{
    /* tailcall */
    return CToolTipCtrl::UpdateTipText(this, arg2, arg3, arg4);
}

class CDC* __stdcall CDC::FromHandle(struct HDC__* arg1)
{
    /* tailcall */
    return CDC::FromHandle(arg1);
}

void __thiscall CWnd::ScreenToClient(CWnd* this, struct tagRECT* arg2)
{
    /* tailcall */
    return CWnd::ScreenToClient(this, arg2);
}

int32_t __stdcall AfxMessageBox(char const* arg1, uint32_t arg2, uint32_t arg3)
{
    /* tailcall */
    return AfxMessageBox(arg1, arg2, arg3);
}

void __thiscall CWinApp::OnHelp(CWinApp* this)
{
    /* tailcall */
    return CWinApp::OnHelp(this);
}

void __thiscall CWinApp::WinHelpA(CWinApp* this, unsigned long arg2, uint32_t arg3)
{
    /* tailcall */
    return CWinApp::WinHelpA(this, arg2, arg3);
}

int32_t __thiscall CWinApp::OnDDECommand(CWinApp* this, char* arg2)
{
    /* tailcall */
    return CWinApp::OnDDECommand(this, arg2);
}

void __thiscall CWinApp::DoWaitCursor(CWinApp* this, int32_t arg2)
{
    /* tailcall */
    return CWinApp::DoWaitCursor(this, arg2);
}

int32_t __thiscall CWinApp::DoMessageBox(CWinApp* this, char const* arg2, uint32_t arg3, uint32_t arg4)
{
    /* tailcall */
    return CWinApp::DoMessageBox(this, arg2, arg3, arg4);
}

int32_t __thiscall CWinApp::SaveAllModified(CWinApp* this)
{
    /* tailcall */
    return CWinApp::SaveAllModified(this);
}

int32_t __thiscall CWinApp::InitApplication(CWinApp* this)
{
    /* tailcall */
    return CWinApp::InitApplication(this);
}

void __thiscall CWinApp::AddToRecentFileList(CWinApp* this, char const* arg2)
{
    /* tailcall */
    return CWinApp::AddToRecentFileList(this, arg2);
}

class CDocument* __thiscall CWinApp::OpenDocumentFile(CWinApp* this, char const* arg2)
{
    /* tailcall */
    return CWinApp::OpenDocumentFile(this, arg2);
}

void __thiscall CWinThread::Delete(CWinThread* this)
{
    /* tailcall */
    return CWinThread::Delete(this);
}

class CWnd* __thiscall CWinThread::GetMainWnd(CWinThread* this)
{
    /* tailcall */
    return CWinThread::GetMainWnd(this);
}

int32_t __thiscall CWinThread::ProcessMessageFilter(CWinThread* this, int32_t arg2, struct tagMSG* arg3)
{
    /* tailcall */
    return CWinThread::ProcessMessageFilter(this, arg2, arg3);
}

long __thiscall CWinApp::ProcessWndProcException(CWinApp* this, class CException* arg2, struct tagMSG const* arg3)
{
    /* tailcall */
    return CWinApp::ProcessWndProcException(this, arg2, arg3);
}

int32_t __thiscall CWinThread::IsIdleMessage(CWinThread* this, struct tagMSG* arg2)
{
    /* tailcall */
    return CWinThread::IsIdleMessage(this, arg2);
}

int32_t __thiscall CWinApp::OnIdle(CWinApp* this, long arg2)
{
    /* tailcall */
    return CWinApp::OnIdle(this, arg2);
}

int32_t __thiscall CWinThread::PumpMessage(CWinThread* this)
{
    /* tailcall */
    return CWinThread::PumpMessage(this);
}

int32_t __thiscall CWinThread::PreTranslateMessage(CWinThread* this, struct tagMSG* arg2)
{
    /* tailcall */
    return CWinThread::PreTranslateMessage(this, arg2);
}

int32_t __thiscall CWinApp::Run(CWinApp* this)
{
    /* tailcall */
    return CWinApp::Run(this);
}

void __thiscall CCmdTarget::OnFinalRelease(CCmdTarget* this)
{
    /* tailcall */
    return CCmdTarget::OnFinalRelease(this);
}

struct CRuntimeClass* __thiscall CWinApp::GetRuntimeClass(CWinApp* this)
{
    /* tailcall */
    return CWinApp::GetRuntimeClass(this);
}

void __thiscall CWinApp::CWinApp(CWinApp* this, char const* arg2)
{
    /* tailcall */
    return CWinApp::CWinApp(this, arg2);
}

void __thiscall CWinApp::~CWinApp(CWinApp* this)
{
    /* tailcall */
    return CWinApp::~CWinApp(this);
}

class AFX_MODULE_STATE* __stdcall AfxGetModuleState()
{
    /* tailcall */
    return AfxGetModuleState();
}

int32_t __thiscall CWinApp::Enable3dControls(CWinApp* this)
{
    /* tailcall */
    return CWinApp::Enable3dControls(this);
}

void AfxEnableControlContainer(class COccManager* arg1)
{
    /* tailcall */
    return AfxEnableControlContainer(arg1);
}

int32_t __thiscall CWinApp::ExitInstance(CWinApp* this)
{
    /* tailcall */
    return CWinApp::ExitInstance(this);
}

struct HINSTANCE__* __stdcall AfxFindResourceHandle(char const* arg1, char const* arg2)
{
    /* tailcall */
    return AfxFindResourceHandle(arg1, arg2);
}

int32_t __thiscall CDialog::Create(CDialog* this, char const* arg2, class CWnd* arg3)
{
    /* tailcall */
    return CDialog::Create(this, arg2, arg3);
}

void __thiscall CFileFind::~CFileFind(CFileFind* this)
{
    /* tailcall */
    return CFileFind::~CFileFind(this);
}

void __thiscall CFileFind::CFileFind(CFileFind* this)
{
    /* tailcall */
    return CFileFind::CFileFind(this);
}

class CString __stdcall operator+(class CString const& arg1, class CString const& arg2)
{
    /* tailcall */
    return operator+(arg1, arg2);
}

struct CRuntimeClass* __thiscall CBrush::GetRuntimeClass(CBrush* this)
{
    /* tailcall */
    return CBrush::GetRuntimeClass(this);
}

void __thiscall CListCtrl::DrawItem(CListCtrl* this, struct tagDRAWITEMSTRUCT* arg2)
{
    /* tailcall */
    return CListCtrl::DrawItem(this, arg2);
}

int32_t __thiscall CListCtrl::OnChildNotify(CListCtrl* this, uint32_t arg2, uint32_t arg3, long arg4, long* arg5)
{
    /* tailcall */
    return CListCtrl::OnChildNotify(this, arg2, arg3, arg4, arg5);
}

struct AFX_MSGMAP const* __thiscall CListCtrl::GetMessageMap(CListCtrl* this)
{
    /* tailcall */
    return CListCtrl::GetMessageMap(this);
}

struct CRuntimeClass* __thiscall CListCtrl::GetRuntimeClass(CListCtrl* this)
{
    /* tailcall */
    return CListCtrl::GetRuntimeClass(this);
}

void __thiscall CListCtrl::~CListCtrl(CListCtrl* this)
{
    /* tailcall */
    return CListCtrl::~CListCtrl(this);
}

int32_t __thiscall CFont::CreatePointFont(CFont* this, int32_t arg2, char const* arg3, class CDC* arg4)
{
    /* tailcall */
    return CFont::CreatePointFont(this, arg2, arg3, arg4);
}

void* __thiscall CGdiObject::Detach(CGdiObject* this)
{
    /* tailcall */
    return CGdiObject::Detach(this);
}

int32_t __thiscall CListCtrl::InsertColumn(CListCtrl* this, int32_t arg2, char const* arg3, int32_t arg4, int32_t arg5, int32_t arg6)
{
    /* tailcall */
    return CListCtrl::InsertColumn(this, arg2, arg3, arg4, arg5, arg6);
}

int32_t __thiscall CListCtrl::InsertItem(CListCtrl* this, uint32_t arg2, int32_t arg3, char const* arg4, uint32_t arg5, uint32_t arg6, int32_t arg7, long arg8)
{
    /* tailcall */
    return CListCtrl::InsertItem(this, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int32_t __thiscall CListCtrl::SetItemText(CListCtrl* this, int32_t arg2, int32_t arg3, char const* arg4)
{
    /* tailcall */
    return CListCtrl::SetItemText(this, arg2, arg3, arg4);
}

struct HBRUSH__* __thiscall CDialog::OnCtlColor(CDialog* this, class CDC* arg2, class CWnd* arg3, uint32_t arg4)
{
    /* tailcall */
    return CDialog::OnCtlColor(this, arg2, arg3, arg4);
}

struct HDC__* __thiscall CDC::Detach(CDC* this)
{
    /* tailcall */
    return CDC::Detach(this);
}

uint32_t __thiscall CDC::SetTextAlign(CDC* this, uint32_t arg2)
{
    /* tailcall */
    return CDC::SetTextAlign(this, arg2);
}

class CFont* __thiscall CDC::SelectObject(CDC* this, class CFont* arg2)
{
    /* tailcall */
    return CDC::SelectObject(this, arg2);
}

class CPoint __thiscall CDC::SetWindowOrg(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::SetWindowOrg(this, arg2, arg3);
}

int32_t __thiscall CDC::SetMapMode(CDC* this, int32_t arg2)
{
    /* tailcall */
    return CDC::SetMapMode(this, arg2);
}

struct HDC__* __thiscall CPrintDialog::CreatePrinterDC(CPrintDialog* this)
{
    /* tailcall */
    return CPrintDialog::CreatePrinterDC(this);
}

void __thiscall CWinApp::SelectPrinter(CWinApp* this, void* arg2, void* arg3, int32_t arg4)
{
    /* tailcall */
    return CWinApp::SelectPrinter(this, arg2, arg3, arg4);
}

void __thiscall CPrintDialog::CPrintDialog(CPrintDialog* this, int32_t arg2, unsigned long arg3, class CWnd* arg4)
{
    /* tailcall */
    return CPrintDialog::CPrintDialog(this, arg2, arg3, arg4);
}

class CString const& __thiscall CString::operator+=(CString* this, char arg2)
{
    /* tailcall */
    return CString::operator+=(this, arg2);
}

class CString __thiscall CListCtrl::GetItemText(CListCtrl* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CListCtrl::GetItemText(this, arg2, arg3);
}

void __thiscall CStdioFile::Write(CStdioFile* this, void const* arg2, uint32_t arg3)
{
    /* tailcall */
    return CStdioFile::Write(this, arg2, arg3);
}

void __stdcall AfxEndThread(uint32_t arg1, int32_t arg2)
{
    /* tailcall */
    return AfxEndThread(arg1, arg2);
}

void __thiscall CComboBox::GetLBText(CComboBox* this, int32_t arg2, class CString& arg3)
{
    /* tailcall */
    return CComboBox::GetLBText(this, arg2, arg3);
}

struct CRuntimeClass* __thiscall CRgn::GetRuntimeClass(CRgn* this)
{
    /* tailcall */
    return CRgn::GetRuntimeClass(this);
}

int32_t __thiscall CDC::GetClipBox(CDC* this, struct tagRECT* arg2)
{
    /* tailcall */
    return CDC::GetClipBox(this, arg2);
}

class CSize __thiscall CDC::ScaleWindowExt(CDC* this, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    /* tailcall */
    return CDC::ScaleWindowExt(this, arg2, arg3, arg4, arg5);
}

class CSize __thiscall CDC::SetWindowExt(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::SetWindowExt(this, arg2, arg3);
}

class CSize __thiscall CDC::ScaleViewportExt(CDC* this, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    /* tailcall */
    return CDC::ScaleViewportExt(this, arg2, arg3, arg4, arg5);
}

class CSize __thiscall CDC::SetViewportExt(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::SetViewportExt(this, arg2, arg3);
}

class CPoint __thiscall CDC::OffsetViewportOrg(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::OffsetViewportOrg(this, arg2, arg3);
}

class CPoint __thiscall CDC::SetViewportOrg(CDC* this, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return CDC::SetViewportOrg(this, arg2, arg3);
}

unsigned long __thiscall CDC::SetBkColor(CDC* this, unsigned long arg2)
{
    /* tailcall */
    return CDC::SetBkColor(this, arg2);
}

class CGdiObject* __thiscall CDC::SelectStockObject(CDC* this, int32_t arg2)
{
    /* tailcall */
    return CDC::SelectStockObject(this, arg2);
}

int32_t __thiscall CDC::RestoreDC(CDC* this, int32_t arg2)
{
    /* tailcall */
    return CDC::RestoreDC(this, arg2);
}

int32_t __thiscall CDC::SaveDC(CDC* this)
{
    /* tailcall */
    return CDC::SaveDC(this);
}

void __thiscall CDC::ReleaseOutputDC(CDC* this)
{
    /* tailcall */
    return CDC::ReleaseOutputDC(this);
}

void __thiscall CDC::ReleaseAttribDC(CDC* this)
{
    /* tailcall */
    return CDC::ReleaseAttribDC(this);
}

void __thiscall CDC::SetOutputDC(CDC* this, struct HDC__* arg2)
{
    /* tailcall */
    return CDC::SetOutputDC(this, arg2);
}

void __thiscall CDC::SetAttribDC(CDC* this, struct HDC__* arg2)
{
    /* tailcall */
    return CDC::SetAttribDC(this, arg2);
}

struct CRuntimeClass* __thiscall CDC::GetRuntimeClass(CDC* this)
{
    /* tailcall */
    return CDC::GetRuntimeClass(this);
}

class CBrush* __thiscall CDC::SelectObject(CDC* this, class CBrush* arg2)
{
    /* tailcall */
    return CDC::SelectObject(this, arg2);
}

int32_t __thiscall CDC::SelectClipRgn(CDC* this, class CRgn* arg2)
{
    /* tailcall */
    return CDC::SelectClipRgn(this, arg2);
}

int32_t __CxxFrameHandler()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t atoi(char const* _String)
{
    /* tailcall */
    return atoi(_String);
}

int32_t atol(char const* _String)
{
    /* tailcall */
    return atol(_String);
}

int32_t sscanf(char const* const _Buffer, char const* const _Format, ...)
{
    /* tailcall */
    return sscanf();
}

int32_t _ftol()
{
    /* tailcall */
    return _ftol();
}

int32_t memmove(void* _Dst, void const* _Src, uint32_t _Size)
{
    /* tailcall */
    return memmove(_Dst, _Src, _Size);
}

int32_t tolower(int32_t _C)
{
    /* tailcall */
    return tolower(_C);
}

void* const __convention("regparm") sub_426ed0(int32_t arg1)
{
    void* ecx = &arg_4;
    if (arg1 >= 0x1000)
    {
        do
        {
            ecx = (ecx - 0x1000);
            arg1 = (arg1 - 0x1000);
            *ecx;
        } while (arg1 >= 0x1000);
    }
    void* ecx_1 = (ecx - arg1);
    *ecx_1;
    *(ecx_1 - 4) = __return_addr;
    return __return_addr;
}

int32_t rand()
{
    /* tailcall */
    return rand();
}

int32_t* __fastcall sub_426f06(int32_t* arg1)
{
    *arg1 = 0x42c97c;
    return arg1;
}

class type_info* __thiscall sub_426f11(class type_info* arg1, char arg2)
{
    type_info::~type_info(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg1);
    }
    return arg1;
}

int32_t __fastcall sub_426f2d(int32_t arg1) __pure
{
    return arg1;
}

char const* strstr(char const* _Str, char const* _SubStr)
{
    /* tailcall */
    return strstr(_Str, _SubStr);
}

uint8_t const* _mbsstr(uint8_t const* _String, uint8_t const* _Control)
{
    /* tailcall */
    return _mbsstr(_String, _Control);
}

_onexit_t sub_426f3e(_onexit_t arg1)
{
    if (data_436164 != 0xffffffff)
    {
        return __dllonexit(arg1, &data_436164, &data_436160);
    }
    return _onexit(arg1);
}

int32_t sub_426f6a(_onexit_t arg1)
{
    _onexit_t eax = sub_426f3e(arg1);
    int32_t eax_1 = (-eax);
    return ((-(eax_1 - eax_1)) - 1);
}

uint32_t wcslen(wchar16 const* _String)
{
    /* tailcall */
    return wcslen(_String);
}

uint32_t strtoul(char const* _String, char** _EndPtr, int32_t _Radix)
{
    /* tailcall */
    return strtoul(_String, _EndPtr, _Radix);
}

char* strtok(char* _Destination, char const* _Source)
{
    /* tailcall */
    return strtok(_Destination, _Source);
}

int32_t _mbscmp(uint8_t const* _Str1, uint8_t const* _Str2)
{
    /* tailcall */
    return _mbscmp(_Str1, _Str2);
}

uint8_t* _mbsnbcpy(uint8_t* _Dest, uint8_t const* _Source, uint32_t _Count)
{
    /* tailcall */
    return _mbsnbcpy(_Dest, _Source, _Count);
}

int32_t _start() __noreturn
{
    int32_t var_8 = 0xffffffff;
    int32_t var_c = 0x42c980;
    int32_t (* var_10)() = _except_handler3;
    int32_t* fsbase;
    int32_t var_14 = *fsbase;
    *fsbase = &var_14;
    int32_t edi;
    int32_t var_88 = edi;
    int32_t* var_1c = &var_88;
    int32_t var_8_1 = 0;
    __set_app_type(_crt_gui_app);
    data_436160 = 0xffffffff;
    data_436164 = 0xffffffff;
    int32_t* eax_1 = __p__fmode();
    *eax_1 = data_436154;
    int32_t* eax_2 = __p__commode();
    *eax_2 = data_436150;
    data_43615c = *_adjust_fdiv;
    if (data_435ee8 == 0)
    {
        __setusermatherr(sub_42713a);
    }
    sub_427122();
    _initterm(&data_431020, &data_431024);
    int32_t startInfo = data_43614c;
    void argv;
    void env;
    void argc;
    __getmainargs(&argc, &argv, &env, data_436148, &startInfo);
    _initterm(&data_431000, &data_43101c);
    char* esi = *_acmdln;
    char* var_78 = esi;
    char eax_5;
    if (*esi == 0x22)
    {
        while (true)
        {
            esi = &esi[1];
            char* var_78_1 = esi;
            eax_5 = *esi;
            if (eax_5 == 0)
            {
                break;
            }
            if (eax_5 == 0x22)
            {
                break;
            }
            if ((!(eax_5 != 0 && eax_5 != 0x22)))
            {
                /* nop */
            }
        }
        if (*esi == 0x22)
        {
            goto label_427089;
        }
    }
    else
    {
        while (*esi > 0x20)
        {
            esi = &esi[1];
            char* var_78_3 = esi;
        }
    }
    while (true)
    {
        eax_5 = *esi;
        if ((eax_5 == 0 || (eax_5 != 0 && eax_5 > 0x20)))
        {
            char var_34 = 0;
            void lpStartupInfo;
            GetStartupInfoA(&lpStartupInfo);
            int32_t eax_6;
            int16_t var_30;
            if ((var_34 & 1) == 0)
            {
                eax_6 = 0xa;
            }
            else
            {
                eax_6 = var_30;
            }
            int32_t _Except = sub_42745c(GetModuleHandleA(nullptr), nullptr, esi, eax_6);
            int32_t _Except_1 = _Except;
            exit(_Except);
            /* no return */
        }
    label_427089:
        esi = &esi[1];
        char* var_78_2 = esi;
    }
}

int32_t sub_4270ec(void* arg1 @ ebp)
{
    *(*(arg1 - 0x18) - 4) = *(arg1 - 0x78);
    /* tailcall */
    return type_info::~type_info(_exit());
}

void __thiscall type_info::~type_info(class type_info* this)
{
    /* tailcall */
    return type_info::~type_info(this);
}

_onexit_t __dllonexit(_onexit_t func, _PVFV** pbegin, _PVFV** pend)
{
    /* tailcall */
    return __dllonexit(func, pbegin, pend);
}

void _exit(int32_t _Except) __noreturn
{
    /* tailcall */
    return _exit(_Except);
}

int32_t _XcptFilter()
{
    /* tailcall */
    return _XcptFilter();
}

void exit(int32_t _Except) __noreturn
{
    /* tailcall */
    return exit(_Except);
}

int32_t __getmainargs(int32_t* argc, char*** argv, char*** env, int32_t doWildCard, struct _startupinfo* startInfo)
{
    /* tailcall */
    return __getmainargs(argc, argv, env, doWildCard, startInfo);
}

void _initterm(_PVFV* _First, _PVFV* _Last)
{
    /* tailcall */
    return _initterm(_First, _Last);
}

uint32_t sub_427122()
{
    return _controlfp(0x10000, 0x30000);
}

void __setusermatherr(_UserMathErrorFunctionPointer _UserMathErrorFunction)
{
    /* tailcall */
    return __setusermatherr(_UserMathErrorFunction);
}

int32_t sub_42713a() __pure
{
    return 0;
}

int32_t sub_42713d() __pure
{
    return;
}

int32_t* __p__commode()
{
    /* tailcall */
    return __p__commode();
}

int32_t* __p__fmode()
{
    /* tailcall */
    return __p__fmode();
}

void __set_app_type(enum _crt_app_type _Type)
{
    /* tailcall */
    return __set_app_type(_Type);
}

int32_t _except_handler3()
{
    /* tailcall */
    return _except_handler3();
}

uint32_t _controlfp(uint32_t _NewValue, uint32_t _Mask)
{
    /* tailcall */
    return _controlfp(_NewValue, _Mask);
}

uint32_t __stdcall GetTickCount()
{
    /* tailcall */
    return GetTickCount();
}

void __stdcall Sleep(uint32_t dwMilliseconds)
{
    /* tailcall */
    return Sleep(dwMilliseconds);
}

int32_t* __stdcall LocalFree(int32_t* hMem)
{
    /* tailcall */
    return LocalFree(hMem);
}

uint32_t __stdcall FormatMessageA(enum FORMAT_MESSAGE_OPTIONS dwFlags, void* lpSource, uint32_t dwMessageId, uint32_t dwLanguageId, PSTR lpBuffer, uint32_t nSize, char** Arguments)
{
    /* tailcall */
    return FormatMessageA(dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments);
}

enum WIN32_ERROR __stdcall GetLastError()
{
    /* tailcall */
    return GetLastError();
}

BOOL __stdcall PurgeComm(HANDLE hFile, enum PURGE_COMM_FLAGS dwFlags)
{
    /* tailcall */
    return PurgeComm(hFile, dwFlags);
}

BOOL __stdcall SetCommMask(HANDLE hFile, enum COMM_EVENT_MASK dwEvtMask)
{
    /* tailcall */
    return SetCommMask(hFile, dwEvtMask);
}

BOOL __stdcall SetCommState(HANDLE hFile, struct DCB* lpDCB)
{
    /* tailcall */
    return SetCommState(hFile, lpDCB);
}

BOOL __stdcall CloseHandle(HANDLE hObject)
{
    /* tailcall */
    return CloseHandle(hObject);
}

BOOL __stdcall GetCommState(HANDLE hFile, struct DCB* lpDCB)
{
    /* tailcall */
    return GetCommState(hFile, lpDCB);
}

BOOL __stdcall SetCommTimeouts(HANDLE hFile, struct COMMTIMEOUTS* lpCommTimeouts)
{
    /* tailcall */
    return SetCommTimeouts(hFile, lpCommTimeouts);
}

BOOL __stdcall SetupComm(HANDLE hFile, uint32_t dwInQueue, uint32_t dwOutQueue)
{
    /* tailcall */
    return SetupComm(hFile, dwInQueue, dwOutQueue);
}

HANDLE __stdcall CreateFileA(PSTR lpFileName, enum FILE_ACCESS_FLAGS dwDesiredAccess, enum FILE_SHARE_MODE dwShareMode, struct SECURITY_ATTRIBUTES* lpSecurityAttributes, enum FILE_CREATION_DISPOSITION dwCreationDisposition, enum FILE_FLAGS_AND_ATTRIBUTES dwFlagsAndAttributes, HANDLE hTemplateFile)
{
    /* tailcall */
    return CreateFileA(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
}

BOOL __stdcall ReadFile(HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToRead, uint32_t* lpNumberOfBytesRead, struct OVERLAPPED* lpOverlapped)
{
    /* tailcall */
    return ReadFile(hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped);
}

BOOL __stdcall GetCommModemStatus(HANDLE hFile, enum MODEM_STATUS_FLAGS* lpModemStat)
{
    /* tailcall */
    return GetCommModemStatus(hFile, lpModemStat);
}

BOOL __stdcall WriteFile(HANDLE hFile, void* lpBuffer, uint32_t nNumberOfBytesToWrite, uint32_t* lpNumberOfBytesWritten, struct OVERLAPPED* lpOverlapped)
{
    /* tailcall */
    return WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped);
}

uint32_t __stdcall GetVersion()
{
    /* tailcall */
    return GetVersion();
}

void __stdcall GetLocalTime(struct SYSTEMTIME* lpSystemTime)
{
    /* tailcall */
    return GetLocalTime(lpSystemTime);
}

int32_t __stdcall MultiByteToWideChar(uint32_t CodePage, enum MULTI_BYTE_TO_WIDE_CHAR_FLAGS dwFlags, uint8_t* lpMultiByteStr, int32_t cbMultiByte, char* lpWideCharStr, int32_t cchWideChar)
{
    /* tailcall */
    return MultiByteToWideChar(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
}

BOOL __stdcall FreeLibrary(HINSTANCE hLibModule)
{
    /* tailcall */
    return FreeLibrary(hLibModule);
}

HINSTANCE __stdcall LoadLibraryA(PSTR lpLibFileName)
{
    /* tailcall */
    return LoadLibraryA(lpLibFileName);
}

uint32_t __stdcall GetWindowsDirectoryA(uint8_t* lpBuffer, uint32_t uSize)
{
    /* tailcall */
    return GetWindowsDirectoryA(lpBuffer, uSize);
}

PSTR __stdcall lstrcpyA(PSTR lpString1, PSTR lpString2)
{
    /* tailcall */
    return lstrcpyA(lpString1, lpString2);
}

uint32_t __stdcall WinExec(PSTR lpCmdLine, uint32_t uCmdShow)
{
    /* tailcall */
    return WinExec(lpCmdLine, uCmdShow);
}

int32_t __stdcall lstrlenA(PSTR lpString)
{
    /* tailcall */
    return lstrlenA(lpString);
}

PSTR __stdcall lstrcatA(PSTR lpString1, PSTR lpString2)
{
    /* tailcall */
    return lstrcatA(lpString1, lpString2);
}

uint32_t __stdcall GetPrivateProfileIntA(PSTR lpAppName, PSTR lpKeyName, int32_t nDefault, PSTR lpFileName)
{
    /* tailcall */
    return GetPrivateProfileIntA(lpAppName, lpKeyName, nDefault, lpFileName);
}

uint32_t __stdcall GetModuleFileNameA(HINSTANCE hModule, uint8_t* lpFilename, uint32_t nSize)
{
    /* tailcall */
    return GetModuleFileNameA(hModule, lpFilename, nSize);
}

HINSTANCE __stdcall GetModuleHandleA(PSTR lpModuleName)
{
    /* tailcall */
    return GetModuleHandleA(lpModuleName);
}

BOOL __stdcall WritePrivateProfileStringA(PSTR lpAppName, PSTR lpKeyName, PSTR lpString, PSTR lpFileName)
{
    /* tailcall */
    return WritePrivateProfileStringA(lpAppName, lpKeyName, lpString, lpFileName);
}

BOOL __stdcall GetExitCodeThread(HANDLE hThread, uint32_t* lpExitCode)
{
    /* tailcall */
    return GetExitCodeThread(hThread, lpExitCode);
}

int32_t __stdcall WideCharToMultiByte(uint32_t CodePage, uint32_t dwFlags, char* lpWideCharStr, int32_t cchWideChar, PSTR lpMultiByteStr, int32_t cbMultiByte, PSTR lpDefaultChar, int32_t* lpUsedDefaultChar)
{
    /* tailcall */
    return WideCharToMultiByte(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
}

HANDLE __stdcall CreateEventA(struct SECURITY_ATTRIBUTES* lpEventAttributes, BOOL bManualReset, BOOL bInitialState, PSTR lpName)
{
    /* tailcall */
    return CreateEventA(lpEventAttributes, bManualReset, bInitialState, lpName);
}

BOOL __stdcall GetOverlappedResult(HANDLE hFile, struct OVERLAPPED* lpOverlapped, uint32_t* lpNumberOfBytesTransferred, BOOL bWait)
{
    /* tailcall */
    return GetOverlappedResult(hFile, lpOverlapped, lpNumberOfBytesTransferred, bWait);
}

uint32_t __stdcall WaitForSingleObject(HANDLE hHandle, uint32_t dwMilliseconds)
{
    /* tailcall */
    return WaitForSingleObject(hHandle, dwMilliseconds);
}

BOOL __stdcall GlobalUnlock(int32_t* hMem)
{
    /* tailcall */
    return GlobalUnlock(hMem);
}

void* __stdcall GlobalLock(int32_t* hMem)
{
    /* tailcall */
    return GlobalLock(hMem);
}

int32_t* __stdcall GlobalFree(int32_t* hMem)
{
    /* tailcall */
    return GlobalFree(hMem);
}

int32_t* __stdcall GlobalAlloc(enum GLOBAL_ALLOC_FLAGS uFlags, uint32_t* dwBytes)
{
    /* tailcall */
    return GlobalAlloc(uFlags, dwBytes);
}

void __stdcall GetStartupInfoA(struct STARTUPINFOA* lpStartupInfo)
{
    /* tailcall */
    return GetStartupInfoA(lpStartupInfo);
}

uint32_t* __stdcall SetTimer(HWND hWnd, uint32_t* nIDEvent, uint32_t uElapse, TIMERPROC lpTimerFunc)
{
    /* tailcall */
    return SetTimer(hWnd, nIDEvent, uElapse, lpTimerFunc);
}

BOOL __stdcall KillTimer(HWND hWnd, uint32_t* uIDEvent)
{
    /* tailcall */
    return KillTimer(hWnd, uIDEvent);
}

BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
{
    /* tailcall */
    return EnableWindow(hWnd, bEnable);
}

LRESULT __stdcall SendMessageA(HWND hWnd, uint32_t Msg, WPARAM wParam, LPARAM lParam)
{
    /* tailcall */
    return SendMessageA(hWnd, Msg, wParam, lParam);
}

BOOL __stdcall GetClientRect(HWND hWnd, struct RECT* lpRect)
{
    /* tailcall */
    return GetClientRect(hWnd, lpRect);
}

BOOL __stdcall OffsetRect(struct RECT* lprc, int32_t dx, int32_t dy)
{
    /* tailcall */
    return OffsetRect(lprc, dx, dy);
}

BOOL __stdcall CopyRect(struct RECT* lprcDst, struct RECT* lprcSrc)
{
    /* tailcall */
    return CopyRect(lprcDst, lprcSrc);
}

BOOL __stdcall InvalidateRect(HWND hWnd, struct RECT* lpRect, BOOL bErase)
{
    /* tailcall */
    return InvalidateRect(hWnd, lpRect, bErase);
}

BOOL __stdcall PtInRect(struct RECT* lprc, struct POINT pt)
{
    /* tailcall */
    return PtInRect(lprc, pt);
}

BOOL __stdcall GetCursorPos(struct POINT* lpPoint)
{
    /* tailcall */
    return GetCursorPos(lpPoint);
}

enum MESSAGEBOX_RESULT __stdcall MessageBoxA(HWND hWnd, PSTR lpText, PSTR lpCaption, enum MESSAGEBOX_STYLE uType)
{
    /* tailcall */
    return MessageBoxA(hWnd, lpText, lpCaption, uType);
}

uint32_t __stdcall GetSysColor(enum SYS_COLOR_INDEX nIndex)
{
    /* tailcall */
    return GetSysColor(nIndex);
}

BOOL __stdcall MessageBeep(uint32_t uType)
{
    /* tailcall */
    return MessageBeep(uType);
}

HWND __stdcall SetCapture(HWND hWnd)
{
    /* tailcall */
    return SetCapture(hWnd);
}

BOOL __stdcall RedrawWindow(HWND hWnd, struct RECT* lprcUpdate, HRGN hrgnUpdate, enum REDRAW_WINDOW_FLAGS flags)
{
    /* tailcall */
    return RedrawWindow(hWnd, lprcUpdate, hrgnUpdate, flags);
}

BOOL __stdcall ReleaseCapture()
{
    /* tailcall */
    return ReleaseCapture();
}

HCURSOR __stdcall SetCursor(HCURSOR hCursor)
{
    /* tailcall */
    return SetCursor(hCursor);
}

int32_t __stdcall SetWindowLongA(HWND hWnd, enum WINDOW_LONG_PTR_INDEX nIndex, int32_t dwNewLong)
{
    /* tailcall */
    return SetWindowLongA(hWnd, nIndex, dwNewLong);
}

BOOL __stdcall IsWindow(HWND hWnd)
{
    /* tailcall */
    return IsWindow(hWnd);
}

BOOL __stdcall InflateRect(struct RECT* lprc, int32_t dx, int32_t dy)
{
    /* tailcall */
    return InflateRect(lprc, dx, dy);
}

int32_t __stdcall ReleaseDC(HWND hWnd, HDC hDC)
{
    /* tailcall */
    return ReleaseDC(hWnd, hDC);
}

HDC __stdcall GetDC(HWND hWnd)
{
    /* tailcall */
    return GetDC(hWnd);
}

HWND __stdcall GetParent(HWND hWnd)
{
    /* tailcall */
    return GetParent(hWnd);
}

BOOL __stdcall GetWindowRect(HWND hWnd, struct RECT* lpRect)
{
    /* tailcall */
    return GetWindowRect(hWnd, lpRect);
}

HICON __stdcall CopyIcon(HICON hIcon)
{
    /* tailcall */
    return CopyIcon(hIcon);
}

HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, PSTR lpCursorName)
{
    /* tailcall */
    return LoadCursorA(hInstance, lpCursorName);
}

HICON __stdcall LoadIconA(HINSTANCE hInstance, PSTR lpIconName)
{
    /* tailcall */
    return LoadIconA(hInstance, lpIconName);
}

BOOL __stdcall DrawIcon(HDC hDC, int32_t X, int32_t Y, HICON hIcon)
{
    /* tailcall */
    return DrawIcon(hDC, X, Y, hIcon);
}

int32_t __stdcall GetSystemMetrics(enum SYSTEM_METRICS_INDEX nIndex)
{
    /* tailcall */
    return GetSystemMetrics(nIndex);
}

BOOL __stdcall IsIconic(HWND hWnd)
{
    /* tailcall */
    return IsIconic(hWnd);
}

int32_t __stdcall wsprintfA(PSTR param0, PSTR param1)
{
    /* tailcall */
    return wsprintfA(param0, param1);
}

BOOL __stdcall ShowScrollBar(HWND hWnd, enum SCROLLBAR_CONSTANTS wBar, BOOL bShow)
{
    /* tailcall */
    return ShowScrollBar(hWnd, wBar, bShow);
}

BOOL __stdcall PostMessageA(HWND hWnd, uint32_t Msg, WPARAM wParam, LPARAM lParam)
{
    /* tailcall */
    return PostMessageA(hWnd, Msg, wParam, lParam);
}

int32_t __stdcall SetWindowRgn(HWND hWnd, HRGN hRgn, BOOL bRedraw)
{
    /* tailcall */
    return SetWindowRgn(hWnd, hRgn, bRedraw);
}

int32_t __stdcall TabbedTextOutA(HDC hdc, int32_t x, int32_t y, uint8_t* lpString, int32_t chCount, int32_t nTabPositions, int32_t* lpnTabStopPositions, int32_t nTabOrigin)
{
    /* tailcall */
    return TabbedTextOutA(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
}

int32_t __stdcall DrawTextA(HDC hdc, uint8_t* lpchText, int32_t cchText, struct RECT* lprc, enum DRAW_TEXT_FORMAT format)
{
    /* tailcall */
    return DrawTextA(hdc, lpchText, cchText, lprc, format);
}

BOOL __stdcall GrayStringA(HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int32_t nCount, int32_t X, int32_t Y, int32_t nWidth, int32_t nHeight)
{
    /* tailcall */
    return GrayStringA(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
}

HFONT __stdcall CreateFontIndirectA(struct LOGFONTA* lplf)
{
    /* tailcall */
    return CreateFontIndirectA(lplf);
}

int32_t __stdcall GetObjectA(HGDIOBJ h, int32_t c, void* pv)
{
    /* tailcall */
    return GetObjectA(h, c, pv);
}

uint32_t __stdcall SetTextColor(HDC hdc, uint32_t color)
{
    /* tailcall */
    return SetTextColor(hdc, color);
}

HPEN __stdcall CreatePen(enum PEN_STYLE iStyle, int32_t cWidth, uint32_t color)
{
    /* tailcall */
    return CreatePen(iStyle, cWidth, color);
}

BOOL __stdcall BitBlt(HDC hdc, int32_t x, int32_t y, int32_t cx, int32_t cy, HDC hdcSrc, int32_t x1, int32_t y1, enum ROP_CODE rop)
{
    /* tailcall */
    return BitBlt(hdc, x, y, cx, cy, hdcSrc, x1, y1, rop);
}

CreatedHDC __stdcall CreateCompatibleDC(HDC hdc)
{
    /* tailcall */
    return CreateCompatibleDC(hdc);
}

HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int32_t cx, int32_t cy)
{
    /* tailcall */
    return CreateCompatibleBitmap(hdc, cx, cy);
}

BOOL __stdcall DeleteObject(HGDIOBJ ho)
{
    /* tailcall */
    return DeleteObject(ho);
}

HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h)
{
    /* tailcall */
    return SelectObject(hdc, h);
}

HGDIOBJ __stdcall GetStockObject(enum GET_STOCK_OBJECT_FLAGS i)
{
    /* tailcall */
    return GetStockObject(i);
}

BOOL __stdcall GetTextExtentPoint32A(HDC hdc, uint8_t* lpString, int32_t c, struct SIZE* psizl)
{
    /* tailcall */
    return GetTextExtentPoint32A(hdc, lpString, c, psizl);
}

HBRUSH __stdcall CreateSolidBrush(uint32_t color)
{
    /* tailcall */
    return CreateSolidBrush(color);
}

BOOL __stdcall DeleteDC(CreatedHDC hdc)
{
    /* tailcall */
    return DeleteDC(hdc);
}

int32_t __stdcall EndDoc(HDC hdc)
{
    /* tailcall */
    return EndDoc(hdc);
}

int32_t __stdcall EndPage(HDC hdc)
{
    /* tailcall */
    return EndPage(hdc);
}

BOOL __stdcall DPtoLP(HDC hdc, struct POINT* lppt, int32_t c)
{
    /* tailcall */
    return DPtoLP(hdc, lppt, c);
}

int32_t __stdcall GetDeviceCaps(HDC hdc, enum GET_DEVICE_CAPS_INDEX index)
{
    /* tailcall */
    return GetDeviceCaps(hdc, index);
}

int32_t __stdcall StartPage(HDC hdc)
{
    /* tailcall */
    return StartPage(hdc);
}

int32_t __stdcall StartDocA(HDC hdc, struct DOCINFOA* lpdi)
{
    /* tailcall */
    return StartDocA(hdc, lpdi);
}

int32_t __stdcall CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, enum RGN_COMBINE_MODE iMode)
{
    /* tailcall */
    return CombineRgn(hrgnDst, hrgnSrc1, hrgnSrc2, iMode);
}

HRGN __stdcall CreateRectRgn(int32_t x1, int32_t y1, int32_t x2, int32_t y2)
{
    /* tailcall */
    return CreateRectRgn(x1, y1, x2, y2);
}

uint32_t __stdcall GetBkColor(HDC hdc)
{
    /* tailcall */
    return GetBkColor(hdc);
}

int32_t __stdcall GetMapMode(HDC hdc)
{
    /* tailcall */
    return GetMapMode(hdc);
}

BOOL __stdcall LPtoDP(HDC hdc, struct POINT* lppt, int32_t c)
{
    /* tailcall */
    return LPtoDP(hdc, lppt, c);
}

BOOL __stdcall Rectangle(HDC hdc, int32_t left, int32_t top, int32_t right, int32_t bottom)
{
    /* tailcall */
    return Rectangle(hdc, left, top, right, bottom);
}

BOOL __stdcall PtVisible(HDC hdc, int32_t x, int32_t y)
{
    /* tailcall */
    return PtVisible(hdc, x, y);
}

BOOL __stdcall RectVisible(HDC hdc, struct RECT* lprect)
{
    /* tailcall */
    return RectVisible(hdc, lprect);
}

BOOL __stdcall TextOutA(HDC hdc, int32_t x, int32_t y, uint8_t* lpString, int32_t c)
{
    /* tailcall */
    return TextOutA(hdc, x, y, lpString, c);
}

BOOL __stdcall ExtTextOutA(HDC hdc, int32_t x, int32_t y, enum ETO_OPTIONS options, struct RECT* lprect, uint8_t* lpString, uint32_t c, int32_t* lpDx)
{
    /* tailcall */
    return ExtTextOutA(hdc, x, y, options, lprect, lpString, c, lpDx);
}

int32_t __stdcall Escape(HDC hdc, int32_t iEscape, int32_t cjIn, PSTR pvIn, void* pvOut)
{
    /* tailcall */
    return Escape(hdc, iEscape, cjIn, pvIn, pvOut);
}

int32_t EnumPrintersA()
{
    /* tailcall */
    return EnumPrintersA();
}

int32_t ClosePrinter()
{
    /* tailcall */
    return ClosePrinter();
}

int32_t GetPrinterA()
{
    /* tailcall */
    return GetPrinterA();
}

int32_t OpenPrinterA()
{
    /* tailcall */
    return OpenPrinterA();
}

enum WIN32_ERROR __stdcall RegCloseKey(HKEY hKey)
{
    /* tailcall */
    return RegCloseKey(hKey);
}

enum WIN32_ERROR __stdcall RegQueryValueA(HKEY hKey, PSTR lpSubKey, PSTR lpData, int32_t* lpcbData)
{
    /* tailcall */
    return RegQueryValueA(hKey, lpSubKey, lpData, lpcbData);
}

enum WIN32_ERROR __stdcall RegOpenKeyExA(HKEY hKey, PSTR lpSubKey, uint32_t ulOptions, enum REG_SAM_FLAGS samDesired, HKEY* phkResult)
{
    /* tailcall */
    return RegOpenKeyExA(hKey, lpSubKey, ulOptions, samDesired, phkResult);
}

HINSTANCE __stdcall ShellExecuteA(HWND hwnd, PSTR lpOperation, PSTR lpFile, PSTR lpParameters, PSTR lpDirectory, int32_t nShowCmd)
{
    /* tailcall */
    return ShellExecuteA(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
}

BOOL __stdcall _TrackMouseEvent(struct TRACKMOUSEEVENT* lpEventTrack)
{
    /* tailcall */
    return _TrackMouseEvent(lpEventTrack);
}

int32_t ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ()
{
    /* tailcall */
    return ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ();
}

int32_t ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z()
{
    /* tailcall */
    return ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXI@Z();
}

int32_t ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z()
{
    /* tailcall */
    return ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEX_N@Z();
}

int32_t ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ()
{
    /* tailcall */
    return ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ();
}

void std::_Xlen()
{
    /* tailcall */
    return std::_Xlen();
}

int32_t ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z()
{
    /* tailcall */
    return ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z();
}

int32_t ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAE_NI_N@Z()
{
    /* tailcall */
    return ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAE_NI_N@Z();
}

int32_t Ordinal_SkinMagic_11()
{
    /* tailcall */
    return Ordinal_SkinMagic_11();
}

int32_t Ordinal_SkinMagic_9()
{
    /* tailcall */
    return Ordinal_SkinMagic_9();
}

int32_t Ordinal_SkinMagic_3()
{
    /* tailcall */
    return Ordinal_SkinMagic_3();
}

int32_t Ordinal_SkinMagic_1()
{
    /* tailcall */
    return Ordinal_SkinMagic_1();
}

int32_t Ordinal_SkinMagic_2()
{
    /* tailcall */
    return Ordinal_SkinMagic_2();
}

int32_t __stdcall sub_42745c(struct HINSTANCE__* arg1, struct HINSTANCE__* arg2, char* arg3, int32_t arg4)
{
    return AfxWinMain(arg1, arg2, arg3, arg4);
}

int32_t __stdcall sub_427474(int32_t arg1, int32_t arg2)
{
    class AFX_MODULE_STATE* eax_1 = AfxGetModuleState();
    *(eax_1 + 0x14) = arg1;
    *(eax_1 + 0x1040) = arg2;
    if (arg1 == 0)
    {
        _setmbcp(0xfffffffd);
    }
    return 1;
}

int32_t j_sub_4274a2()
{
    /* tailcall */
    return sub_4274a2();
}

int32_t sub_4274a2()
{
    sub_427474(0, 0x600);
    data_436158 = 1;
    return 1;
}

int32_t _setmbcp(int32_t _C)
{
    /* tailcall */
    return _setmbcp(_C);
}

int32_t __stdcall AfxWinMain(struct HINSTANCE__* arg1, struct HINSTANCE__* arg2, char* arg3, int32_t arg4)
{
    /* tailcall */
    return AfxWinMain(arg1, arg2, arg3, arg4);
}

int32_t sub_4274c0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0(*(arg1 - 0x10));
}

int32_t sub_4274c8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4274e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_4274e8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0(*(arg1 - 0x10));
}

int32_t sub_4274f0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427500(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0(*(arg1 - 0x10));
}

int32_t sub_427508()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427520(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((arg1 + 4));
}

int32_t sub_427528(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0(*(arg1 - 0x10));
}

int32_t sub_427530(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 + 4));
}

int32_t sub_427538()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427550(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_427558()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427570(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 8));
}

int32_t sub_427578(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_427580(void* arg1 @ ebp)
{
    int32_t eax = (*(arg1 - 0x10) & 1);
    if (eax == 0)
    {
        return eax;
    }
    /* tailcall */
    return CString::~CString(*(arg1 + 4));
}

int32_t sub_427597()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4275b0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18));
}

int32_t sub_4275b8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_4275c0(void* arg1 @ ebp)
{
    int32_t eax = (*(arg1 - 0x10) & 1);
    if (eax == 0)
    {
        return eax;
    }
    /* tailcall */
    return CString::~CString(*(arg1 + 4));
}

int32_t sub_4275d7()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4275f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_4275f8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 0xc));
}

int32_t sub_427600(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 0xc));
}

int32_t sub_427608(void* arg1 @ ebp)
{
    int32_t eax = (*(arg1 - 0x10) & 1);
    if (eax == 0)
    {
        return eax;
    }
    /* tailcall */
    return CString::~CString(*(arg1 + 4));
}

int32_t sub_42761f()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427630(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401dd0((arg1 - 0x124));
}

int32_t sub_42763b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427650(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_427658()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427670(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_427678()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427690(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x34));
}

int32_t sub_427698()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4276b0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x50));
}

int32_t sub_4276b8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x4c));
}

int32_t sub_4276c0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x34));
}

int32_t sub_4276c8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_4276d0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4276e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_4276e8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427700(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_427708()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427720(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x98));
}

int32_t sub_42772b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427740(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_427748()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427760(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x40));
}

int32_t sub_427768()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427780(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_427788(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411840((*(arg1 - 0x10) + 0x60));
}

int32_t sub_427793(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405c70((*(arg1 - 0x10) + 0x23070));
}

int32_t sub_4277a1(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x230d8));
}

int32_t sub_4277af(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x23118));
}

int32_t sub_4277bd(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0x23158));
}

int32_t sub_4277cb(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_426160((*(arg1 - 0x10) + 0x23198));
}

int32_t sub_4277d9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x23204));
}

int32_t sub_4277e7()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427800(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_427808(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411840((*(arg1 - 0x10) + 0x60));
}

int32_t sub_427813(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405c70((*(arg1 - 0x10) + 0x23070));
}

int32_t sub_427821(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x230d8));
}

int32_t sub_42782f(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x23118));
}

int32_t sub_42783d(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0x23158));
}

int32_t sub_42784b(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_426160((*(arg1 - 0x10) + 0x23198));
}

int32_t sub_427859()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427870(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405fe0((arg1 - 0x208));
}

int32_t sub_42787b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x288));
}

int32_t sub_427886(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x280));
}

int32_t sub_427891(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x27c));
}

int32_t sub_42789c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x280));
}

int32_t sub_4278a7(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_4278b2()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4278c0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20(*(arg1 - 0x10));
}

int32_t sub_4278c8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4278e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_4278e8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427900(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_427908()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427920(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_427928(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4070c0((*(arg1 - 0x10) + 0x220));
}

int32_t sub_427936(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x298));
}

int32_t sub_427944(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x2d8));
}

int32_t sub_427952(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl((*(arg1 - 0x10) + 0x318));
}

int32_t sub_427960(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x358));
}

int32_t sub_42796e(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x398));
}

int32_t sub_42797c(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x3d8));
}

int32_t sub_42798a(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x418));
}

int32_t sub_427998(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x458));
}

int32_t sub_4279a6(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x498));
}

int32_t sub_4279b4(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x4d8));
}

int32_t sub_4279c2(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x518));
}

int32_t sub_4279d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x57c));
}

int32_t sub_4279de(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x5d0));
}

int32_t sub_4279ec(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x5d4));
}

int32_t sub_4279fa(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x610));
}

int32_t sub_427a08(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x630));
}

int32_t sub_427a16()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427a20(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_427a28(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4070c0((*(arg1 - 0x10) + 0x220));
}

int32_t sub_427a36(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x298));
}

int32_t sub_427a44(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x2d8));
}

int32_t sub_427a52(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl((*(arg1 - 0x10) + 0x318));
}

int32_t sub_427a60(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x358));
}

int32_t sub_427a6e(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x398));
}

int32_t sub_427a7c(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x3d8));
}

int32_t sub_427a8a(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x418));
}

int32_t sub_427a98(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x458));
}

int32_t sub_427aa6(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x498));
}

int32_t sub_427ab4(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x4d8));
}

int32_t sub_427ac2(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x518));
}

int32_t sub_427ad0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x57c));
}

int32_t sub_427ade(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x5d0));
}

int32_t sub_427aec(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x5d4));
}

int32_t sub_427afa(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x610));
}

int32_t sub_427b08()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427b20(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_427b28()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427b40(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_427b48()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427b60(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x58));
}

int32_t sub_427b68()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427b80(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c));
}

int32_t sub_427b88(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18));
}

int32_t sub_427b90(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_427b98(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_427ba0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427bb0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_409530((arg1 - 0x118));
}

int32_t sub_427bbb(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog((arg1 - 0x118));
}

int32_t sub_427bc6(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_409590((arg1 - 0xb0));
}

int32_t sub_427bd1()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427be0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_427be8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_409590((*(arg1 - 0x10) + 0x68));
}

int32_t sub_427bf3()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427c00(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x258));
}

int32_t sub_427c0b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x254));
}

int32_t sub_427c16(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x250));
}

int32_t sub_427c21(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405fe0((arg1 - 0x208));
}

int32_t sub_427c2c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x260));
}

int32_t sub_427c37(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x260));
}

int32_t sub_427c42(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24c));
}

int32_t sub_427c4d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x260));
}

int32_t sub_427c58(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_427c63()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427c70(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24c));
}

int32_t sub_427c7b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x244));
}

int32_t sub_427c86(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405fe0((arg1 - 0x208));
}

int32_t sub_427c91(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x250));
}

int32_t sub_427c9c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x250));
}

int32_t sub_427ca7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x240));
}

int32_t sub_427cb2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x250));
}

int32_t sub_427cbd(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_427cc8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427ce0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_427ce8(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0x20));
}

int32_t sub_427cf0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c));
}

int32_t sub_427cf8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28));
}

int32_t sub_427d00(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24));
}

int32_t sub_427d08()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427d20(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_427d28(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0xd0));
}

int32_t sub_427d33(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd4));
}

int32_t sub_427d3e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd8));
}

int32_t sub_427d49(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb8));
}

int32_t sub_427d54(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb8));
}

int32_t sub_427d5f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb8));
}

int32_t sub_427d6a()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_427d80(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14c));
}

int32_t sub_427d8b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x148));
}

int32_t sub_427d96(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x144));
}

int32_t sub_427da1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x140));
}

int32_t sub_427dac(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x13c));
}

int32_t sub_427db7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x138));
}

int32_t sub_427dc2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x134));
}

int32_t sub_427dcd(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x130));
}

int32_t sub_427dd8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x12c));
}

int32_t sub_427de3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x128));
}

int32_t sub_427dee(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x124));
}

int32_t sub_427df9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x120));
}

int32_t sub_427e04(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x11c));
}

int32_t sub_427e0f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x118));
}

int32_t sub_427e1a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x114));
}

int32_t sub_427e25(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x110));
}

int32_t sub_427e30(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10c));
}

int32_t sub_427e3b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x108));
}

int32_t sub_427e46(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x104));
}

int32_t sub_427e51(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x100));
}

int32_t sub_427e5c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xfc));
}

int32_t sub_427e67(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xf8));
}

int32_t sub_427e72(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xf4));
}

int32_t sub_427e7d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xf0));
}

int32_t sub_427e88(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xec));
}

int32_t sub_427e93(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe8));
}

int32_t sub_427e9e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe4));
}

int32_t sub_427ea9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe0));
}

int32_t sub_427eb4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xdc));
}

int32_t sub_427ebf(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd8));
}

int32_t sub_427eca(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd4));
}

int32_t sub_427ed5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd0));
}

int32_t sub_427ee0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xcc));
}

int32_t sub_427eeb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xc8));
}

int32_t sub_427ef6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xc4));
}

int32_t sub_427f01(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xc0));
}

int32_t sub_427f0c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xbc));
}

int32_t sub_427f17(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb8));
}

int32_t sub_427f22(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb4));
}

int32_t sub_427f2d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xb0));
}

int32_t sub_427f38(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xac));
}

int32_t sub_427f43(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xa8));
}

int32_t sub_427f4e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xa4));
}

int32_t sub_427f59(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xa0));
}

int32_t sub_427f64(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x9c));
}

int32_t sub_427f6f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x98));
}

int32_t sub_427f7a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x94));
}

int32_t sub_427f85(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x90));
}

int32_t sub_427f90(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x8c));
}

int32_t sub_427f9b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x88));
}

int32_t sub_427fa6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x84));
}

int32_t sub_427fb1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x80));
}

int32_t sub_427fb9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x7c));
}

int32_t sub_427fc1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x78));
}

int32_t sub_427fc9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x74));
}

int32_t sub_427fd1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x70));
}

int32_t sub_427fd9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x6c));
}

int32_t sub_427fe1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x68));
}

int32_t sub_427fe9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x64));
}

int32_t sub_427ff1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x60));
}

int32_t sub_427ff9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x5c));
}

int32_t sub_428001(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x58));
}

int32_t sub_428009(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x54));
}

int32_t sub_428011(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x50));
}

int32_t sub_428019(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x4c));
}

int32_t sub_428021(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x48));
}

int32_t sub_428029(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x44));
}

int32_t sub_428031(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x40));
}

int32_t sub_428039(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3c));
}

int32_t sub_428041(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x38));
}

int32_t sub_428049(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x34));
}

int32_t sub_428051(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_428059(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c));
}

int32_t sub_428061(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28));
}

int32_t sub_428069(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24));
}

int32_t sub_428071(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x20));
}

int32_t sub_428079(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c));
}

int32_t sub_428081(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18));
}

int32_t sub_428089(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_428091(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_428099(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28c));
}

int32_t sub_4280a4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x288));
}

int32_t sub_4280af(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x284));
}

int32_t sub_4280ba(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x280));
}

int32_t sub_4280c5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x27c));
}

int32_t sub_4280d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x278));
}

int32_t sub_4280db(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x274));
}

int32_t sub_4280e6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x270));
}

int32_t sub_4280f1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x26c));
}

int32_t sub_4280fc(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x268));
}

int32_t sub_428107(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x264));
}

int32_t sub_428112(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x260));
}

int32_t sub_42811d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x25c));
}

int32_t sub_428128(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x258));
}

int32_t sub_428133(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x254));
}

int32_t sub_42813e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x250));
}

int32_t sub_428149(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24c));
}

int32_t sub_428154(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x248));
}

int32_t sub_42815f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x244));
}

int32_t sub_42816a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x240));
}

int32_t sub_428175(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x23c));
}

int32_t sub_428180(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x238));
}

int32_t sub_42818b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x234));
}

int32_t sub_428196(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x230));
}

int32_t sub_4281a1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x22c));
}

int32_t sub_4281ac(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x228));
}

int32_t sub_4281b7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x224));
}

int32_t sub_4281c2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x220));
}

int32_t sub_4281cd(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x21c));
}

int32_t sub_4281d8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x218));
}

int32_t sub_4281e3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x214));
}

int32_t sub_4281ee(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x210));
}

int32_t sub_4281f9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x20c));
}

int32_t sub_428204(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x208));
}

int32_t sub_42820f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x204));
}

int32_t sub_42821a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x200));
}

int32_t sub_428225(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1fc));
}

int32_t sub_428230(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1f8));
}

int32_t sub_42823b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1f4));
}

int32_t sub_428246(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1f0));
}

int32_t sub_428251(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1ec));
}

int32_t sub_42825c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1e8));
}

int32_t sub_428267(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1e4));
}

int32_t sub_428272(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1e0));
}

int32_t sub_42827d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1dc));
}

int32_t sub_428288(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1d8));
}

int32_t sub_428293(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1d4));
}

int32_t sub_42829e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1d0));
}

int32_t sub_4282a9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1cc));
}

int32_t sub_4282b4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c8));
}

int32_t sub_4282bf(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c4));
}

int32_t sub_4282ca(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c0));
}

int32_t sub_4282d5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1bc));
}

int32_t sub_4282e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1b8));
}

int32_t sub_4282eb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1b4));
}

int32_t sub_4282f6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1b0));
}

int32_t sub_428301(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1ac));
}

int32_t sub_42830c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1a8));
}

int32_t sub_428317(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1a4));
}

int32_t sub_428322(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1a0));
}

int32_t sub_42832d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x19c));
}

int32_t sub_428338(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x198));
}

int32_t sub_428343(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x194));
}

int32_t sub_42834e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x190));
}

int32_t sub_428359(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18c));
}

int32_t sub_428364(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x188));
}

int32_t sub_42836f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x184));
}

int32_t sub_42837a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x180));
}

int32_t sub_428385(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x17c));
}

int32_t sub_428390(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x178));
}

int32_t sub_42839b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x174));
}

int32_t sub_4283a6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x170));
}

int32_t sub_4283b1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x16c));
}

int32_t sub_4283bc(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x168));
}

int32_t sub_4283c7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x164));
}

int32_t sub_4283d2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x160));
}

int32_t sub_4283dd(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x15c));
}

int32_t sub_4283e8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x158));
}

int32_t sub_4283f3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x154));
}

int32_t sub_4283fe(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x150));
}

int32_t sub_428409(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3cc));
}

int32_t sub_428414(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3c8));
}

int32_t sub_42841f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3c4));
}

int32_t sub_42842a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3c0));
}

int32_t sub_428435(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3bc));
}

int32_t sub_428440(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3b8));
}

int32_t sub_42844b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3b4));
}

int32_t sub_428456(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3b0));
}

int32_t sub_428461(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3ac));
}

int32_t sub_42846c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3a8));
}

int32_t sub_428477(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3a4));
}

int32_t sub_428482(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3a0));
}

int32_t sub_42848d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x39c));
}

int32_t sub_428498(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x398));
}

int32_t sub_4284a3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x394));
}

int32_t sub_4284ae(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x390));
}

int32_t sub_4284b9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x38c));
}

int32_t sub_4284c4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x388));
}

int32_t sub_4284cf(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x384));
}

int32_t sub_4284da(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x380));
}

int32_t sub_4284e5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x37c));
}

int32_t sub_4284f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x378));
}

int32_t sub_4284fb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x374));
}

int32_t sub_428506(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x370));
}

int32_t sub_428511(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x36c));
}

int32_t sub_42851c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x368));
}

int32_t sub_428527(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x364));
}

int32_t sub_428532(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x360));
}

int32_t sub_42853d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x35c));
}

int32_t sub_428548(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x358));
}

int32_t sub_428553(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x354));
}

int32_t sub_42855e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x350));
}

int32_t sub_428569(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x34c));
}

int32_t sub_428574(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x348));
}

int32_t sub_42857f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x344));
}

int32_t sub_42858a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x340));
}

int32_t sub_428595(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x33c));
}

int32_t sub_4285a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x338));
}

int32_t sub_4285ab(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x334));
}

int32_t sub_4285b6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x330));
}

int32_t sub_4285c1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x32c));
}

int32_t sub_4285cc(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x328));
}

int32_t sub_4285d7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x324));
}

int32_t sub_4285e2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x320));
}

int32_t sub_4285ed(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x31c));
}

int32_t sub_4285f8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x318));
}

int32_t sub_428603(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x314));
}

int32_t sub_42860e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x310));
}

int32_t sub_428619(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30c));
}

int32_t sub_428624(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x308));
}

int32_t sub_42862f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x304));
}

int32_t sub_42863a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x300));
}

int32_t sub_428645(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2fc));
}

int32_t sub_428650(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2f8));
}

int32_t sub_42865b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2f4));
}

int32_t sub_428666(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2f0));
}

int32_t sub_428671(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2ec));
}

int32_t sub_42867c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2e8));
}

int32_t sub_428687(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2e4));
}

int32_t sub_428692(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2e0));
}

int32_t sub_42869d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2dc));
}

int32_t sub_4286a8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2d8));
}

int32_t sub_4286b3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2d4));
}

int32_t sub_4286be(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2d0));
}

int32_t sub_4286c9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2cc));
}

int32_t sub_4286d4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c8));
}

int32_t sub_4286df(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c4));
}

int32_t sub_4286ea(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c0));
}

int32_t sub_4286f5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2bc));
}

int32_t sub_428700(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b8));
}

int32_t sub_42870b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b4));
}

int32_t sub_428716(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b0));
}

int32_t sub_428721(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2ac));
}

int32_t sub_42872c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2a8));
}

int32_t sub_428737(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2a4));
}

int32_t sub_428742(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2a0));
}

int32_t sub_42874d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x29c));
}

int32_t sub_428758(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x298));
}

int32_t sub_428763(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x294));
}

int32_t sub_42876e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x290));
}

int32_t sub_428779()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428790(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xec));
}

int32_t sub_42879b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe4));
}

int32_t sub_4287a6()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4287b0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c));
}

int32_t sub_4287b8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24));
}

int32_t sub_4287c0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4287d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_4287d8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_409590((*(arg1 - 0x10) + 0x68));
}

int32_t sub_4287e3()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4287f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CTabCtrl::~CTabCtrl(*(arg1 - 0x10));
}

int32_t sub_4287f8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411170((*(arg1 - 0x10) + 0x68));
}

int32_t __unwindfunclet$??0ContextBase@details@Concurrency@@QAE@PAVSchedulerBase@12@_N@Z$2(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4110b0((*(arg1 - 0x10) + 0x8c));
}

int32_t sub_428811()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428820(void* arg1 @ ebp)
{
    /* tailcall */
    return CTabCtrl::~CTabCtrl(*(arg1 - 0x14));
}

int32_t sub_428828(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411170((*(arg1 - 0x14) + 0x68));
}

int32_t sub_428833(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4110b0((*(arg1 - 0x14) + 0x8c));
}

int32_t sub_428841(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_428849()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428860(void* arg1 @ ebp)
{
    /* tailcall */
    return CPaintDC::~CPaintDC((arg1 - 0x60));
}

int32_t sub_428868(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0x88));
}

int32_t sub_428873(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0x70));
}

int32_t sub_42887b(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0x88));
}

int32_t sub_428886()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428890(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe0));
}

int32_t sub_42889b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xd8));
}

int32_t sub_4288a6()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4288b0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4288b8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4288d0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4288d8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4288f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_4288f8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413090((*(arg1 - 0x10) + 0x60));
}

int32_t __unwindfunclet$??0?$call@IV?$function@$$A6AXABI@Z@std@@@Concurrency@@QAE@ABV?$function@$$A6AXABI@Z@std@@@Z$1(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x128));
}

int32_t sub_428911()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428920(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_428928(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413090((*(arg1 - 0x10) + 0x60));
}

int32_t sub_428933()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428940(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0x200a0));
}

int32_t sub_42894b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x200c4));
}

int32_t sub_428956()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428960(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0x100e8));
}

int32_t sub_42896b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428980(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x10));
}

int32_t sub_42898a()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4289a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_4289a8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18));
}

int32_t sub_4289b0(int32_t arg1 @ ebp)
{
    /* tailcall */
    return ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ();
}

int32_t sub_4289b9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 0xc));
}

int32_t sub_4289c1()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4289d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic(*(arg1 - 0x10));
}

int32_t sub_4289d8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x5c));
}

int32_t sub_4289e3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((*(arg1 - 0x10) + 0x60));
}

int32_t sub_4289ee(void* arg1 @ ebp)
{
    /* tailcall */
    return CToolTipCtrl::~CToolTipCtrl((*(arg1 - 0x10) + 0x6c));
}

int32_t sub_4289f9()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428a10(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic(*(arg1 - 0x14));
}

int32_t sub_428a18(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x5c));
}

int32_t sub_428a23(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((*(arg1 - 0x14) + 0x60));
}

int32_t sub_428a2e(void* arg1 @ ebp)
{
    /* tailcall */
    return CToolTipCtrl::~CToolTipCtrl((*(arg1 - 0x14) + 0x6c));
}

int32_t sub_428a39(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_428a41()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428a50(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x5c));
}

int32_t sub_428a58()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428a70(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_428a78()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428a90(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28));
}

int32_t sub_428a98()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428ab0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_428ab8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428ad0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_428ad8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_428ae0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428af0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413e90((arg1 - 0x224));
}

int32_t sub_428afb(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog((arg1 - 0x224));
}

int32_t sub_428b06(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413f30((arg1 - 0x1ac));
}

int32_t sub_428b11(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0x14c));
}

int32_t sub_428b1c(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((arg1 - 0x130));
}

int32_t sub_428b27(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((arg1 - 0xf0));
}

int32_t sub_428b32(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_410170((arg1 - 0xb0));
}

int32_t sub_428b3d()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428b50(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_428b58(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413f30((*(arg1 - 0x10) + 0x78));
}

int32_t sub_428b63(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((*(arg1 - 0x10) + 0xd8));
}

int32_t sub_428b71(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0xf4));
}

int32_t sub_428b7f(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0x134));
}

int32_t __unwindfunclet$??1?$_Greedy_node@W4agent_status@Concurrency@@@Concurrency@@UAE@XZ$2(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_410170((*(arg1 - 0x10) + 0x174));
}

int32_t sub_428b9b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428bb0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_428bb8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413f30((*(arg1 - 0x10) + 0x78));
}

int32_t sub_428bc3(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((*(arg1 - 0x10) + 0xd8));
}

int32_t sub_428bd1(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0xf4));
}

int32_t sub_428bdf(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((*(arg1 - 0x10) + 0x134));
}

int32_t __unwindfunclet$??0?$_Greedy_node@W4agent_status@Concurrency@@@Concurrency@@QAE@PAV?$ISource@W4agent_status@Concurrency@@@1@IPAV?$ITarget@I@1@ABV?$function@$$A6A_NABW4agent_status@Concurrency@@@Z@std@@@Z$2(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_410170((*(arg1 - 0x10) + 0x174));
}

int32_t sub_428bfb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x210));
}

int32_t sub_428c09()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428c20(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c2d(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c3a(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c47(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c54(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c61(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x21c));
}

int32_t sub_428c6e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x220));
}

int32_t sub_428c79(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x218));
}

int32_t sub_428c84()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428c90(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4140e0((arg1 - 0x6c));
}

int32_t sub_428c98()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428cb0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_414c20((arg1 - 0x3b8));
}

int32_t sub_428cbb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3c0));
}

int32_t sub_428cc6(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x3bc));
}

int32_t sub_428cd1(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog((arg1 - 0x3b8));
}

int32_t sub_428cdc(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0x358));
}

int32_t sub_428ce7(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0x318));
}

int32_t sub_428cf2(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0x2d8));
}

int32_t sub_428cfd(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0x298));
}

int32_t sub_428d08()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428d20(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_428d28(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x60));
}

int32_t sub_428d33(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xa0));
}

int32_t __unwindfunclet$??1?$propagator_block@V?$single_link_registry@V?$ITarget@I@Concurrency@@@Concurrency@@V?$multi_link_registry@V?$ISource@W4agent_status@Concurrency@@@Concurrency@@@2@V?$ordered_message_processor@I@2@@Concurrency@@UAE@XZ$1(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xe0));
}

int32_t sub_428d4f(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x120));
}

int32_t sub_428d5d()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428d70(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x20));
}

int32_t sub_428d78()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428d90(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_428d98()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428db0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x27c));
}

int32_t sub_428dbb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x270));
}

int32_t sub_428dc6(void* arg1 @ ebp)
{
    /* tailcall */
    return CFileFind::~CFileFind((arg1 - 0x254));
}

int32_t sub_428dd1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405fe0((arg1 - 0x208));
}

int32_t sub_428ddc(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x274));
}

int32_t sub_428de7(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_428df2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x278));
}

int32_t sub_428dfd(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x26c));
}

int32_t sub_428e08(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x268));
}

int32_t sub_428e13(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x26c));
}

int32_t sub_428e1e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x268));
}

int32_t sub_428e29(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_428e34(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_428e3f()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428e50(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x44));
}

int32_t sub_428e58(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x40));
}

int32_t sub_428e60(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_428e68()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428e80(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405c80((arg1 - 0x23214));
}

int32_t sub_428e8b(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog((arg1 - 0x23214));
}

int32_t sub_428e96(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411840((arg1 - 0x231b4));
}

int32_t sub_428ea1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405c70((arg1 - 0x1a4));
}

int32_t sub_428eac(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0x13c));
}

int32_t sub_428eb7(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((arg1 - 0xfc));
}

int32_t sub_428ec2(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic((arg1 - 0xbc));
}

int32_t sub_428ecd(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_426160((arg1 - 0x7c));
}

int32_t sub_428ed5()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428ee0(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411530((arg1 - 0x138));
}

int32_t sub_428eeb(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog((arg1 - 0x138));
}

int32_t sub_428ef6(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_413090((arg1 - 0xd8));
}

int32_t sub_428f01()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428f10(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_428f18()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_428f30(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_428f38(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_423ee0((*(arg1 - 0x10) + 0x60));
}

int32_t __unwindfunclet$??1SchedulerBase@details@Concurrency@@UAE@XZ$7(void* arg1 @ ebp)
{
    /* tailcall */
    return CListCtrl::~CListCtrl((*(arg1 - 0x10) + 0xc8));
}

int32_t sub_428f51(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x108));
}

int32_t __unwindfunclet$??1SchedulerBase@details@Concurrency@@UAE@XZ$9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x118));
}

int32_t sub_428f6d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x11c));
}

int32_t sub_428f7b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x120));
}

int32_t sub_428f89(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x128));
}

int32_t sub_428f97(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x12c));
}

int32_t sub_428fa5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x130));
}

int32_t sub_428fb3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x134));
}

int32_t sub_428fc1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((*(arg1 - 0x10) + 0x144));
}

int32_t __unwindfunclet$??1?$single_assignment@I@Concurrency@@UAE@XZ$1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((*(arg1 - 0x10) + 0x14c));
}

int32_t __unwindfunclet$??1?$_Greedy_node@W4agent_status@Concurrency@@@Concurrency@@UAE@XZ$1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((*(arg1 - 0x10) + 0x154));
}

int32_t __unwindfunclet$??1SchedulerBase@details@Concurrency@@UAE@XZ$10(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((*(arg1 - 0x10) + 0x15c));
}

int32_t sub_428ff9()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429010(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x14));
}

int32_t sub_429018(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_423ee0((*(arg1 - 0x14) + 0x60));
}

int32_t sub_429023(void* arg1 @ ebp)
{
    /* tailcall */
    return CListCtrl::~CListCtrl((*(arg1 - 0x14) + 0xc8));
}

int32_t sub_429031(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x108));
}

int32_t sub_42903f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x118));
}

int32_t sub_42904d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x11c));
}

int32_t sub_42905b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x120));
}

int32_t sub_429069(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x128));
}

int32_t sub_429077(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x12c));
}

int32_t sub_429085(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x130));
}

int32_t sub_429093(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x134));
}

int32_t sub_4290a1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((*(arg1 - 0x14) + 0x144));
}

int32_t sub_4290af(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((*(arg1 - 0x14) + 0x14c));
}

int32_t sub_4290bd(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((*(arg1 - 0x14) + 0x154));
}

int32_t sub_4290cb(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4290d3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4290db(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4290e3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4290eb()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429100(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x88));
}

int32_t sub_42910b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429120(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24));
}

int32_t sub_429128()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429140(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_429148()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429160(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429168()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429180(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429188()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4291a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x11c));
}

int32_t sub_4291ab(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x118));
}

int32_t sub_4291b6(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418cf0((arg1 - 0xb4));
}

int32_t sub_4291c1(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0x114));
}

int32_t sub_4291cc(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((arg1 - 0xf8));
}

int32_t sub_4291d7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xfc));
}

int32_t sub_4291e2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe4));
}

int32_t sub_4291ed(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xf0));
}

int32_t sub_4291f8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0xf8));
}

int32_t sub_429203()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429210(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429218(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x30f58));
}

int32_t sub_429226(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x30f98));
}

int32_t sub_429234(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ff0));
}

int32_t sub_429242(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ff4));
}

int32_t sub_429250(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ffc));
}

int32_t sub_42925e(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x31000));
}

int32_t sub_42926c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x31018));
}

int32_t sub_42927a(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x3101c));
}

int32_t sub_429288()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4292a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_4292a8(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x30f58));
}

int32_t sub_4292b6(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x30f98));
}

int32_t sub_4292c4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ff0));
}

int32_t sub_4292d2(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ff4));
}

int32_t sub_4292e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x30ffc));
}

int32_t sub_4292ee(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x31000));
}

int32_t sub_4292fc(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x31018));
}

int32_t sub_42930a()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429320(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xf8));
}

int32_t sub_42932b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xec));
}

int32_t sub_429336()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429340(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_429348()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429360(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_416460((arg1 - 0x18));
}

int32_t sub_429368()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429380(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429388(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_41c240((*(arg1 - 0x10) + 0x68));
}

int32_t sub_429393(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_426160((*(arg1 - 0x10) + 0x104));
}

int32_t sub_4293a1()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4293b0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_4293b8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_41c240((*(arg1 - 0x10) + 0x68));
}

int32_t sub_4293c3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_426160((*(arg1 - 0x10) + 0x104));
}

int32_t sub_4293d1()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4293e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_4293e8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429400(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x24));
}

int32_t sub_429408()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429420(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x30));
}

int32_t sub_429428()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429440(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c0));
}

int32_t sub_42944b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b8));
}

int32_t sub_429456(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c8));
}

int32_t sub_429461(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2c4));
}

int32_t sub_42946c(void* arg1 @ ebp)
{
    /* tailcall */
    return CFileFind::~CFileFind((arg1 - 0x254));
}

int32_t sub_429477(void* arg1 @ ebp)
{
    /* tailcall */
    return CStdioFile::~CStdioFile((arg1 - 0x2a4));
}

int32_t sub_429482(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_405fe0((arg1 - 0x208));
}

int32_t sub_42948d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2bc));
}

int32_t sub_429498(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_4294a3(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b0));
}

int32_t sub_4294ae(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b4));
}

int32_t sub_4294b9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2ac));
}

int32_t sub_4294c4(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b4));
}

int32_t sub_4294cf(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2ac));
}

int32_t sub_4294da(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x2b4));
}

int32_t sub_4294e5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x284));
}

int32_t sub_4294f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x274));
}

int32_t sub_4294fb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x26c));
}

int32_t sub_429506(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x290));
}

int32_t sub_429511(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x278));
}

int32_t sub_42951c(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x27c));
}

int32_t sub_429527(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x270));
}

int32_t sub_429532(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x268));
}

int32_t sub_42953d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28c));
}

int32_t sub_429548(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x288));
}

int32_t sub_429553(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x280));
}

int32_t sub_42955e(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_429569(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_406c20((arg1 - 0x208));
}

int32_t sub_429574()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429580(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429588(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x60));
}

int32_t sub_429593(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xa0));
}

int32_t __unwindfunclet$??0?$propagator_block@V?$single_link_registry@V?$ITarget@I@Concurrency@@@Concurrency@@V?$multi_link_registry@V?$ISource@W4agent_status@Concurrency@@@Concurrency@@@2@V?$ordered_message_processor@I@2@@Concurrency@@QAE@XZ$1(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xe0));
}

int32_t sub_4295af(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x120));
}

int32_t sub_4295bd()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4295d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x54));
}

int32_t sub_4295d8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x58));
}

int32_t sub_4295e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x5c));
}

int32_t sub_4295e8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_416a80((arg1 - 0x48));
}

int32_t sub_4295f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x50));
}

int32_t sub_4295f8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x50));
}

int32_t sub_429600()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429610(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x490));
}

int32_t sub_42961b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x498));
}

int32_t sub_429626(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x4a0));
}

int32_t sub_429631()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429640(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x1c));
}

int32_t sub_429648(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_429650(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x14));
}

int32_t sub_429658()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429670(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl(*(arg1 - 0x10));
}

int32_t sub_429678(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4110b0((*(arg1 - 0x10) + 0x60));
}

int32_t sub_429683()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429690(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl(*(arg1 - 0x14));
}

int32_t sub_429698(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_4110b0((*(arg1 - 0x14) + 0x60));
}

int32_t sub_4296a3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4296ab()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4296c0(void* arg1 @ ebp)
{
    /* tailcall */
    return CPaintDC::~CPaintDC((arg1 - 0x60));
}

int32_t sub_4296c8(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0xa8));
}

int32_t sub_4296d3(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0x9c));
}

int32_t sub_4296de(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xa0));
}

int32_t sub_4296e9(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401ef0((arg1 - 0x7c));
}

int32_t sub_4296f1(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0x7c));
}

int32_t sub_4296f9(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0xa8));
}

int32_t sub_429704()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429710(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_424750((arg1 - 0x24));
}

int32_t sub_429718(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_424750((arg1 - 0x2c));
}

int32_t sub_429720(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0x2c));
}

int32_t sub_429728(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0x24));
}

int32_t sub_429730()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429740(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_429748()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429760(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic(*(arg1 - 0x18));
}

int32_t sub_429768(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x18) + 0x48));
}

int32_t sub_429773(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((*(arg1 - 0x18) + 0x54));
}

int32_t sub_42977e(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((*(arg1 - 0x18) + 0x5c));
}

int32_t sub_429789(void* arg1 @ ebp)
{
    return sub_412fb0(*(arg1 - 0x14));
}

int32_t sub_429793()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4297a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CStatic::~CStatic(*(arg1 - 0x14));
}

int32_t sub_4297a8(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x14) + 0x48));
}

int32_t sub_4297b3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((*(arg1 - 0x14) + 0x54));
}

int32_t sub_4297be(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((*(arg1 - 0x14) + 0x5c));
}

int32_t sub_4297c9(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_4297d1()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4297e0(void* arg1 @ ebp)
{
    /* tailcall */
    return CPaintDC::~CPaintDC((arg1 - 0x68));
}

int32_t sub_4297e8(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0x9c));
}

int32_t sub_4297f3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0x8c));
}

int32_t sub_4297fe(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_424cc0((arg1 - 0x9c));
}

int32_t sub_429809(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0x9c));
}

int32_t sub_429814(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0x8c));
}

int32_t sub_42981f()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429830(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC(*(arg1 - 0x14));
}

int32_t sub_429838(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((*(arg1 - 0x14) + 0x10));
}

int32_t sub_429843(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40(*(arg1 - 0x10));
}

int32_t sub_42984b()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429860(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_418700((arg1 - 0x1c));
}

int32_t sub_429868(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0x1c));
}

int32_t sub_429870()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429880(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 + 4));
}

int32_t sub_429888()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4298a0(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_4298a8(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x60));
}

int32_t sub_4298b3(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xa0));
}

int32_t __unwindfunclet$??0?$source_block@V?$single_link_registry@V?$ITarget@I@Concurrency@@@Concurrency@@V?$ordered_message_processor@I@2@@Concurrency@@QAE@XZ$3(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xe0));
}

int32_t sub_4298cf(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x124));
}

int32_t sub_4298dd(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x128));
}

int32_t sub_4298eb(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x12c));
}

int32_t sub_4298f9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x130));
}

int32_t sub_429907(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x134));
}

int32_t sub_429915(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x140));
}

int32_t sub_429923(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x144));
}

int32_t sub_429931()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429940(void* arg1 @ ebp)
{
    /* tailcall */
    return CDialog::~CDialog(*(arg1 - 0x10));
}

int32_t sub_429948(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0x60));
}

int32_t sub_429953(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xa0));
}

int32_t sub_429961(void* arg1 @ ebp)
{
    /* tailcall */
    return CComboBox::~CComboBox((*(arg1 - 0x10) + 0xe0));
}

int32_t sub_42996f(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x124));
}

int32_t sub_42997d(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x128));
}

int32_t sub_42998b(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x12c));
}

int32_t sub_429999(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x130));
}

int32_t sub_4299a7(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x134));
}

int32_t sub_4299b5(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x140));
}

int32_t sub_4299c3()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4299d0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x18));
}

int32_t sub_4299d8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_4299f0(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x28));
}

int32_t sub_4299f8()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429a10(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x40));
}

int32_t sub_429a18()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429a30(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0x10));
}

int32_t sub_429a38()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429a50(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl(*(arg1 - 0x10));
}

int32_t sub_429a58(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((*(arg1 - 0x10) + 0x50));
}

int32_t sub_429a63()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429a70(void* arg1 @ ebp)
{
    /* tailcall */
    return CProgressCtrl::~CProgressCtrl(*(arg1 - 0x10));
}

int32_t sub_429a78()
{
    /* tailcall */
    return __CxxFrameHandler();
}

int32_t sub_429a90(void* arg1 @ ebp)
{
    /* tailcall */
    return CPaintDC::~CPaintDC((arg1 - 0x68));
}

int32_t sub_429a98(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0xd4));
}

int32_t sub_429aa3(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0xc4));
}

int32_t sub_429aae(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_424cc0((arg1 - 0xd4));
}

int32_t sub_429ab9(void* arg1 @ ebp)
{
    /* tailcall */
    return CString::~CString((arg1 - 0xe4));
}

int32_t sub_429ac4(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_424750((arg1 - 0xdc));
}

int32_t sub_429acf(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_401e40((arg1 - 0xdc));
}

int32_t sub_429ada(void* arg1 @ ebp)
{
    /* tailcall */
    return CDC::~CDC((arg1 - 0xd4));
}

int32_t sub_429ae5(void* arg1 @ ebp)
{
    /* tailcall */
    return sub_411120((arg1 - 0xc4));
}

int32_t sub_429af0()
{
    /* tailcall */
    return __CxxFrameHandler();
}

